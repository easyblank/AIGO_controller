
AIGO_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009484  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  08009618  08009618  00019618  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ac8  08009ac8  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08009ac8  08009ac8  00019ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ad0  08009ad0  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ad0  08009ad0  00019ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ad4  08009ad4  00019ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08009ad8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e8  2**0
                  CONTENTS
 10 .bss          0000089c  200001e8  200001e8  000201e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a84  20000a84  000201e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013419  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029b9  00000000  00000000  00033631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010c8  00000000  00000000  00035ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fd8  00000000  00000000  000370b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022be6  00000000  00000000  00038090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013a27  00000000  00000000  0005ac76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf3f5  00000000  00000000  0006e69d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013da92  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005990  00000000  00000000  0013dae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080095fc 	.word	0x080095fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	080095fc 	.word	0x080095fc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	607b      	str	r3, [r7, #4]
 8000eea:	4b1f      	ldr	r3, [pc, #124]	; (8000f68 <MX_DMA_Init+0x88>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a1e      	ldr	r2, [pc, #120]	; (8000f68 <MX_DMA_Init+0x88>)
 8000ef0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b1c      	ldr	r3, [pc, #112]	; (8000f68 <MX_DMA_Init+0x88>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	603b      	str	r3, [r7, #0]
 8000f06:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <MX_DMA_Init+0x88>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a17      	ldr	r2, [pc, #92]	; (8000f68 <MX_DMA_Init+0x88>)
 8000f0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <MX_DMA_Init+0x88>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f1a:	603b      	str	r3, [r7, #0]
 8000f1c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2100      	movs	r1, #0
 8000f22:	200c      	movs	r0, #12
 8000f24:	f001 fdbd 	bl	8002aa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000f28:	200c      	movs	r0, #12
 8000f2a:	f001 fdd6 	bl	8002ada <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2100      	movs	r1, #0
 8000f32:	200e      	movs	r0, #14
 8000f34:	f001 fdb5 	bl	8002aa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000f38:	200e      	movs	r0, #14
 8000f3a:	f001 fdce 	bl	8002ada <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2100      	movs	r1, #0
 8000f42:	2039      	movs	r0, #57	; 0x39
 8000f44:	f001 fdad 	bl	8002aa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000f48:	2039      	movs	r0, #57	; 0x39
 8000f4a:	f001 fdc6 	bl	8002ada <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2100      	movs	r1, #0
 8000f52:	2045      	movs	r0, #69	; 0x45
 8000f54:	f001 fda5 	bl	8002aa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000f58:	2045      	movs	r0, #69	; 0x45
 8000f5a:	f001 fdbe 	bl	8002ada <HAL_NVIC_EnableIRQ>

}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40023800 	.word	0x40023800

08000f6c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08c      	sub	sp, #48	; 0x30
 8000f70:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f72:	f107 031c 	add.w	r3, r7, #28
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
 8000f80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	61bb      	str	r3, [r7, #24]
 8000f86:	4b68      	ldr	r3, [pc, #416]	; (8001128 <MX_GPIO_Init+0x1bc>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	4a67      	ldr	r2, [pc, #412]	; (8001128 <MX_GPIO_Init+0x1bc>)
 8000f8c:	f043 0310 	orr.w	r3, r3, #16
 8000f90:	6313      	str	r3, [r2, #48]	; 0x30
 8000f92:	4b65      	ldr	r3, [pc, #404]	; (8001128 <MX_GPIO_Init+0x1bc>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	f003 0310 	and.w	r3, r3, #16
 8000f9a:	61bb      	str	r3, [r7, #24]
 8000f9c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
 8000fa2:	4b61      	ldr	r3, [pc, #388]	; (8001128 <MX_GPIO_Init+0x1bc>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a60      	ldr	r2, [pc, #384]	; (8001128 <MX_GPIO_Init+0x1bc>)
 8000fa8:	f043 0304 	orr.w	r3, r3, #4
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
 8000fae:	4b5e      	ldr	r3, [pc, #376]	; (8001128 <MX_GPIO_Init+0x1bc>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f003 0304 	and.w	r3, r3, #4
 8000fb6:	617b      	str	r3, [r7, #20]
 8000fb8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
 8000fbe:	4b5a      	ldr	r3, [pc, #360]	; (8001128 <MX_GPIO_Init+0x1bc>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	4a59      	ldr	r2, [pc, #356]	; (8001128 <MX_GPIO_Init+0x1bc>)
 8000fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fca:	4b57      	ldr	r3, [pc, #348]	; (8001128 <MX_GPIO_Init+0x1bc>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	4b53      	ldr	r3, [pc, #332]	; (8001128 <MX_GPIO_Init+0x1bc>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	4a52      	ldr	r2, [pc, #328]	; (8001128 <MX_GPIO_Init+0x1bc>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe6:	4b50      	ldr	r3, [pc, #320]	; (8001128 <MX_GPIO_Init+0x1bc>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	4b4c      	ldr	r3, [pc, #304]	; (8001128 <MX_GPIO_Init+0x1bc>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	4a4b      	ldr	r2, [pc, #300]	; (8001128 <MX_GPIO_Init+0x1bc>)
 8000ffc:	f043 0302 	orr.w	r3, r3, #2
 8001000:	6313      	str	r3, [r2, #48]	; 0x30
 8001002:	4b49      	ldr	r3, [pc, #292]	; (8001128 <MX_GPIO_Init+0x1bc>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	f003 0302 	and.w	r3, r3, #2
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	607b      	str	r3, [r7, #4]
 8001012:	4b45      	ldr	r3, [pc, #276]	; (8001128 <MX_GPIO_Init+0x1bc>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a44      	ldr	r2, [pc, #272]	; (8001128 <MX_GPIO_Init+0x1bc>)
 8001018:	f043 0308 	orr.w	r3, r3, #8
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b42      	ldr	r3, [pc, #264]	; (8001128 <MX_GPIO_Init+0x1bc>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0308 	and.w	r3, r3, #8
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	2138      	movs	r1, #56	; 0x38
 800102e:	483f      	ldr	r0, [pc, #252]	; (800112c <MX_GPIO_Init+0x1c0>)
 8001030:	f002 fb0c 	bl	800364c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800103a:	483d      	ldr	r0, [pc, #244]	; (8001130 <MX_GPIO_Init+0x1c4>)
 800103c:	f002 fb06 	bl	800364c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001040:	2201      	movs	r2, #1
 8001042:	2101      	movs	r1, #1
 8001044:	483a      	ldr	r0, [pc, #232]	; (8001130 <MX_GPIO_Init+0x1c4>)
 8001046:	f002 fb01 	bl	800364c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001050:	4838      	ldr	r0, [pc, #224]	; (8001134 <MX_GPIO_Init+0x1c8>)
 8001052:	f002 fafb 	bl	800364c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001056:	2200      	movs	r2, #0
 8001058:	f44f 6171 	mov.w	r1, #3856	; 0xf10
 800105c:	4836      	ldr	r0, [pc, #216]	; (8001138 <MX_GPIO_Init+0x1cc>)
 800105e:	f002 faf5 	bl	800364c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PE4 PE5 */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_4|GPIO_PIN_5;
 8001062:	2338      	movs	r3, #56	; 0x38
 8001064:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001066:	2301      	movs	r3, #1
 8001068:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2300      	movs	r3, #0
 8001070:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001072:	f107 031c 	add.w	r3, r7, #28
 8001076:	4619      	mov	r1, r3
 8001078:	482c      	ldr	r0, [pc, #176]	; (800112c <MX_GPIO_Init+0x1c0>)
 800107a:	f002 f94b 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|OTG_FS_PowerSwitchOn_Pin;
 800107e:	f242 0301 	movw	r3, #8193	; 0x2001
 8001082:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001084:	2301      	movs	r3, #1
 8001086:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108c:	2300      	movs	r3, #0
 800108e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001090:	f107 031c 	add.w	r3, r7, #28
 8001094:	4619      	mov	r1, r3
 8001096:	4826      	ldr	r0, [pc, #152]	; (8001130 <MX_GPIO_Init+0x1c4>)
 8001098:	f002 f93c 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800109c:	2304      	movs	r3, #4
 800109e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a0:	2300      	movs	r3, #0
 80010a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80010a8:	f107 031c 	add.w	r3, r7, #28
 80010ac:	4619      	mov	r1, r3
 80010ae:	4821      	ldr	r0, [pc, #132]	; (8001134 <MX_GPIO_Init+0x1c8>)
 80010b0:	f002 f930 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80010b4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80010b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ba:	2301      	movs	r3, #1
 80010bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	2300      	movs	r3, #0
 80010c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c6:	f107 031c 	add.w	r3, r7, #28
 80010ca:	4619      	mov	r1, r3
 80010cc:	4819      	ldr	r0, [pc, #100]	; (8001134 <MX_GPIO_Init+0x1c8>)
 80010ce:	f002 f921 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80010d2:	f44f 6371 	mov.w	r3, #3856	; 0xf10
 80010d6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d8:	2301      	movs	r3, #1
 80010da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e0:	2300      	movs	r3, #0
 80010e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e4:	f107 031c 	add.w	r3, r7, #28
 80010e8:	4619      	mov	r1, r3
 80010ea:	4813      	ldr	r0, [pc, #76]	; (8001138 <MX_GPIO_Init+0x1cc>)
 80010ec:	f002 f912 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80010f0:	2320      	movs	r3, #32
 80010f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f4:	2300      	movs	r3, #0
 80010f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010fc:	f107 031c 	add.w	r3, r7, #28
 8001100:	4619      	mov	r1, r3
 8001102:	480d      	ldr	r0, [pc, #52]	; (8001138 <MX_GPIO_Init+0x1cc>)
 8001104:	f002 f906 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001108:	2302      	movs	r3, #2
 800110a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800110c:	4b0b      	ldr	r3, [pc, #44]	; (800113c <MX_GPIO_Init+0x1d0>)
 800110e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001114:	f107 031c 	add.w	r3, r7, #28
 8001118:	4619      	mov	r1, r3
 800111a:	4804      	ldr	r0, [pc, #16]	; (800112c <MX_GPIO_Init+0x1c0>)
 800111c:	f002 f8fa 	bl	8003314 <HAL_GPIO_Init>

}
 8001120:	bf00      	nop
 8001122:	3730      	adds	r7, #48	; 0x30
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40023800 	.word	0x40023800
 800112c:	40021000 	.word	0x40021000
 8001130:	40020800 	.word	0x40020800
 8001134:	40020400 	.word	0x40020400
 8001138:	40020c00 	.word	0x40020c00
 800113c:	10120000 	.word	0x10120000

08001140 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001144:	4b12      	ldr	r3, [pc, #72]	; (8001190 <MX_I2C1_Init+0x50>)
 8001146:	4a13      	ldr	r2, [pc, #76]	; (8001194 <MX_I2C1_Init+0x54>)
 8001148:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800114a:	4b11      	ldr	r3, [pc, #68]	; (8001190 <MX_I2C1_Init+0x50>)
 800114c:	4a12      	ldr	r2, [pc, #72]	; (8001198 <MX_I2C1_Init+0x58>)
 800114e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001150:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <MX_I2C1_Init+0x50>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001156:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <MX_I2C1_Init+0x50>)
 8001158:	2200      	movs	r2, #0
 800115a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <MX_I2C1_Init+0x50>)
 800115e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001162:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001164:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <MX_I2C1_Init+0x50>)
 8001166:	2200      	movs	r2, #0
 8001168:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800116a:	4b09      	ldr	r3, [pc, #36]	; (8001190 <MX_I2C1_Init+0x50>)
 800116c:	2200      	movs	r2, #0
 800116e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001170:	4b07      	ldr	r3, [pc, #28]	; (8001190 <MX_I2C1_Init+0x50>)
 8001172:	2200      	movs	r2, #0
 8001174:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001176:	4b06      	ldr	r3, [pc, #24]	; (8001190 <MX_I2C1_Init+0x50>)
 8001178:	2200      	movs	r2, #0
 800117a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800117c:	4804      	ldr	r0, [pc, #16]	; (8001190 <MX_I2C1_Init+0x50>)
 800117e:	f002 fa7f 	bl	8003680 <HAL_I2C_Init>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001188:	f000 fbde 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000664 	.word	0x20000664
 8001194:	40005400 	.word	0x40005400
 8001198:	00061a80 	.word	0x00061a80

0800119c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	; 0x28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a19      	ldr	r2, [pc, #100]	; (8001220 <HAL_I2C_MspInit+0x84>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d12b      	bne.n	8001216 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	613b      	str	r3, [r7, #16]
 80011c2:	4b18      	ldr	r3, [pc, #96]	; (8001224 <HAL_I2C_MspInit+0x88>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a17      	ldr	r2, [pc, #92]	; (8001224 <HAL_I2C_MspInit+0x88>)
 80011c8:	f043 0302 	orr.w	r3, r3, #2
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b15      	ldr	r3, [pc, #84]	; (8001224 <HAL_I2C_MspInit+0x88>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011da:	23c0      	movs	r3, #192	; 0xc0
 80011dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011de:	2312      	movs	r3, #18
 80011e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e6:	2303      	movs	r3, #3
 80011e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011ea:	2304      	movs	r3, #4
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	480c      	ldr	r0, [pc, #48]	; (8001228 <HAL_I2C_MspInit+0x8c>)
 80011f6:	f002 f88d 	bl	8003314 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <HAL_I2C_MspInit+0x88>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	4a08      	ldr	r2, [pc, #32]	; (8001224 <HAL_I2C_MspInit+0x88>)
 8001204:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001208:	6413      	str	r3, [r2, #64]	; 0x40
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <HAL_I2C_MspInit+0x88>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001216:	bf00      	nop
 8001218:	3728      	adds	r7, #40	; 0x28
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40005400 	.word	0x40005400
 8001224:	40023800 	.word	0x40023800
 8001228:	40020400 	.word	0x40020400

0800122c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001230:	f001 fac6 	bl	80027c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001234:	f000 f8aa 	bl	800138c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 8001238:	f7ff fe52 	bl	8000ee0 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800123c:	f7ff fe96 	bl	8000f6c <MX_GPIO_Init>
  MX_TIM1_Init();
 8001240:	f000 fcf8 	bl	8001c34 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001244:	f000 fdba 	bl	8001dbc <MX_TIM2_Init>
  MX_TIM3_Init();
 8001248:	f000 fe0c 	bl	8001e64 <MX_TIM3_Init>
  MX_TIM4_Init();
 800124c:	f000 fe5e 	bl	8001f0c <MX_TIM4_Init>
  MX_TIM5_Init();
 8001250:	f000 feb0 	bl	8001fb4 <MX_TIM5_Init>
  MX_TIM6_Init();
 8001254:	f000 ff02 	bl	800205c <MX_TIM6_Init>
  MX_USART6_UART_Init();
 8001258:	f001 f8dc 	bl	8002414 <MX_USART6_UART_Init>
  MX_DMA_Init();
 800125c:	f7ff fe40 	bl	8000ee0 <MX_DMA_Init>
  MX_I2C1_Init();
 8001260:	f7ff ff6e 	bl	8001140 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8001264:	f001 f8ac 	bl	80023c0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  //while (MPU6050_Init(&hi2c1) ==1);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001268:	2100      	movs	r1, #0
 800126a:	483c      	ldr	r0, [pc, #240]	; (800135c <main+0x130>)
 800126c:	f003 f868 	bl	8004340 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001270:	2104      	movs	r1, #4
 8001272:	483a      	ldr	r0, [pc, #232]	; (800135c <main+0x130>)
 8001274:	f003 f864 	bl	8004340 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001278:	2108      	movs	r1, #8
 800127a:	4838      	ldr	r0, [pc, #224]	; (800135c <main+0x130>)
 800127c:	f003 f860 	bl	8004340 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001280:	210c      	movs	r1, #12
 8001282:	4836      	ldr	r0, [pc, #216]	; (800135c <main+0x130>)
 8001284:	f003 f85c 	bl	8004340 <HAL_TIM_PWM_Start>

  HAL_Delay(1000);
 8001288:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800128c:	f001 fb0a 	bl	80028a4 <HAL_Delay>
  Initialize_Encoder_Count();
 8001290:	f000 f8e6 	bl	8001460 <Initialize_Encoder_Count>
  HAL_UART_Receive_DMA(&huart6, rx_data, 10);
 8001294:	220a      	movs	r2, #10
 8001296:	4932      	ldr	r1, [pc, #200]	; (8001360 <main+0x134>)
 8001298:	4832      	ldr	r0, [pc, #200]	; (8001364 <main+0x138>)
 800129a:	f004 f9b5 	bl	8005608 <HAL_UART_Receive_DMA>
  HAL_UART_Transmit_DMA(&huart3, &scan_command, 2);
 800129e:	2202      	movs	r2, #2
 80012a0:	4931      	ldr	r1, [pc, #196]	; (8001368 <main+0x13c>)
 80012a2:	4832      	ldr	r0, [pc, #200]	; (800136c <main+0x140>)
 80012a4:	f004 f944 	bl	8005530 <HAL_UART_Transmit_DMA>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80012a8:	213c      	movs	r1, #60	; 0x3c
 80012aa:	4831      	ldr	r0, [pc, #196]	; (8001370 <main+0x144>)
 80012ac:	f003 f9b6 	bl	800461c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80012b0:	213c      	movs	r1, #60	; 0x3c
 80012b2:	4830      	ldr	r0, [pc, #192]	; (8001374 <main+0x148>)
 80012b4:	f003 f9b2 	bl	800461c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80012b8:	213c      	movs	r1, #60	; 0x3c
 80012ba:	482f      	ldr	r0, [pc, #188]	; (8001378 <main+0x14c>)
 80012bc:	f003 f9ae 	bl	800461c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 80012c0:	213c      	movs	r1, #60	; 0x3c
 80012c2:	482e      	ldr	r0, [pc, #184]	; (800137c <main+0x150>)
 80012c4:	f003 f9aa 	bl	800461c <HAL_TIM_Encoder_Start>
  //Initialize for motor PWM

  //12,13 : LF | 14,15 : RF | 8,9 : RB | 10,11 : LB
  //write pin SET at lower pin to go forward
  //initialize all wheels directions forward
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
 80012c8:	2201      	movs	r2, #1
 80012ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012ce:	482c      	ldr	r0, [pc, #176]	; (8001380 <main+0x154>)
 80012d0:	f002 f9bc 	bl	800364c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 80012d4:	2200      	movs	r2, #0
 80012d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012da:	4829      	ldr	r0, [pc, #164]	; (8001380 <main+0x154>)
 80012dc:	f002 f9b6 	bl	800364c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 80012e0:	2201      	movs	r2, #1
 80012e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012e6:	4826      	ldr	r0, [pc, #152]	; (8001380 <main+0x154>)
 80012e8:	f002 f9b0 	bl	800364c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET);
 80012ec:	2200      	movs	r2, #0
 80012ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012f2:	4823      	ldr	r0, [pc, #140]	; (8001380 <main+0x154>)
 80012f4:	f002 f9aa 	bl	800364c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, SET);
 80012f8:	2201      	movs	r2, #1
 80012fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012fe:	4821      	ldr	r0, [pc, #132]	; (8001384 <main+0x158>)
 8001300:	f002 f9a4 	bl	800364c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);
 8001304:	2200      	movs	r2, #0
 8001306:	f44f 7100 	mov.w	r1, #512	; 0x200
 800130a:	481e      	ldr	r0, [pc, #120]	; (8001384 <main+0x158>)
 800130c:	f002 f99e 	bl	800364c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, SET);
 8001310:	2201      	movs	r2, #1
 8001312:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001316:	481b      	ldr	r0, [pc, #108]	; (8001384 <main+0x158>)
 8001318:	f002 f998 	bl	800364c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, RESET);
 800131c:	2200      	movs	r2, #0
 800131e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001322:	4818      	ldr	r0, [pc, #96]	; (8001384 <main+0x158>)
 8001324:	f002 f992 	bl	800364c <HAL_GPIO_WritePin>
  while (1)
  {
	  //Receive_Lidar();
	  //Receive_Imu();
	  //HAL_Delay(10);
	  if(HAL_GetTick()-last > 100L){
 8001328:	f001 fab0 	bl	800288c <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	4b16      	ldr	r3, [pc, #88]	; (8001388 <main+0x15c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b64      	cmp	r3, #100	; 0x64
 8001336:	d9f7      	bls.n	8001328 <main+0xfc>
		  last = HAL_GetTick();
 8001338:	f001 faa8 	bl	800288c <HAL_GetTick>
 800133c:	4603      	mov	r3, r0
 800133e:	4a12      	ldr	r2, [pc, #72]	; (8001388 <main+0x15c>)
 8001340:	6013      	str	r3, [r2, #0]
		  Receive_Encoder_Count();
 8001342:	f000 f8a7 	bl	8001494 <Receive_Encoder_Count>
		  Transmit_Data();
 8001346:	f000 f8c1 	bl	80014cc <Transmit_Data>
		  Receive_Serial();
 800134a:	f000 f8e1 	bl	8001510 <Receive_Serial>
		  Set_Motor_PID();
 800134e:	f000 f925 	bl	800159c <Set_Motor_PID>
		  Set_Motor_PWM();
 8001352:	f000 f9d5 	bl	8001700 <Set_Motor_PWM>
		  Initialize_Encoder_Count();
 8001356:	f000 f883 	bl	8001460 <Initialize_Encoder_Count>
	  if(HAL_GetTick()-last > 100L){
 800135a:	e7e5      	b.n	8001328 <main+0xfc>
 800135c:	200007d8 	.word	0x200007d8
 8001360:	20000204 	.word	0x20000204
 8001364:	20000a2c 	.word	0x20000a2c
 8001368:	20000000 	.word	0x20000000
 800136c:	20000928 	.word	0x20000928
 8001370:	20000820 	.word	0x20000820
 8001374:	20000748 	.word	0x20000748
 8001378:	200006b8 	.word	0x200006b8
 800137c:	20000700 	.word	0x20000700
 8001380:	40020400 	.word	0x40020400
 8001384:	40020c00 	.word	0x40020c00
 8001388:	20000208 	.word	0x20000208

0800138c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b094      	sub	sp, #80	; 0x50
 8001390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001392:	f107 0320 	add.w	r3, r7, #32
 8001396:	2230      	movs	r2, #48	; 0x30
 8001398:	2100      	movs	r1, #0
 800139a:	4618      	mov	r0, r3
 800139c:	f004 ffd2 	bl	8006344 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a0:	f107 030c 	add.w	r3, r7, #12
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b0:	2300      	movs	r3, #0
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	4b28      	ldr	r3, [pc, #160]	; (8001458 <SystemClock_Config+0xcc>)
 80013b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b8:	4a27      	ldr	r2, [pc, #156]	; (8001458 <SystemClock_Config+0xcc>)
 80013ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013be:	6413      	str	r3, [r2, #64]	; 0x40
 80013c0:	4b25      	ldr	r3, [pc, #148]	; (8001458 <SystemClock_Config+0xcc>)
 80013c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013cc:	2300      	movs	r3, #0
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	4b22      	ldr	r3, [pc, #136]	; (800145c <SystemClock_Config+0xd0>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a21      	ldr	r2, [pc, #132]	; (800145c <SystemClock_Config+0xd0>)
 80013d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013da:	6013      	str	r3, [r2, #0]
 80013dc:	4b1f      	ldr	r3, [pc, #124]	; (800145c <SystemClock_Config+0xd0>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e4:	607b      	str	r3, [r7, #4]
 80013e6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013e8:	2301      	movs	r3, #1
 80013ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013f2:	2302      	movs	r3, #2
 80013f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013fc:	2304      	movs	r3, #4
 80013fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001400:	23a8      	movs	r3, #168	; 0xa8
 8001402:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001404:	2302      	movs	r3, #2
 8001406:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001408:	2303      	movs	r3, #3
 800140a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800140c:	f107 0320 	add.w	r3, r7, #32
 8001410:	4618      	mov	r0, r3
 8001412:	f002 fa79 	bl	8003908 <HAL_RCC_OscConfig>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800141c:	f000 fa94 	bl	8001948 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001420:	230f      	movs	r3, #15
 8001422:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001424:	2302      	movs	r3, #2
 8001426:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800142c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001430:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001432:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001436:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001438:	f107 030c 	add.w	r3, r7, #12
 800143c:	2105      	movs	r1, #5
 800143e:	4618      	mov	r0, r3
 8001440:	f002 fcda 	bl	8003df8 <HAL_RCC_ClockConfig>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800144a:	f000 fa7d 	bl	8001948 <Error_Handler>
  }
}
 800144e:	bf00      	nop
 8001450:	3750      	adds	r7, #80	; 0x50
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40023800 	.word	0x40023800
 800145c:	40007000 	.word	0x40007000

08001460 <Initialize_Encoder_Count>:

/* USER CODE BEGIN 4 */
void Initialize_Encoder_Count(){
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
	TIM2 -> CNT = 0;
 8001464:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001468:	2200      	movs	r2, #0
 800146a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3 -> CNT = 0;
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <Initialize_Encoder_Count+0x28>)
 800146e:	2200      	movs	r2, #0
 8001470:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4 -> CNT = 0;
 8001472:	4b06      	ldr	r3, [pc, #24]	; (800148c <Initialize_Encoder_Count+0x2c>)
 8001474:	2200      	movs	r2, #0
 8001476:	625a      	str	r2, [r3, #36]	; 0x24
	TIM5 -> CNT = 0;
 8001478:	4b05      	ldr	r3, [pc, #20]	; (8001490 <Initialize_Encoder_Count+0x30>)
 800147a:	2200      	movs	r2, #0
 800147c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	40000400 	.word	0x40000400
 800148c:	40000800 	.word	0x40000800
 8001490:	40000c00 	.word	0x40000c00

08001494 <Receive_Encoder_Count>:
void Receive_Encoder_Count(){
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
	//TIM2 : LF, TIM3 : RF, TIM4 : LB, TIM5 : RB
	  //CntR = (TIM3 -> CNT >> 3) + (TIM4 -> CNT >> 3);
	  //CntL = (TIM2 -> CNT >> 3) + (TIM5 -> CNT >> 3);
		CntR = TIM4 -> CNT >> 2;
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <Receive_Encoder_Count+0x28>)
 800149a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149c:	089b      	lsrs	r3, r3, #2
 800149e:	b29a      	uxth	r2, r3
 80014a0:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <Receive_Encoder_Count+0x2c>)
 80014a2:	801a      	strh	r2, [r3, #0]
		CntL = TIM5 -> CNT >> 2;
 80014a4:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <Receive_Encoder_Count+0x30>)
 80014a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a8:	089b      	lsrs	r3, r3, #2
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <Receive_Encoder_Count+0x34>)
 80014ae:	801a      	strh	r2, [r3, #0]
	  //sprintf(data, "e%u,%u\n\r", CntL, CntR);
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	40000800 	.word	0x40000800
 80014c0:	2000060e 	.word	0x2000060e
 80014c4:	40000c00 	.word	0x40000c00
 80014c8:	2000060c 	.word	0x2000060c

080014cc <Transmit_Data>:
		 if (array_element_of_index_equal(rx3_start, scan_response, 7)){
			scan_start = true;
		 }
	  }
}
void Transmit_Data(){
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
	}
	sprintf(data, "%d\n\r", distance[359]);
	HAL_UART_Transmit_DMA(&huart6, (uint8_t*)data, strlen(data));
	**/
	//Encoder
	sprintf(data, "e%u,%u\n\r", CntL, CntR);
 80014d0:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <Transmit_Data+0x30>)
 80014d2:	881b      	ldrh	r3, [r3, #0]
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <Transmit_Data+0x34>)
 80014d8:	881b      	ldrh	r3, [r3, #0]
 80014da:	490a      	ldr	r1, [pc, #40]	; (8001504 <Transmit_Data+0x38>)
 80014dc:	480a      	ldr	r0, [pc, #40]	; (8001508 <Transmit_Data+0x3c>)
 80014de:	f005 fba3 	bl	8006c28 <siprintf>
	HAL_UART_Transmit_DMA(&huart6, (uint8_t*)data, strlen(data));
 80014e2:	4809      	ldr	r0, [pc, #36]	; (8001508 <Transmit_Data+0x3c>)
 80014e4:	f7fe fe74 	bl	80001d0 <strlen>
 80014e8:	4603      	mov	r3, r0
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	461a      	mov	r2, r3
 80014ee:	4906      	ldr	r1, [pc, #24]	; (8001508 <Transmit_Data+0x3c>)
 80014f0:	4806      	ldr	r0, [pc, #24]	; (800150c <Transmit_Data+0x40>)
 80014f2:	f004 f81d 	bl	8005530 <HAL_UART_Transmit_DMA>
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	2000060c 	.word	0x2000060c
 8001500:	2000060e 	.word	0x2000060e
 8001504:	08009618 	.word	0x08009618
 8001508:	2000020c 	.word	0x2000020c
 800150c:	20000a2c 	.word	0x20000a2c

08001510 <Receive_Serial>:


void Receive_Serial(){
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
	//Receive two integer data (Desired Encoder Rate for two wheels) from serial (Raspberry Pi)
	//split string data, then convert to integer
	HAL_UART_Receive_DMA(&huart6, (uint8_t*)data, strlen(data));
 8001516:	481c      	ldr	r0, [pc, #112]	; (8001588 <Receive_Serial+0x78>)
 8001518:	f7fe fe5a 	bl	80001d0 <strlen>
 800151c:	4603      	mov	r3, r0
 800151e:	b29b      	uxth	r3, r3
 8001520:	461a      	mov	r2, r3
 8001522:	4919      	ldr	r1, [pc, #100]	; (8001588 <Receive_Serial+0x78>)
 8001524:	4819      	ldr	r0, [pc, #100]	; (800158c <Receive_Serial+0x7c>)
 8001526:	f004 f86f 	bl	8005608 <HAL_UART_Receive_DMA>
	uint8_t i = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	73fb      	strb	r3, [r7, #15]
	char *p = strtok(data, ",");
 800152e:	4918      	ldr	r1, [pc, #96]	; (8001590 <Receive_Serial+0x80>)
 8001530:	4815      	ldr	r0, [pc, #84]	; (8001588 <Receive_Serial+0x78>)
 8001532:	f005 fb99 	bl	8006c68 <strtok>
 8001536:	60b8      	str	r0, [r7, #8]
	char *array[2];
	while(p !=NULL){
 8001538:	e00e      	b.n	8001558 <Receive_Serial+0x48>
		array[i++] = p;
 800153a:	7bfb      	ldrb	r3, [r7, #15]
 800153c:	1c5a      	adds	r2, r3, #1
 800153e:	73fa      	strb	r2, [r7, #15]
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	f107 0210 	add.w	r2, r7, #16
 8001546:	4413      	add	r3, r2
 8001548:	68ba      	ldr	r2, [r7, #8]
 800154a:	f843 2c10 	str.w	r2, [r3, #-16]
		p = strtok(NULL, ",");
 800154e:	4910      	ldr	r1, [pc, #64]	; (8001590 <Receive_Serial+0x80>)
 8001550:	2000      	movs	r0, #0
 8001552:	f005 fb89 	bl	8006c68 <strtok>
 8001556:	60b8      	str	r0, [r7, #8]
	while(p !=NULL){
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1ed      	bne.n	800153a <Receive_Serial+0x2a>
	}
	RecL = atoi(array[0]);
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f004 fec1 	bl	80062e8 <atoi>
 8001566:	4603      	mov	r3, r0
 8001568:	461a      	mov	r2, r3
 800156a:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <Receive_Serial+0x84>)
 800156c:	601a      	str	r2, [r3, #0]
	RecR = atoi(array[1]);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4618      	mov	r0, r3
 8001572:	f004 feb9 	bl	80062e8 <atoi>
 8001576:	4603      	mov	r3, r0
 8001578:	461a      	mov	r2, r3
 800157a:	4b07      	ldr	r3, [pc, #28]	; (8001598 <Receive_Serial+0x88>)
 800157c:	601a      	str	r2, [r3, #0]
}
 800157e:	bf00      	nop
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	2000020c 	.word	0x2000020c
 800158c:	20000a2c 	.word	0x20000a2c
 8001590:	08009624 	.word	0x08009624
 8001594:	20000610 	.word	0x20000610
 8001598:	20000614 	.word	0x20000614

0800159c <Set_Motor_PID>:

//named PID, but the example code implemented only P control i think T.T
void Set_Motor_PID(){
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
	//0 : LF | 1 : RF | 2 : LB | 3 : RB
	uint8_t index = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	71fb      	strb	r3, [r7, #7]
	if(RecL !=0)
 80015a6:	4b4a      	ldr	r3, [pc, #296]	; (80016d0 <Set_Motor_PID+0x134>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d007      	beq.n	80015be <Set_Motor_PID+0x22>
		desired_speed_L = Calculate_Value(RecL);
 80015ae:	4b48      	ldr	r3, [pc, #288]	; (80016d0 <Set_Motor_PID+0x134>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 f984 	bl	80018c0 <Calculate_Value>
 80015b8:	4603      	mov	r3, r0
 80015ba:	4a46      	ldr	r2, [pc, #280]	; (80016d4 <Set_Motor_PID+0x138>)
 80015bc:	6013      	str	r3, [r2, #0]
	//Determine Desired motor PWM value

	if(RecR !=0)
 80015be:	4b46      	ldr	r3, [pc, #280]	; (80016d8 <Set_Motor_PID+0x13c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d007      	beq.n	80015d6 <Set_Motor_PID+0x3a>
		desired_speed_R = Calculate_Value(RecR);
 80015c6:	4b44      	ldr	r3, [pc, #272]	; (80016d8 <Set_Motor_PID+0x13c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f000 f978 	bl	80018c0 <Calculate_Value>
 80015d0:	4603      	mov	r3, r0
 80015d2:	4a42      	ldr	r2, [pc, #264]	; (80016dc <Set_Motor_PID+0x140>)
 80015d4:	6013      	str	r3, [r2, #0]

	//Determine Current motor PWM value
	encoder_speed_L = Calculate_Value(CntL);
 80015d6:	4b42      	ldr	r3, [pc, #264]	; (80016e0 <Set_Motor_PID+0x144>)
 80015d8:	881b      	ldrh	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f000 f970 	bl	80018c0 <Calculate_Value>
 80015e0:	4603      	mov	r3, r0
 80015e2:	4a40      	ldr	r2, [pc, #256]	; (80016e4 <Set_Motor_PID+0x148>)
 80015e4:	6013      	str	r3, [r2, #0]
	encoder_speed_R = Calculate_Value(CntR);
 80015e6:	4b40      	ldr	r3, [pc, #256]	; (80016e8 <Set_Motor_PID+0x14c>)
 80015e8:	881b      	ldrh	r3, [r3, #0]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 f968 	bl	80018c0 <Calculate_Value>
 80015f0:	4603      	mov	r3, r0
 80015f2:	4a3e      	ldr	r2, [pc, #248]	; (80016ec <Set_Motor_PID+0x150>)
 80015f4:	6013      	str	r3, [r2, #0]

	//Do P Control, NOT pid control

	error_speed[0] = desired_speed_L - encoder_speed_L;
 80015f6:	4b37      	ldr	r3, [pc, #220]	; (80016d4 <Set_Motor_PID+0x138>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	4b3a      	ldr	r3, [pc, #232]	; (80016e4 <Set_Motor_PID+0x148>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	461a      	mov	r2, r3
 8001602:	4b3b      	ldr	r3, [pc, #236]	; (80016f0 <Set_Motor_PID+0x154>)
 8001604:	601a      	str	r2, [r3, #0]
	error_speed[1] = desired_speed_R - encoder_speed_R;
 8001606:	4b35      	ldr	r3, [pc, #212]	; (80016dc <Set_Motor_PID+0x140>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	4b38      	ldr	r3, [pc, #224]	; (80016ec <Set_Motor_PID+0x150>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	461a      	mov	r2, r3
 8001612:	4b37      	ldr	r3, [pc, #220]	; (80016f0 <Set_Motor_PID+0x154>)
 8001614:	605a      	str	r2, [r3, #4]
	error_speed[2] = desired_speed_L - encoder_speed_L;
 8001616:	4b2f      	ldr	r3, [pc, #188]	; (80016d4 <Set_Motor_PID+0x138>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	4b32      	ldr	r3, [pc, #200]	; (80016e4 <Set_Motor_PID+0x148>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	461a      	mov	r2, r3
 8001622:	4b33      	ldr	r3, [pc, #204]	; (80016f0 <Set_Motor_PID+0x154>)
 8001624:	609a      	str	r2, [r3, #8]
	error_speed[3] = desired_speed_R - encoder_speed_R;
 8001626:	4b2d      	ldr	r3, [pc, #180]	; (80016dc <Set_Motor_PID+0x140>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	4b30      	ldr	r3, [pc, #192]	; (80016ec <Set_Motor_PID+0x150>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	461a      	mov	r2, r3
 8001632:	4b2f      	ldr	r3, [pc, #188]	; (80016f0 <Set_Motor_PID+0x154>)
 8001634:	60da      	str	r2, [r3, #12]

	PID_speed[0] = old_PID_speed[0] + Kp*error_speed[0];
 8001636:	4b2f      	ldr	r3, [pc, #188]	; (80016f4 <Set_Motor_PID+0x158>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	4b2d      	ldr	r3, [pc, #180]	; (80016f0 <Set_Motor_PID+0x154>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4619      	mov	r1, r3
 8001640:	4b2d      	ldr	r3, [pc, #180]	; (80016f8 <Set_Motor_PID+0x15c>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	fb03 f301 	mul.w	r3, r3, r1
 8001648:	4413      	add	r3, r2
 800164a:	461a      	mov	r2, r3
 800164c:	4b2b      	ldr	r3, [pc, #172]	; (80016fc <Set_Motor_PID+0x160>)
 800164e:	601a      	str	r2, [r3, #0]
	PID_speed[1] = old_PID_speed[1] + Kp*error_speed[1];
 8001650:	4b28      	ldr	r3, [pc, #160]	; (80016f4 <Set_Motor_PID+0x158>)
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	4b26      	ldr	r3, [pc, #152]	; (80016f0 <Set_Motor_PID+0x154>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	4619      	mov	r1, r3
 800165a:	4b27      	ldr	r3, [pc, #156]	; (80016f8 <Set_Motor_PID+0x15c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	fb03 f301 	mul.w	r3, r3, r1
 8001662:	4413      	add	r3, r2
 8001664:	461a      	mov	r2, r3
 8001666:	4b25      	ldr	r3, [pc, #148]	; (80016fc <Set_Motor_PID+0x160>)
 8001668:	605a      	str	r2, [r3, #4]
	PID_speed[2] = old_PID_speed[2] + Kp*error_speed[2];
 800166a:	4b22      	ldr	r3, [pc, #136]	; (80016f4 <Set_Motor_PID+0x158>)
 800166c:	689a      	ldr	r2, [r3, #8]
 800166e:	4b20      	ldr	r3, [pc, #128]	; (80016f0 <Set_Motor_PID+0x154>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	4619      	mov	r1, r3
 8001674:	4b20      	ldr	r3, [pc, #128]	; (80016f8 <Set_Motor_PID+0x15c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	fb03 f301 	mul.w	r3, r3, r1
 800167c:	4413      	add	r3, r2
 800167e:	461a      	mov	r2, r3
 8001680:	4b1e      	ldr	r3, [pc, #120]	; (80016fc <Set_Motor_PID+0x160>)
 8001682:	609a      	str	r2, [r3, #8]
	PID_speed[3] = old_PID_speed[3] + Kp*error_speed[3];
 8001684:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <Set_Motor_PID+0x158>)
 8001686:	68da      	ldr	r2, [r3, #12]
 8001688:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <Set_Motor_PID+0x154>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	4619      	mov	r1, r3
 800168e:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <Set_Motor_PID+0x15c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	fb03 f301 	mul.w	r3, r3, r1
 8001696:	4413      	add	r3, r2
 8001698:	461a      	mov	r2, r3
 800169a:	4b18      	ldr	r3, [pc, #96]	; (80016fc <Set_Motor_PID+0x160>)
 800169c:	60da      	str	r2, [r3, #12]

	old_PID_speed[0] = PID_speed[0];
 800169e:	4b17      	ldr	r3, [pc, #92]	; (80016fc <Set_Motor_PID+0x160>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	461a      	mov	r2, r3
 80016a4:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <Set_Motor_PID+0x158>)
 80016a6:	601a      	str	r2, [r3, #0]
	old_PID_speed[1] = PID_speed[1];
 80016a8:	4b14      	ldr	r3, [pc, #80]	; (80016fc <Set_Motor_PID+0x160>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	461a      	mov	r2, r3
 80016ae:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <Set_Motor_PID+0x158>)
 80016b0:	605a      	str	r2, [r3, #4]
	old_PID_speed[2] = PID_speed[2];
 80016b2:	4b12      	ldr	r3, [pc, #72]	; (80016fc <Set_Motor_PID+0x160>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	461a      	mov	r2, r3
 80016b8:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <Set_Motor_PID+0x158>)
 80016ba:	609a      	str	r2, [r3, #8]
	old_PID_speed[3] = PID_speed[3];
 80016bc:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <Set_Motor_PID+0x160>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	461a      	mov	r2, r3
 80016c2:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <Set_Motor_PID+0x158>)
 80016c4:	60da      	str	r2, [r3, #12]

	//now, let's control motor PWM
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000610 	.word	0x20000610
 80016d4:	20000618 	.word	0x20000618
 80016d8:	20000614 	.word	0x20000614
 80016dc:	2000061c 	.word	0x2000061c
 80016e0:	2000060c 	.word	0x2000060c
 80016e4:	20000620 	.word	0x20000620
 80016e8:	2000060e 	.word	0x2000060e
 80016ec:	20000624 	.word	0x20000624
 80016f0:	20000628 	.word	0x20000628
 80016f4:	20000648 	.word	0x20000648
 80016f8:	20000004 	.word	0x20000004
 80016fc:	20000638 	.word	0x20000638

08001700 <Set_Motor_PWM>:
void Set_Motor_PWM(){
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
	//mind the order LF, RF, LB, RB
	//Set motor rotation direction first
	//LF
	if (PID_speed[0] > 0 || PID_speed[0] == 0){
 8001706:	4b69      	ldr	r3, [pc, #420]	; (80018ac <Set_Motor_PWM+0x1ac>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	dc03      	bgt.n	8001716 <Set_Motor_PWM+0x16>
 800170e:	4b67      	ldr	r3, [pc, #412]	; (80018ac <Set_Motor_PWM+0x1ac>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d10c      	bne.n	8001730 <Set_Motor_PWM+0x30>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, SET);
 8001716:	2201      	movs	r2, #1
 8001718:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800171c:	4864      	ldr	r0, [pc, #400]	; (80018b0 <Set_Motor_PWM+0x1b0>)
 800171e:	f001 ff95 	bl	800364c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, RESET);
 8001722:	2200      	movs	r2, #0
 8001724:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001728:	4861      	ldr	r0, [pc, #388]	; (80018b0 <Set_Motor_PWM+0x1b0>)
 800172a:	f001 ff8f 	bl	800364c <HAL_GPIO_WritePin>
 800172e:	e014      	b.n	800175a <Set_Motor_PWM+0x5a>
	}
	else if(PID_speed[0] < 0){
 8001730:	4b5e      	ldr	r3, [pc, #376]	; (80018ac <Set_Motor_PWM+0x1ac>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	da10      	bge.n	800175a <Set_Motor_PWM+0x5a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, RESET);
 8001738:	2200      	movs	r2, #0
 800173a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800173e:	485c      	ldr	r0, [pc, #368]	; (80018b0 <Set_Motor_PWM+0x1b0>)
 8001740:	f001 ff84 	bl	800364c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, SET);
 8001744:	2201      	movs	r2, #1
 8001746:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800174a:	4859      	ldr	r0, [pc, #356]	; (80018b0 <Set_Motor_PWM+0x1b0>)
 800174c:	f001 ff7e 	bl	800364c <HAL_GPIO_WritePin>
		PID_speed[0] *= -1;
 8001750:	4b56      	ldr	r3, [pc, #344]	; (80018ac <Set_Motor_PWM+0x1ac>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	425b      	negs	r3, r3
 8001756:	4a55      	ldr	r2, [pc, #340]	; (80018ac <Set_Motor_PWM+0x1ac>)
 8001758:	6013      	str	r3, [r2, #0]
	}

	//RF
	if (PID_speed[1] > 0 || PID_speed[1] == 0){
 800175a:	4b54      	ldr	r3, [pc, #336]	; (80018ac <Set_Motor_PWM+0x1ac>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	dc03      	bgt.n	800176a <Set_Motor_PWM+0x6a>
 8001762:	4b52      	ldr	r3, [pc, #328]	; (80018ac <Set_Motor_PWM+0x1ac>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d10c      	bne.n	8001784 <Set_Motor_PWM+0x84>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, SET);
 800176a:	2201      	movs	r2, #1
 800176c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001770:	484f      	ldr	r0, [pc, #316]	; (80018b0 <Set_Motor_PWM+0x1b0>)
 8001772:	f001 ff6b 	bl	800364c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, RESET);
 8001776:	2200      	movs	r2, #0
 8001778:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800177c:	484c      	ldr	r0, [pc, #304]	; (80018b0 <Set_Motor_PWM+0x1b0>)
 800177e:	f001 ff65 	bl	800364c <HAL_GPIO_WritePin>
 8001782:	e014      	b.n	80017ae <Set_Motor_PWM+0xae>
	}
	else if(PID_speed[1] < 0){
 8001784:	4b49      	ldr	r3, [pc, #292]	; (80018ac <Set_Motor_PWM+0x1ac>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	da10      	bge.n	80017ae <Set_Motor_PWM+0xae>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, RESET);
 800178c:	2200      	movs	r2, #0
 800178e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001792:	4847      	ldr	r0, [pc, #284]	; (80018b0 <Set_Motor_PWM+0x1b0>)
 8001794:	f001 ff5a 	bl	800364c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, SET);
 8001798:	2201      	movs	r2, #1
 800179a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800179e:	4844      	ldr	r0, [pc, #272]	; (80018b0 <Set_Motor_PWM+0x1b0>)
 80017a0:	f001 ff54 	bl	800364c <HAL_GPIO_WritePin>
		PID_speed[1] *= -1;
 80017a4:	4b41      	ldr	r3, [pc, #260]	; (80018ac <Set_Motor_PWM+0x1ac>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	425b      	negs	r3, r3
 80017aa:	4a40      	ldr	r2, [pc, #256]	; (80018ac <Set_Motor_PWM+0x1ac>)
 80017ac:	6053      	str	r3, [r2, #4]
	}

	//LB
	if (PID_speed[2] > 0 || PID_speed[2] == 0){
 80017ae:	4b3f      	ldr	r3, [pc, #252]	; (80018ac <Set_Motor_PWM+0x1ac>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	dc03      	bgt.n	80017be <Set_Motor_PWM+0xbe>
 80017b6:	4b3d      	ldr	r3, [pc, #244]	; (80018ac <Set_Motor_PWM+0x1ac>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d10c      	bne.n	80017d8 <Set_Motor_PWM+0xd8>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, SET);
 80017be:	2201      	movs	r2, #1
 80017c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017c4:	483b      	ldr	r0, [pc, #236]	; (80018b4 <Set_Motor_PWM+0x1b4>)
 80017c6:	f001 ff41 	bl	800364c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 80017ca:	2200      	movs	r2, #0
 80017cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017d0:	4838      	ldr	r0, [pc, #224]	; (80018b4 <Set_Motor_PWM+0x1b4>)
 80017d2:	f001 ff3b 	bl	800364c <HAL_GPIO_WritePin>
 80017d6:	e014      	b.n	8001802 <Set_Motor_PWM+0x102>
	}
	else if(PID_speed[2] < 0){
 80017d8:	4b34      	ldr	r3, [pc, #208]	; (80018ac <Set_Motor_PWM+0x1ac>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	da10      	bge.n	8001802 <Set_Motor_PWM+0x102>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
 80017e0:	2200      	movs	r2, #0
 80017e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017e6:	4833      	ldr	r0, [pc, #204]	; (80018b4 <Set_Motor_PWM+0x1b4>)
 80017e8:	f001 ff30 	bl	800364c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, SET);
 80017ec:	2201      	movs	r2, #1
 80017ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017f2:	4830      	ldr	r0, [pc, #192]	; (80018b4 <Set_Motor_PWM+0x1b4>)
 80017f4:	f001 ff2a 	bl	800364c <HAL_GPIO_WritePin>
		PID_speed[2] *= -1;
 80017f8:	4b2c      	ldr	r3, [pc, #176]	; (80018ac <Set_Motor_PWM+0x1ac>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	425b      	negs	r3, r3
 80017fe:	4a2b      	ldr	r2, [pc, #172]	; (80018ac <Set_Motor_PWM+0x1ac>)
 8001800:	6093      	str	r3, [r2, #8]
	}

	//RB
	if (PID_speed[3] > 0 || PID_speed[3] == 0){
 8001802:	4b2a      	ldr	r3, [pc, #168]	; (80018ac <Set_Motor_PWM+0x1ac>)
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	2b00      	cmp	r3, #0
 8001808:	dc03      	bgt.n	8001812 <Set_Motor_PWM+0x112>
 800180a:	4b28      	ldr	r3, [pc, #160]	; (80018ac <Set_Motor_PWM+0x1ac>)
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d10c      	bne.n	800182c <Set_Motor_PWM+0x12c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, SET);
 8001812:	2201      	movs	r2, #1
 8001814:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001818:	4826      	ldr	r0, [pc, #152]	; (80018b4 <Set_Motor_PWM+0x1b4>)
 800181a:	f001 ff17 	bl	800364c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, RESET);
 800181e:	2200      	movs	r2, #0
 8001820:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001824:	4823      	ldr	r0, [pc, #140]	; (80018b4 <Set_Motor_PWM+0x1b4>)
 8001826:	f001 ff11 	bl	800364c <HAL_GPIO_WritePin>
 800182a:	e014      	b.n	8001856 <Set_Motor_PWM+0x156>
	}
	else if(PID_speed[3] < 0){
 800182c:	4b1f      	ldr	r3, [pc, #124]	; (80018ac <Set_Motor_PWM+0x1ac>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	2b00      	cmp	r3, #0
 8001832:	da10      	bge.n	8001856 <Set_Motor_PWM+0x156>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 8001834:	2200      	movs	r2, #0
 8001836:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800183a:	481e      	ldr	r0, [pc, #120]	; (80018b4 <Set_Motor_PWM+0x1b4>)
 800183c:	f001 ff06 	bl	800364c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, SET);
 8001840:	2201      	movs	r2, #1
 8001842:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001846:	481b      	ldr	r0, [pc, #108]	; (80018b4 <Set_Motor_PWM+0x1b4>)
 8001848:	f001 ff00 	bl	800364c <HAL_GPIO_WritePin>
		PID_speed[3] *= -1;
 800184c:	4b17      	ldr	r3, [pc, #92]	; (80018ac <Set_Motor_PWM+0x1ac>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	425b      	negs	r3, r3
 8001852:	4a16      	ldr	r2, [pc, #88]	; (80018ac <Set_Motor_PWM+0x1ac>)
 8001854:	60d3      	str	r3, [r2, #12]
	}
	//For Safety, PID_speed won't go beyond 9,000
	uint8_t i = 0;
 8001856:	2300      	movs	r3, #0
 8001858:	71fb      	strb	r3, [r7, #7]
	while (i < 4){
 800185a:	e010      	b.n	800187e <Set_Motor_PWM+0x17e>
		if (PID_speed[i]>9000){
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	4a13      	ldr	r2, [pc, #76]	; (80018ac <Set_Motor_PWM+0x1ac>)
 8001860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001864:	f242 3228 	movw	r2, #9000	; 0x2328
 8001868:	4293      	cmp	r3, r2
 800186a:	dd05      	ble.n	8001878 <Set_Motor_PWM+0x178>
			PID_speed[i] = 9000;
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	4a0f      	ldr	r2, [pc, #60]	; (80018ac <Set_Motor_PWM+0x1ac>)
 8001870:	f242 3128 	movw	r1, #9000	; 0x2328
 8001874:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
		i++;
 8001878:	79fb      	ldrb	r3, [r7, #7]
 800187a:	3301      	adds	r3, #1
 800187c:	71fb      	strb	r3, [r7, #7]
	while (i < 4){
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	2b03      	cmp	r3, #3
 8001882:	d9eb      	bls.n	800185c <Set_Motor_PWM+0x15c>
	}
	//Set PWM value
	 TIM1->CCR1 = PID_speed[0];
 8001884:	4b09      	ldr	r3, [pc, #36]	; (80018ac <Set_Motor_PWM+0x1ac>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <Set_Motor_PWM+0x1b8>)
 800188a:	635a      	str	r2, [r3, #52]	; 0x34
	 TIM1->CCR2 = PID_speed[1];
 800188c:	4b07      	ldr	r3, [pc, #28]	; (80018ac <Set_Motor_PWM+0x1ac>)
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <Set_Motor_PWM+0x1b8>)
 8001892:	639a      	str	r2, [r3, #56]	; 0x38
	 TIM1->CCR3 = PID_speed[2];
 8001894:	4b05      	ldr	r3, [pc, #20]	; (80018ac <Set_Motor_PWM+0x1ac>)
 8001896:	689a      	ldr	r2, [r3, #8]
 8001898:	4b07      	ldr	r3, [pc, #28]	; (80018b8 <Set_Motor_PWM+0x1b8>)
 800189a:	63da      	str	r2, [r3, #60]	; 0x3c
	 TIM1->CCR4 = PID_speed[3];
 800189c:	4b03      	ldr	r3, [pc, #12]	; (80018ac <Set_Motor_PWM+0x1ac>)
 800189e:	68da      	ldr	r2, [r3, #12]
 80018a0:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <Set_Motor_PWM+0x1b8>)
 80018a2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80018a4:	bf00      	nop
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000638 	.word	0x20000638
 80018b0:	40020c00 	.word	0x40020c00
 80018b4:	40020400 	.word	0x40020400
 80018b8:	40010000 	.word	0x40010000
 80018bc:	00000000 	.word	0x00000000

080018c0 <Calculate_Value>:
uint32_t Calculate_Value(uint32_t val){
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
	return 164.18 * exp(0.0112 * val);
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f7fe fe1b 	bl	8000504 <__aeabi_ui2d>
 80018ce:	a310      	add	r3, pc, #64	; (adr r3, 8001910 <Calculate_Value+0x50>)
 80018d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d4:	f7fe fe90 	bl	80005f8 <__aeabi_dmul>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	ec43 2b17 	vmov	d7, r2, r3
 80018e0:	eeb0 0a47 	vmov.f32	s0, s14
 80018e4:	eef0 0a67 	vmov.f32	s1, s15
 80018e8:	f007 fcb2 	bl	8009250 <exp>
 80018ec:	ec51 0b10 	vmov	r0, r1, d0
 80018f0:	a309      	add	r3, pc, #36	; (adr r3, 8001918 <Calculate_Value+0x58>)
 80018f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f6:	f7fe fe7f 	bl	80005f8 <__aeabi_dmul>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	4610      	mov	r0, r2
 8001900:	4619      	mov	r1, r3
 8001902:	f7ff f951 	bl	8000ba8 <__aeabi_d2uiz>
 8001906:	4603      	mov	r3, r0
}
 8001908:	4618      	mov	r0, r3
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	8db8bac7 	.word	0x8db8bac7
 8001914:	3f86f006 	.word	0x3f86f006
 8001918:	8f5c28f6 	.word	0x8f5c28f6
 800191c:	406485c2 	.word	0x406485c2

08001920 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]

}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800194c:	b672      	cpsid	i
}
 800194e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001950:	e7fe      	b.n	8001950 <Error_Handler+0x8>
	...

08001954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	607b      	str	r3, [r7, #4]
 800195e:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <HAL_MspInit+0x4c>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	4a0f      	ldr	r2, [pc, #60]	; (80019a0 <HAL_MspInit+0x4c>)
 8001964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001968:	6453      	str	r3, [r2, #68]	; 0x44
 800196a:	4b0d      	ldr	r3, [pc, #52]	; (80019a0 <HAL_MspInit+0x4c>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001972:	607b      	str	r3, [r7, #4]
 8001974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	603b      	str	r3, [r7, #0]
 800197a:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <HAL_MspInit+0x4c>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	4a08      	ldr	r2, [pc, #32]	; (80019a0 <HAL_MspInit+0x4c>)
 8001980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001984:	6413      	str	r3, [r2, #64]	; 0x40
 8001986:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <HAL_MspInit+0x4c>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198e:	603b      	str	r3, [r7, #0]
 8001990:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001992:	2007      	movs	r0, #7
 8001994:	f001 f87a 	bl	8002a8c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001998:	bf00      	nop
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40023800 	.word	0x40023800

080019a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <NMI_Handler+0x4>

080019aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ae:	e7fe      	b.n	80019ae <HardFault_Handler+0x4>

080019b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b4:	e7fe      	b.n	80019b4 <MemManage_Handler+0x4>

080019b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ba:	e7fe      	b.n	80019ba <BusFault_Handler+0x4>

080019bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c0:	e7fe      	b.n	80019c0 <UsageFault_Handler+0x4>

080019c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019f0:	f000 ff38 	bl	8002864 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019f4:	bf00      	nop
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80019fc:	4802      	ldr	r0, [pc, #8]	; (8001a08 <DMA1_Stream1_IRQHandler+0x10>)
 80019fe:	f001 fa1f 	bl	8002e40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	200008c8 	.word	0x200008c8

08001a0c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001a10:	4802      	ldr	r0, [pc, #8]	; (8001a1c <DMA1_Stream3_IRQHandler+0x10>)
 8001a12:	f001 fa15 	bl	8002e40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	2000096c 	.word	0x2000096c

08001a20 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a24:	4802      	ldr	r0, [pc, #8]	; (8001a30 <USART3_IRQHandler+0x10>)
 8001a26:	f003 fe1f 	bl	8005668 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000928 	.word	0x20000928

08001a34 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a38:	4802      	ldr	r0, [pc, #8]	; (8001a44 <TIM6_DAC_IRQHandler+0x10>)
 8001a3a:	f002 fe7d 	bl	8004738 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000790 	.word	0x20000790

08001a48 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001a4c:	4802      	ldr	r0, [pc, #8]	; (8001a58 <DMA2_Stream1_IRQHandler+0x10>)
 8001a4e:	f001 f9f7 	bl	8002e40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20000868 	.word	0x20000868

08001a5c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001a60:	4802      	ldr	r0, [pc, #8]	; (8001a6c <DMA2_Stream6_IRQHandler+0x10>)
 8001a62:	f001 f9ed 	bl	8002e40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	200009cc 	.word	0x200009cc

08001a70 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001a74:	4802      	ldr	r0, [pc, #8]	; (8001a80 <USART6_IRQHandler+0x10>)
 8001a76:	f003 fdf7 	bl	8005668 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000a2c 	.word	0x20000a2c

08001a84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
	return 1;
 8001a88:	2301      	movs	r3, #1
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <_kill>:

int _kill(int pid, int sig)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a9e:	f004 fc27 	bl	80062f0 <__errno>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2216      	movs	r2, #22
 8001aa6:	601a      	str	r2, [r3, #0]
	return -1;
 8001aa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <_exit>:

void _exit (int status)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001abc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f7ff ffe7 	bl	8001a94 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ac6:	e7fe      	b.n	8001ac6 <_exit+0x12>

08001ac8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]
 8001ad8:	e00a      	b.n	8001af0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ada:	f3af 8000 	nop.w
 8001ade:	4601      	mov	r1, r0
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	1c5a      	adds	r2, r3, #1
 8001ae4:	60ba      	str	r2, [r7, #8]
 8001ae6:	b2ca      	uxtb	r2, r1
 8001ae8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	3301      	adds	r3, #1
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	dbf0      	blt.n	8001ada <_read+0x12>
	}

return len;
 8001af8:	687b      	ldr	r3, [r7, #4]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b086      	sub	sp, #24
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	60f8      	str	r0, [r7, #12]
 8001b0a:	60b9      	str	r1, [r7, #8]
 8001b0c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b0e:	2300      	movs	r3, #0
 8001b10:	617b      	str	r3, [r7, #20]
 8001b12:	e009      	b.n	8001b28 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	1c5a      	adds	r2, r3, #1
 8001b18:	60ba      	str	r2, [r7, #8]
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	3301      	adds	r3, #1
 8001b26:	617b      	str	r3, [r7, #20]
 8001b28:	697a      	ldr	r2, [r7, #20]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	dbf1      	blt.n	8001b14 <_write+0x12>
	}
	return len;
 8001b30:	687b      	ldr	r3, [r7, #4]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <_close>:

int _close(int file)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
	return -1;
 8001b42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
 8001b5a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b62:	605a      	str	r2, [r3, #4]
	return 0;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <_isatty>:

int _isatty(int file)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
	return 1;
 8001b7a:	2301      	movs	r3, #1
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
	return 0;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
	...

08001ba4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bac:	4a14      	ldr	r2, [pc, #80]	; (8001c00 <_sbrk+0x5c>)
 8001bae:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <_sbrk+0x60>)
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bb8:	4b13      	ldr	r3, [pc, #76]	; (8001c08 <_sbrk+0x64>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d102      	bne.n	8001bc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bc0:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <_sbrk+0x64>)
 8001bc2:	4a12      	ldr	r2, [pc, #72]	; (8001c0c <_sbrk+0x68>)
 8001bc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bc6:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <_sbrk+0x64>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4413      	add	r3, r2
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d207      	bcs.n	8001be4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bd4:	f004 fb8c 	bl	80062f0 <__errno>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	220c      	movs	r2, #12
 8001bdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001be2:	e009      	b.n	8001bf8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001be4:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <_sbrk+0x64>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bea:	4b07      	ldr	r3, [pc, #28]	; (8001c08 <_sbrk+0x64>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	4a05      	ldr	r2, [pc, #20]	; (8001c08 <_sbrk+0x64>)
 8001bf4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3718      	adds	r7, #24
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20020000 	.word	0x20020000
 8001c04:	00000400 	.word	0x00000400
 8001c08:	20000658 	.word	0x20000658
 8001c0c:	20000a88 	.word	0x20000a88

08001c10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c14:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <SystemInit+0x20>)
 8001c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c1a:	4a05      	ldr	r2, [pc, #20]	; (8001c30 <SystemInit+0x20>)
 8001c1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b096      	sub	sp, #88	; 0x58
 8001c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	605a      	str	r2, [r3, #4]
 8001c44:	609a      	str	r2, [r3, #8]
 8001c46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c48:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	605a      	str	r2, [r3, #4]
 8001c5c:	609a      	str	r2, [r3, #8]
 8001c5e:	60da      	str	r2, [r3, #12]
 8001c60:	611a      	str	r2, [r3, #16]
 8001c62:	615a      	str	r2, [r3, #20]
 8001c64:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c66:	1d3b      	adds	r3, r7, #4
 8001c68:	2220      	movs	r2, #32
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f004 fb69 	bl	8006344 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c72:	4b50      	ldr	r3, [pc, #320]	; (8001db4 <MX_TIM1_Init+0x180>)
 8001c74:	4a50      	ldr	r2, [pc, #320]	; (8001db8 <MX_TIM1_Init+0x184>)
 8001c76:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 8001c78:	4b4e      	ldr	r3, [pc, #312]	; (8001db4 <MX_TIM1_Init+0x180>)
 8001c7a:	22a7      	movs	r2, #167	; 0xa7
 8001c7c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c7e:	4b4d      	ldr	r3, [pc, #308]	; (8001db4 <MX_TIM1_Init+0x180>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8001c84:	4b4b      	ldr	r3, [pc, #300]	; (8001db4 <MX_TIM1_Init+0x180>)
 8001c86:	f242 720f 	movw	r2, #9999	; 0x270f
 8001c8a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c8c:	4b49      	ldr	r3, [pc, #292]	; (8001db4 <MX_TIM1_Init+0x180>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c92:	4b48      	ldr	r3, [pc, #288]	; (8001db4 <MX_TIM1_Init+0x180>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c98:	4b46      	ldr	r3, [pc, #280]	; (8001db4 <MX_TIM1_Init+0x180>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c9e:	4845      	ldr	r0, [pc, #276]	; (8001db4 <MX_TIM1_Init+0x180>)
 8001ca0:	f002 faa6 	bl	80041f0 <HAL_TIM_Base_Init>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001caa:	f7ff fe4d 	bl	8001948 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cb2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001cb4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001cb8:	4619      	mov	r1, r3
 8001cba:	483e      	ldr	r0, [pc, #248]	; (8001db4 <MX_TIM1_Init+0x180>)
 8001cbc:	f002 ff02 	bl	8004ac4 <HAL_TIM_ConfigClockSource>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001cc6:	f7ff fe3f 	bl	8001948 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001cca:	483a      	ldr	r0, [pc, #232]	; (8001db4 <MX_TIM1_Init+0x180>)
 8001ccc:	f002 fadf 	bl	800428e <HAL_TIM_PWM_Init>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001cd6:	f7ff fe37 	bl	8001948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ce2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4832      	ldr	r0, [pc, #200]	; (8001db4 <MX_TIM1_Init+0x180>)
 8001cea:	f003 faf1 	bl	80052d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001cf4:	f7ff fe28 	bl	8001948 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cf8:	2360      	movs	r3, #96	; 0x60
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d00:	2300      	movs	r3, #0
 8001d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d04:	2300      	movs	r3, #0
 8001d06:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d10:	2300      	movs	r3, #0
 8001d12:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d18:	2200      	movs	r2, #0
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4825      	ldr	r0, [pc, #148]	; (8001db4 <MX_TIM1_Init+0x180>)
 8001d1e:	f002 fe13 	bl	8004948 <HAL_TIM_PWM_ConfigChannel>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001d28:	f7ff fe0e 	bl	8001948 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d30:	2204      	movs	r2, #4
 8001d32:	4619      	mov	r1, r3
 8001d34:	481f      	ldr	r0, [pc, #124]	; (8001db4 <MX_TIM1_Init+0x180>)
 8001d36:	f002 fe07 	bl	8004948 <HAL_TIM_PWM_ConfigChannel>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001d40:	f7ff fe02 	bl	8001948 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d48:	2208      	movs	r2, #8
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4819      	ldr	r0, [pc, #100]	; (8001db4 <MX_TIM1_Init+0x180>)
 8001d4e:	f002 fdfb 	bl	8004948 <HAL_TIM_PWM_ConfigChannel>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001d58:	f7ff fdf6 	bl	8001948 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d60:	220c      	movs	r2, #12
 8001d62:	4619      	mov	r1, r3
 8001d64:	4813      	ldr	r0, [pc, #76]	; (8001db4 <MX_TIM1_Init+0x180>)
 8001d66:	f002 fdef 	bl	8004948 <HAL_TIM_PWM_ConfigChannel>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001d70:	f7ff fdea 	bl	8001948 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d74:	2300      	movs	r3, #0
 8001d76:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d80:	2300      	movs	r3, #0
 8001d82:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d8c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d92:	1d3b      	adds	r3, r7, #4
 8001d94:	4619      	mov	r1, r3
 8001d96:	4807      	ldr	r0, [pc, #28]	; (8001db4 <MX_TIM1_Init+0x180>)
 8001d98:	f003 fb16 	bl	80053c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8001da2:	f7ff fdd1 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001da6:	4803      	ldr	r0, [pc, #12]	; (8001db4 <MX_TIM1_Init+0x180>)
 8001da8:	f000 fad0 	bl	800234c <HAL_TIM_MspPostInit>

}
 8001dac:	bf00      	nop
 8001dae:	3758      	adds	r7, #88	; 0x58
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	200007d8 	.word	0x200007d8
 8001db8:	40010000 	.word	0x40010000

08001dbc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08c      	sub	sp, #48	; 0x30
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001dc2:	f107 030c 	add.w	r3, r7, #12
 8001dc6:	2224      	movs	r2, #36	; 0x24
 8001dc8:	2100      	movs	r1, #0
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f004 faba 	bl	8006344 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd0:	1d3b      	adds	r3, r7, #4
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001dd8:	4b21      	ldr	r3, [pc, #132]	; (8001e60 <MX_TIM2_Init+0xa4>)
 8001dda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dde:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001de0:	4b1f      	ldr	r3, [pc, #124]	; (8001e60 <MX_TIM2_Init+0xa4>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de6:	4b1e      	ldr	r3, [pc, #120]	; (8001e60 <MX_TIM2_Init+0xa4>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001dec:	4b1c      	ldr	r3, [pc, #112]	; (8001e60 <MX_TIM2_Init+0xa4>)
 8001dee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001df2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001df4:	4b1a      	ldr	r3, [pc, #104]	; (8001e60 <MX_TIM2_Init+0xa4>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001dfa:	4b19      	ldr	r3, [pc, #100]	; (8001e60 <MX_TIM2_Init+0xa4>)
 8001dfc:	2280      	movs	r2, #128	; 0x80
 8001dfe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e00:	2303      	movs	r3, #3
 8001e02:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e04:	2300      	movs	r3, #0
 8001e06:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001e10:	230a      	movs	r3, #10
 8001e12:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e14:	2300      	movs	r3, #0
 8001e16:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001e20:	230a      	movs	r3, #10
 8001e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001e24:	f107 030c 	add.w	r3, r7, #12
 8001e28:	4619      	mov	r1, r3
 8001e2a:	480d      	ldr	r0, [pc, #52]	; (8001e60 <MX_TIM2_Init+0xa4>)
 8001e2c:	f002 fb50 	bl	80044d0 <HAL_TIM_Encoder_Init>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001e36:	f7ff fd87 	bl	8001948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e42:	1d3b      	adds	r3, r7, #4
 8001e44:	4619      	mov	r1, r3
 8001e46:	4806      	ldr	r0, [pc, #24]	; (8001e60 <MX_TIM2_Init+0xa4>)
 8001e48:	f003 fa42 	bl	80052d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001e52:	f7ff fd79 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e56:	bf00      	nop
 8001e58:	3730      	adds	r7, #48	; 0x30
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000820 	.word	0x20000820

08001e64 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08c      	sub	sp, #48	; 0x30
 8001e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e6a:	f107 030c 	add.w	r3, r7, #12
 8001e6e:	2224      	movs	r2, #36	; 0x24
 8001e70:	2100      	movs	r1, #0
 8001e72:	4618      	mov	r0, r3
 8001e74:	f004 fa66 	bl	8006344 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e78:	1d3b      	adds	r3, r7, #4
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e80:	4b20      	ldr	r3, [pc, #128]	; (8001f04 <MX_TIM3_Init+0xa0>)
 8001e82:	4a21      	ldr	r2, [pc, #132]	; (8001f08 <MX_TIM3_Init+0xa4>)
 8001e84:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001e86:	4b1f      	ldr	r3, [pc, #124]	; (8001f04 <MX_TIM3_Init+0xa0>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e8c:	4b1d      	ldr	r3, [pc, #116]	; (8001f04 <MX_TIM3_Init+0xa0>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001e92:	4b1c      	ldr	r3, [pc, #112]	; (8001f04 <MX_TIM3_Init+0xa0>)
 8001e94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e98:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e9a:	4b1a      	ldr	r3, [pc, #104]	; (8001f04 <MX_TIM3_Init+0xa0>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ea0:	4b18      	ldr	r3, [pc, #96]	; (8001f04 <MX_TIM3_Init+0xa0>)
 8001ea2:	2280      	movs	r2, #128	; 0x80
 8001ea4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001eb6:	230a      	movs	r3, #10
 8001eb8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001ec6:	230a      	movs	r3, #10
 8001ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001eca:	f107 030c 	add.w	r3, r7, #12
 8001ece:	4619      	mov	r1, r3
 8001ed0:	480c      	ldr	r0, [pc, #48]	; (8001f04 <MX_TIM3_Init+0xa0>)
 8001ed2:	f002 fafd 	bl	80044d0 <HAL_TIM_Encoder_Init>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001edc:	f7ff fd34 	bl	8001948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ee8:	1d3b      	adds	r3, r7, #4
 8001eea:	4619      	mov	r1, r3
 8001eec:	4805      	ldr	r0, [pc, #20]	; (8001f04 <MX_TIM3_Init+0xa0>)
 8001eee:	f003 f9ef 	bl	80052d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001ef8:	f7ff fd26 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001efc:	bf00      	nop
 8001efe:	3730      	adds	r7, #48	; 0x30
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	20000748 	.word	0x20000748
 8001f08:	40000400 	.word	0x40000400

08001f0c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b08c      	sub	sp, #48	; 0x30
 8001f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f12:	f107 030c 	add.w	r3, r7, #12
 8001f16:	2224      	movs	r2, #36	; 0x24
 8001f18:	2100      	movs	r1, #0
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f004 fa12 	bl	8006344 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f20:	1d3b      	adds	r3, r7, #4
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f28:	4b20      	ldr	r3, [pc, #128]	; (8001fac <MX_TIM4_Init+0xa0>)
 8001f2a:	4a21      	ldr	r2, [pc, #132]	; (8001fb0 <MX_TIM4_Init+0xa4>)
 8001f2c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001f2e:	4b1f      	ldr	r3, [pc, #124]	; (8001fac <MX_TIM4_Init+0xa0>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f34:	4b1d      	ldr	r3, [pc, #116]	; (8001fac <MX_TIM4_Init+0xa0>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001f3a:	4b1c      	ldr	r3, [pc, #112]	; (8001fac <MX_TIM4_Init+0xa0>)
 8001f3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f40:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f42:	4b1a      	ldr	r3, [pc, #104]	; (8001fac <MX_TIM4_Init+0xa0>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f48:	4b18      	ldr	r3, [pc, #96]	; (8001fac <MX_TIM4_Init+0xa0>)
 8001f4a:	2280      	movs	r2, #128	; 0x80
 8001f4c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f52:	2300      	movs	r3, #0
 8001f54:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f56:	2301      	movs	r3, #1
 8001f58:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001f5e:	230a      	movs	r3, #10
 8001f60:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f62:	2300      	movs	r3, #0
 8001f64:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f66:	2301      	movs	r3, #1
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001f6e:	230a      	movs	r3, #10
 8001f70:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001f72:	f107 030c 	add.w	r3, r7, #12
 8001f76:	4619      	mov	r1, r3
 8001f78:	480c      	ldr	r0, [pc, #48]	; (8001fac <MX_TIM4_Init+0xa0>)
 8001f7a:	f002 faa9 	bl	80044d0 <HAL_TIM_Encoder_Init>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001f84:	f7ff fce0 	bl	8001948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f90:	1d3b      	adds	r3, r7, #4
 8001f92:	4619      	mov	r1, r3
 8001f94:	4805      	ldr	r0, [pc, #20]	; (8001fac <MX_TIM4_Init+0xa0>)
 8001f96:	f003 f99b 	bl	80052d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001fa0:	f7ff fcd2 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001fa4:	bf00      	nop
 8001fa6:	3730      	adds	r7, #48	; 0x30
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	200006b8 	.word	0x200006b8
 8001fb0:	40000800 	.word	0x40000800

08001fb4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08c      	sub	sp, #48	; 0x30
 8001fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fba:	f107 030c 	add.w	r3, r7, #12
 8001fbe:	2224      	movs	r2, #36	; 0x24
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f004 f9be 	bl	8006344 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fc8:	1d3b      	adds	r3, r7, #4
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001fd0:	4b20      	ldr	r3, [pc, #128]	; (8002054 <MX_TIM5_Init+0xa0>)
 8001fd2:	4a21      	ldr	r2, [pc, #132]	; (8002058 <MX_TIM5_Init+0xa4>)
 8001fd4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001fd6:	4b1f      	ldr	r3, [pc, #124]	; (8002054 <MX_TIM5_Init+0xa0>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fdc:	4b1d      	ldr	r3, [pc, #116]	; (8002054 <MX_TIM5_Init+0xa0>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001fe2:	4b1c      	ldr	r3, [pc, #112]	; (8002054 <MX_TIM5_Init+0xa0>)
 8001fe4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fe8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fea:	4b1a      	ldr	r3, [pc, #104]	; (8002054 <MX_TIM5_Init+0xa0>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ff0:	4b18      	ldr	r3, [pc, #96]	; (8002054 <MX_TIM5_Init+0xa0>)
 8001ff2:	2280      	movs	r2, #128	; 0x80
 8001ff4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ffe:	2301      	movs	r3, #1
 8002000:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002002:	2300      	movs	r3, #0
 8002004:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002006:	230a      	movs	r3, #10
 8002008:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800200a:	2300      	movs	r3, #0
 800200c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800200e:	2301      	movs	r3, #1
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002012:	2300      	movs	r3, #0
 8002014:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8002016:	230a      	movs	r3, #10
 8002018:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800201a:	f107 030c 	add.w	r3, r7, #12
 800201e:	4619      	mov	r1, r3
 8002020:	480c      	ldr	r0, [pc, #48]	; (8002054 <MX_TIM5_Init+0xa0>)
 8002022:	f002 fa55 	bl	80044d0 <HAL_TIM_Encoder_Init>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 800202c:	f7ff fc8c 	bl	8001948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002030:	2300      	movs	r3, #0
 8002032:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002034:	2300      	movs	r3, #0
 8002036:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002038:	1d3b      	adds	r3, r7, #4
 800203a:	4619      	mov	r1, r3
 800203c:	4805      	ldr	r0, [pc, #20]	; (8002054 <MX_TIM5_Init+0xa0>)
 800203e:	f003 f947 	bl	80052d0 <HAL_TIMEx_MasterConfigSynchronization>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8002048:	f7ff fc7e 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800204c:	bf00      	nop
 800204e:	3730      	adds	r7, #48	; 0x30
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20000700 	.word	0x20000700
 8002058:	40000c00 	.word	0x40000c00

0800205c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002062:	463b      	mov	r3, r7
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800206a:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <MX_TIM6_Init+0x64>)
 800206c:	4a15      	ldr	r2, [pc, #84]	; (80020c4 <MX_TIM6_Init+0x68>)
 800206e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16799;
 8002070:	4b13      	ldr	r3, [pc, #76]	; (80020c0 <MX_TIM6_Init+0x64>)
 8002072:	f244 129f 	movw	r2, #16799	; 0x419f
 8002076:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002078:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <MX_TIM6_Init+0x64>)
 800207a:	2200      	movs	r2, #0
 800207c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 800207e:	4b10      	ldr	r3, [pc, #64]	; (80020c0 <MX_TIM6_Init+0x64>)
 8002080:	f242 720f 	movw	r2, #9999	; 0x270f
 8002084:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002086:	4b0e      	ldr	r3, [pc, #56]	; (80020c0 <MX_TIM6_Init+0x64>)
 8002088:	2200      	movs	r2, #0
 800208a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800208c:	480c      	ldr	r0, [pc, #48]	; (80020c0 <MX_TIM6_Init+0x64>)
 800208e:	f002 f8af 	bl	80041f0 <HAL_TIM_Base_Init>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002098:	f7ff fc56 	bl	8001948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800209c:	2300      	movs	r3, #0
 800209e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020a0:	2300      	movs	r3, #0
 80020a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80020a4:	463b      	mov	r3, r7
 80020a6:	4619      	mov	r1, r3
 80020a8:	4805      	ldr	r0, [pc, #20]	; (80020c0 <MX_TIM6_Init+0x64>)
 80020aa:	f003 f911 	bl	80052d0 <HAL_TIMEx_MasterConfigSynchronization>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80020b4:	f7ff fc48 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80020b8:	bf00      	nop
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	20000790 	.word	0x20000790
 80020c4:	40001000 	.word	0x40001000

080020c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a18      	ldr	r2, [pc, #96]	; (8002138 <HAL_TIM_Base_MspInit+0x70>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d10e      	bne.n	80020f8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	4b17      	ldr	r3, [pc, #92]	; (800213c <HAL_TIM_Base_MspInit+0x74>)
 80020e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e2:	4a16      	ldr	r2, [pc, #88]	; (800213c <HAL_TIM_Base_MspInit+0x74>)
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	6453      	str	r3, [r2, #68]	; 0x44
 80020ea:	4b14      	ldr	r3, [pc, #80]	; (800213c <HAL_TIM_Base_MspInit+0x74>)
 80020ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80020f6:	e01a      	b.n	800212e <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM6)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a10      	ldr	r2, [pc, #64]	; (8002140 <HAL_TIM_Base_MspInit+0x78>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d115      	bne.n	800212e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	60bb      	str	r3, [r7, #8]
 8002106:	4b0d      	ldr	r3, [pc, #52]	; (800213c <HAL_TIM_Base_MspInit+0x74>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	4a0c      	ldr	r2, [pc, #48]	; (800213c <HAL_TIM_Base_MspInit+0x74>)
 800210c:	f043 0310 	orr.w	r3, r3, #16
 8002110:	6413      	str	r3, [r2, #64]	; 0x40
 8002112:	4b0a      	ldr	r3, [pc, #40]	; (800213c <HAL_TIM_Base_MspInit+0x74>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	f003 0310 	and.w	r3, r3, #16
 800211a:	60bb      	str	r3, [r7, #8]
 800211c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800211e:	2200      	movs	r2, #0
 8002120:	2100      	movs	r1, #0
 8002122:	2036      	movs	r0, #54	; 0x36
 8002124:	f000 fcbd 	bl	8002aa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002128:	2036      	movs	r0, #54	; 0x36
 800212a:	f000 fcd6 	bl	8002ada <HAL_NVIC_EnableIRQ>
}
 800212e:	bf00      	nop
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40010000 	.word	0x40010000
 800213c:	40023800 	.word	0x40023800
 8002140:	40001000 	.word	0x40001000

08002144 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b090      	sub	sp, #64	; 0x40
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800214c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	605a      	str	r2, [r3, #4]
 8002156:	609a      	str	r2, [r3, #8]
 8002158:	60da      	str	r2, [r3, #12]
 800215a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002164:	d14a      	bne.n	80021fc <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	62bb      	str	r3, [r7, #40]	; 0x28
 800216a:	4b71      	ldr	r3, [pc, #452]	; (8002330 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	4a70      	ldr	r2, [pc, #448]	; (8002330 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002170:	f043 0301 	orr.w	r3, r3, #1
 8002174:	6413      	str	r3, [r2, #64]	; 0x40
 8002176:	4b6e      	ldr	r3, [pc, #440]	; (8002330 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002180:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	627b      	str	r3, [r7, #36]	; 0x24
 8002186:	4b6a      	ldr	r3, [pc, #424]	; (8002330 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	4a69      	ldr	r2, [pc, #420]	; (8002330 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	6313      	str	r3, [r2, #48]	; 0x30
 8002192:	4b67      	ldr	r3, [pc, #412]	; (8002330 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	627b      	str	r3, [r7, #36]	; 0x24
 800219c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	623b      	str	r3, [r7, #32]
 80021a2:	4b63      	ldr	r3, [pc, #396]	; (8002330 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	4a62      	ldr	r2, [pc, #392]	; (8002330 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80021a8:	f043 0302 	orr.w	r3, r3, #2
 80021ac:	6313      	str	r3, [r2, #48]	; 0x30
 80021ae:	4b60      	ldr	r3, [pc, #384]	; (8002330 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	623b      	str	r3, [r7, #32]
 80021b8:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80021ba:	2320      	movs	r3, #32
 80021bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021be:	2302      	movs	r3, #2
 80021c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c6:	2300      	movs	r3, #0
 80021c8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021ca:	2301      	movs	r3, #1
 80021cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021d2:	4619      	mov	r1, r3
 80021d4:	4857      	ldr	r0, [pc, #348]	; (8002334 <HAL_TIM_Encoder_MspInit+0x1f0>)
 80021d6:	f001 f89d 	bl	8003314 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80021da:	2308      	movs	r3, #8
 80021dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021de:	2302      	movs	r3, #2
 80021e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e2:	2300      	movs	r3, #0
 80021e4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e6:	2300      	movs	r3, #0
 80021e8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021ea:	2301      	movs	r3, #1
 80021ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021f2:	4619      	mov	r1, r3
 80021f4:	4850      	ldr	r0, [pc, #320]	; (8002338 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80021f6:	f001 f88d 	bl	8003314 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80021fa:	e095      	b.n	8002328 <HAL_TIM_Encoder_MspInit+0x1e4>
  else if(tim_encoderHandle->Instance==TIM3)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a4e      	ldr	r2, [pc, #312]	; (800233c <HAL_TIM_Encoder_MspInit+0x1f8>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d12c      	bne.n	8002260 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	61fb      	str	r3, [r7, #28]
 800220a:	4b49      	ldr	r3, [pc, #292]	; (8002330 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	4a48      	ldr	r2, [pc, #288]	; (8002330 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002210:	f043 0302 	orr.w	r3, r3, #2
 8002214:	6413      	str	r3, [r2, #64]	; 0x40
 8002216:	4b46      	ldr	r3, [pc, #280]	; (8002330 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	61fb      	str	r3, [r7, #28]
 8002220:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	61bb      	str	r3, [r7, #24]
 8002226:	4b42      	ldr	r3, [pc, #264]	; (8002330 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	4a41      	ldr	r2, [pc, #260]	; (8002330 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800222c:	f043 0301 	orr.w	r3, r3, #1
 8002230:	6313      	str	r3, [r2, #48]	; 0x30
 8002232:	4b3f      	ldr	r3, [pc, #252]	; (8002330 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	61bb      	str	r3, [r7, #24]
 800223c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800223e:	23c0      	movs	r3, #192	; 0xc0
 8002240:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002242:	2302      	movs	r3, #2
 8002244:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002246:	2300      	movs	r3, #0
 8002248:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224a:	2300      	movs	r3, #0
 800224c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800224e:	2302      	movs	r3, #2
 8002250:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002252:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002256:	4619      	mov	r1, r3
 8002258:	4836      	ldr	r0, [pc, #216]	; (8002334 <HAL_TIM_Encoder_MspInit+0x1f0>)
 800225a:	f001 f85b 	bl	8003314 <HAL_GPIO_Init>
}
 800225e:	e063      	b.n	8002328 <HAL_TIM_Encoder_MspInit+0x1e4>
  else if(tim_encoderHandle->Instance==TIM4)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a36      	ldr	r2, [pc, #216]	; (8002340 <HAL_TIM_Encoder_MspInit+0x1fc>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d12d      	bne.n	80022c6 <HAL_TIM_Encoder_MspInit+0x182>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]
 800226e:	4b30      	ldr	r3, [pc, #192]	; (8002330 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	4a2f      	ldr	r2, [pc, #188]	; (8002330 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002274:	f043 0304 	orr.w	r3, r3, #4
 8002278:	6413      	str	r3, [r2, #64]	; 0x40
 800227a:	4b2d      	ldr	r3, [pc, #180]	; (8002330 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	f003 0304 	and.w	r3, r3, #4
 8002282:	617b      	str	r3, [r7, #20]
 8002284:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	613b      	str	r3, [r7, #16]
 800228a:	4b29      	ldr	r3, [pc, #164]	; (8002330 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	4a28      	ldr	r2, [pc, #160]	; (8002330 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002290:	f043 0308 	orr.w	r3, r3, #8
 8002294:	6313      	str	r3, [r2, #48]	; 0x30
 8002296:	4b26      	ldr	r3, [pc, #152]	; (8002330 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	f003 0308 	and.w	r3, r3, #8
 800229e:	613b      	str	r3, [r7, #16]
 80022a0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80022a2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80022a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a8:	2302      	movs	r3, #2
 80022aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ac:	2300      	movs	r3, #0
 80022ae:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b0:	2300      	movs	r3, #0
 80022b2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80022b4:	2302      	movs	r3, #2
 80022b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022bc:	4619      	mov	r1, r3
 80022be:	4821      	ldr	r0, [pc, #132]	; (8002344 <HAL_TIM_Encoder_MspInit+0x200>)
 80022c0:	f001 f828 	bl	8003314 <HAL_GPIO_Init>
}
 80022c4:	e030      	b.n	8002328 <HAL_TIM_Encoder_MspInit+0x1e4>
  else if(tim_encoderHandle->Instance==TIM5)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a1f      	ldr	r2, [pc, #124]	; (8002348 <HAL_TIM_Encoder_MspInit+0x204>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d12b      	bne.n	8002328 <HAL_TIM_Encoder_MspInit+0x1e4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80022d0:	2300      	movs	r3, #0
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	4b16      	ldr	r3, [pc, #88]	; (8002330 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80022d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d8:	4a15      	ldr	r2, [pc, #84]	; (8002330 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80022da:	f043 0308 	orr.w	r3, r3, #8
 80022de:	6413      	str	r3, [r2, #64]	; 0x40
 80022e0:	4b13      	ldr	r3, [pc, #76]	; (8002330 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80022e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e4:	f003 0308 	and.w	r3, r3, #8
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ec:	2300      	movs	r3, #0
 80022ee:	60bb      	str	r3, [r7, #8]
 80022f0:	4b0f      	ldr	r3, [pc, #60]	; (8002330 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80022f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f4:	4a0e      	ldr	r2, [pc, #56]	; (8002330 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80022f6:	f043 0301 	orr.w	r3, r3, #1
 80022fa:	6313      	str	r3, [r2, #48]	; 0x30
 80022fc:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80022fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	60bb      	str	r3, [r7, #8]
 8002306:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002308:	2303      	movs	r3, #3
 800230a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230c:	2302      	movs	r3, #2
 800230e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002310:	2300      	movs	r3, #0
 8002312:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002314:	2300      	movs	r3, #0
 8002316:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002318:	2302      	movs	r3, #2
 800231a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002320:	4619      	mov	r1, r3
 8002322:	4804      	ldr	r0, [pc, #16]	; (8002334 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8002324:	f000 fff6 	bl	8003314 <HAL_GPIO_Init>
}
 8002328:	bf00      	nop
 800232a:	3740      	adds	r7, #64	; 0x40
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40023800 	.word	0x40023800
 8002334:	40020000 	.word	0x40020000
 8002338:	40020400 	.word	0x40020400
 800233c:	40000400 	.word	0x40000400
 8002340:	40000800 	.word	0x40000800
 8002344:	40020c00 	.word	0x40020c00
 8002348:	40000c00 	.word	0x40000c00

0800234c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b088      	sub	sp, #32
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002354:	f107 030c 	add.w	r3, r7, #12
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	60da      	str	r2, [r3, #12]
 8002362:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a12      	ldr	r2, [pc, #72]	; (80023b4 <HAL_TIM_MspPostInit+0x68>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d11e      	bne.n	80023ac <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	60bb      	str	r3, [r7, #8]
 8002372:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <HAL_TIM_MspPostInit+0x6c>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	4a10      	ldr	r2, [pc, #64]	; (80023b8 <HAL_TIM_MspPostInit+0x6c>)
 8002378:	f043 0310 	orr.w	r3, r3, #16
 800237c:	6313      	str	r3, [r2, #48]	; 0x30
 800237e:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <HAL_TIM_MspPostInit+0x6c>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	f003 0310 	and.w	r3, r3, #16
 8002386:	60bb      	str	r3, [r7, #8]
 8002388:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800238a:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800238e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002390:	2302      	movs	r3, #2
 8002392:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002394:	2300      	movs	r3, #0
 8002396:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002398:	2300      	movs	r3, #0
 800239a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800239c:	2301      	movs	r3, #1
 800239e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023a0:	f107 030c 	add.w	r3, r7, #12
 80023a4:	4619      	mov	r1, r3
 80023a6:	4805      	ldr	r0, [pc, #20]	; (80023bc <HAL_TIM_MspPostInit+0x70>)
 80023a8:	f000 ffb4 	bl	8003314 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80023ac:	bf00      	nop
 80023ae:	3720      	adds	r7, #32
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40010000 	.word	0x40010000
 80023b8:	40023800 	.word	0x40023800
 80023bc:	40021000 	.word	0x40021000

080023c0 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80023c4:	4b11      	ldr	r3, [pc, #68]	; (800240c <MX_USART3_UART_Init+0x4c>)
 80023c6:	4a12      	ldr	r2, [pc, #72]	; (8002410 <MX_USART3_UART_Init+0x50>)
 80023c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80023ca:	4b10      	ldr	r3, [pc, #64]	; (800240c <MX_USART3_UART_Init+0x4c>)
 80023cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80023d2:	4b0e      	ldr	r3, [pc, #56]	; (800240c <MX_USART3_UART_Init+0x4c>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80023d8:	4b0c      	ldr	r3, [pc, #48]	; (800240c <MX_USART3_UART_Init+0x4c>)
 80023da:	2200      	movs	r2, #0
 80023dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80023de:	4b0b      	ldr	r3, [pc, #44]	; (800240c <MX_USART3_UART_Init+0x4c>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80023e4:	4b09      	ldr	r3, [pc, #36]	; (800240c <MX_USART3_UART_Init+0x4c>)
 80023e6:	220c      	movs	r2, #12
 80023e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ea:	4b08      	ldr	r3, [pc, #32]	; (800240c <MX_USART3_UART_Init+0x4c>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80023f0:	4b06      	ldr	r3, [pc, #24]	; (800240c <MX_USART3_UART_Init+0x4c>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80023f6:	4805      	ldr	r0, [pc, #20]	; (800240c <MX_USART3_UART_Init+0x4c>)
 80023f8:	f003 f84c 	bl	8005494 <HAL_UART_Init>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002402:	f7ff faa1 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002406:	bf00      	nop
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	20000928 	.word	0x20000928
 8002410:	40004800 	.word	0x40004800

08002414 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002418:	4b11      	ldr	r3, [pc, #68]	; (8002460 <MX_USART6_UART_Init+0x4c>)
 800241a:	4a12      	ldr	r2, [pc, #72]	; (8002464 <MX_USART6_UART_Init+0x50>)
 800241c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800241e:	4b10      	ldr	r3, [pc, #64]	; (8002460 <MX_USART6_UART_Init+0x4c>)
 8002420:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002424:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002426:	4b0e      	ldr	r3, [pc, #56]	; (8002460 <MX_USART6_UART_Init+0x4c>)
 8002428:	2200      	movs	r2, #0
 800242a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800242c:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <MX_USART6_UART_Init+0x4c>)
 800242e:	2200      	movs	r2, #0
 8002430:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002432:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <MX_USART6_UART_Init+0x4c>)
 8002434:	2200      	movs	r2, #0
 8002436:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002438:	4b09      	ldr	r3, [pc, #36]	; (8002460 <MX_USART6_UART_Init+0x4c>)
 800243a:	220c      	movs	r2, #12
 800243c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800243e:	4b08      	ldr	r3, [pc, #32]	; (8002460 <MX_USART6_UART_Init+0x4c>)
 8002440:	2200      	movs	r2, #0
 8002442:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002444:	4b06      	ldr	r3, [pc, #24]	; (8002460 <MX_USART6_UART_Init+0x4c>)
 8002446:	2200      	movs	r2, #0
 8002448:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800244a:	4805      	ldr	r0, [pc, #20]	; (8002460 <MX_USART6_UART_Init+0x4c>)
 800244c:	f003 f822 	bl	8005494 <HAL_UART_Init>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002456:	f7ff fa77 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	20000a2c 	.word	0x20000a2c
 8002464:	40011400 	.word	0x40011400

08002468 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b08c      	sub	sp, #48	; 0x30
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002470:	f107 031c 	add.w	r3, r7, #28
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	605a      	str	r2, [r3, #4]
 800247a:	609a      	str	r2, [r3, #8]
 800247c:	60da      	str	r2, [r3, #12]
 800247e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a54      	ldr	r2, [pc, #336]	; (80025d8 <HAL_UART_MspInit+0x170>)
 8002486:	4293      	cmp	r3, r2
 8002488:	f040 80b4 	bne.w	80025f4 <HAL_UART_MspInit+0x18c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800248c:	2300      	movs	r3, #0
 800248e:	61bb      	str	r3, [r7, #24]
 8002490:	4b52      	ldr	r3, [pc, #328]	; (80025dc <HAL_UART_MspInit+0x174>)
 8002492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002494:	4a51      	ldr	r2, [pc, #324]	; (80025dc <HAL_UART_MspInit+0x174>)
 8002496:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800249a:	6413      	str	r3, [r2, #64]	; 0x40
 800249c:	4b4f      	ldr	r3, [pc, #316]	; (80025dc <HAL_UART_MspInit+0x174>)
 800249e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024a4:	61bb      	str	r3, [r7, #24]
 80024a6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024a8:	2300      	movs	r3, #0
 80024aa:	617b      	str	r3, [r7, #20]
 80024ac:	4b4b      	ldr	r3, [pc, #300]	; (80025dc <HAL_UART_MspInit+0x174>)
 80024ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b0:	4a4a      	ldr	r2, [pc, #296]	; (80025dc <HAL_UART_MspInit+0x174>)
 80024b2:	f043 0302 	orr.w	r3, r3, #2
 80024b6:	6313      	str	r3, [r2, #48]	; 0x30
 80024b8:	4b48      	ldr	r3, [pc, #288]	; (80025dc <HAL_UART_MspInit+0x174>)
 80024ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	617b      	str	r3, [r7, #20]
 80024c2:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80024c4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80024c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ca:	2302      	movs	r3, #2
 80024cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ce:	2300      	movs	r3, #0
 80024d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d2:	2303      	movs	r3, #3
 80024d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024d6:	2307      	movs	r3, #7
 80024d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024da:	f107 031c 	add.w	r3, r7, #28
 80024de:	4619      	mov	r1, r3
 80024e0:	483f      	ldr	r0, [pc, #252]	; (80025e0 <HAL_UART_MspInit+0x178>)
 80024e2:	f000 ff17 	bl	8003314 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80024e6:	4b3f      	ldr	r3, [pc, #252]	; (80025e4 <HAL_UART_MspInit+0x17c>)
 80024e8:	4a3f      	ldr	r2, [pc, #252]	; (80025e8 <HAL_UART_MspInit+0x180>)
 80024ea:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80024ec:	4b3d      	ldr	r3, [pc, #244]	; (80025e4 <HAL_UART_MspInit+0x17c>)
 80024ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024f2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024f4:	4b3b      	ldr	r3, [pc, #236]	; (80025e4 <HAL_UART_MspInit+0x17c>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024fa:	4b3a      	ldr	r3, [pc, #232]	; (80025e4 <HAL_UART_MspInit+0x17c>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002500:	4b38      	ldr	r3, [pc, #224]	; (80025e4 <HAL_UART_MspInit+0x17c>)
 8002502:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002506:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002508:	4b36      	ldr	r3, [pc, #216]	; (80025e4 <HAL_UART_MspInit+0x17c>)
 800250a:	2200      	movs	r2, #0
 800250c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800250e:	4b35      	ldr	r3, [pc, #212]	; (80025e4 <HAL_UART_MspInit+0x17c>)
 8002510:	2200      	movs	r2, #0
 8002512:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002514:	4b33      	ldr	r3, [pc, #204]	; (80025e4 <HAL_UART_MspInit+0x17c>)
 8002516:	2200      	movs	r2, #0
 8002518:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800251a:	4b32      	ldr	r3, [pc, #200]	; (80025e4 <HAL_UART_MspInit+0x17c>)
 800251c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002520:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002522:	4b30      	ldr	r3, [pc, #192]	; (80025e4 <HAL_UART_MspInit+0x17c>)
 8002524:	2204      	movs	r2, #4
 8002526:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002528:	4b2e      	ldr	r3, [pc, #184]	; (80025e4 <HAL_UART_MspInit+0x17c>)
 800252a:	2203      	movs	r2, #3
 800252c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 800252e:	4b2d      	ldr	r3, [pc, #180]	; (80025e4 <HAL_UART_MspInit+0x17c>)
 8002530:	2200      	movs	r2, #0
 8002532:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002534:	4b2b      	ldr	r3, [pc, #172]	; (80025e4 <HAL_UART_MspInit+0x17c>)
 8002536:	2200      	movs	r2, #0
 8002538:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800253a:	482a      	ldr	r0, [pc, #168]	; (80025e4 <HAL_UART_MspInit+0x17c>)
 800253c:	f000 fae8 	bl	8002b10 <HAL_DMA_Init>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 8002546:	f7ff f9ff 	bl	8001948 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a25      	ldr	r2, [pc, #148]	; (80025e4 <HAL_UART_MspInit+0x17c>)
 800254e:	639a      	str	r2, [r3, #56]	; 0x38
 8002550:	4a24      	ldr	r2, [pc, #144]	; (80025e4 <HAL_UART_MspInit+0x17c>)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002556:	4b25      	ldr	r3, [pc, #148]	; (80025ec <HAL_UART_MspInit+0x184>)
 8002558:	4a25      	ldr	r2, [pc, #148]	; (80025f0 <HAL_UART_MspInit+0x188>)
 800255a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800255c:	4b23      	ldr	r3, [pc, #140]	; (80025ec <HAL_UART_MspInit+0x184>)
 800255e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002562:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002564:	4b21      	ldr	r3, [pc, #132]	; (80025ec <HAL_UART_MspInit+0x184>)
 8002566:	2240      	movs	r2, #64	; 0x40
 8002568:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800256a:	4b20      	ldr	r3, [pc, #128]	; (80025ec <HAL_UART_MspInit+0x184>)
 800256c:	2200      	movs	r2, #0
 800256e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002570:	4b1e      	ldr	r3, [pc, #120]	; (80025ec <HAL_UART_MspInit+0x184>)
 8002572:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002576:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002578:	4b1c      	ldr	r3, [pc, #112]	; (80025ec <HAL_UART_MspInit+0x184>)
 800257a:	2200      	movs	r2, #0
 800257c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800257e:	4b1b      	ldr	r3, [pc, #108]	; (80025ec <HAL_UART_MspInit+0x184>)
 8002580:	2200      	movs	r2, #0
 8002582:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002584:	4b19      	ldr	r3, [pc, #100]	; (80025ec <HAL_UART_MspInit+0x184>)
 8002586:	2200      	movs	r2, #0
 8002588:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800258a:	4b18      	ldr	r3, [pc, #96]	; (80025ec <HAL_UART_MspInit+0x184>)
 800258c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002590:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002592:	4b16      	ldr	r3, [pc, #88]	; (80025ec <HAL_UART_MspInit+0x184>)
 8002594:	2204      	movs	r2, #4
 8002596:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002598:	4b14      	ldr	r3, [pc, #80]	; (80025ec <HAL_UART_MspInit+0x184>)
 800259a:	2203      	movs	r2, #3
 800259c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800259e:	4b13      	ldr	r3, [pc, #76]	; (80025ec <HAL_UART_MspInit+0x184>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80025a4:	4b11      	ldr	r3, [pc, #68]	; (80025ec <HAL_UART_MspInit+0x184>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80025aa:	4810      	ldr	r0, [pc, #64]	; (80025ec <HAL_UART_MspInit+0x184>)
 80025ac:	f000 fab0 	bl	8002b10 <HAL_DMA_Init>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_UART_MspInit+0x152>
    {
      Error_Handler();
 80025b6:	f7ff f9c7 	bl	8001948 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a0b      	ldr	r2, [pc, #44]	; (80025ec <HAL_UART_MspInit+0x184>)
 80025be:	635a      	str	r2, [r3, #52]	; 0x34
 80025c0:	4a0a      	ldr	r2, [pc, #40]	; (80025ec <HAL_UART_MspInit+0x184>)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80025c6:	2200      	movs	r2, #0
 80025c8:	2100      	movs	r1, #0
 80025ca:	2027      	movs	r0, #39	; 0x27
 80025cc:	f000 fa69 	bl	8002aa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80025d0:	2027      	movs	r0, #39	; 0x27
 80025d2:	f000 fa82 	bl	8002ada <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80025d6:	e0b7      	b.n	8002748 <HAL_UART_MspInit+0x2e0>
 80025d8:	40004800 	.word	0x40004800
 80025dc:	40023800 	.word	0x40023800
 80025e0:	40020400 	.word	0x40020400
 80025e4:	200008c8 	.word	0x200008c8
 80025e8:	40026028 	.word	0x40026028
 80025ec:	2000096c 	.word	0x2000096c
 80025f0:	40026058 	.word	0x40026058
  else if(uartHandle->Instance==USART6)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a55      	ldr	r2, [pc, #340]	; (8002750 <HAL_UART_MspInit+0x2e8>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	f040 80a4 	bne.w	8002748 <HAL_UART_MspInit+0x2e0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002600:	2300      	movs	r3, #0
 8002602:	613b      	str	r3, [r7, #16]
 8002604:	4b53      	ldr	r3, [pc, #332]	; (8002754 <HAL_UART_MspInit+0x2ec>)
 8002606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002608:	4a52      	ldr	r2, [pc, #328]	; (8002754 <HAL_UART_MspInit+0x2ec>)
 800260a:	f043 0320 	orr.w	r3, r3, #32
 800260e:	6453      	str	r3, [r2, #68]	; 0x44
 8002610:	4b50      	ldr	r3, [pc, #320]	; (8002754 <HAL_UART_MspInit+0x2ec>)
 8002612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002614:	f003 0320 	and.w	r3, r3, #32
 8002618:	613b      	str	r3, [r7, #16]
 800261a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800261c:	2300      	movs	r3, #0
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	4b4c      	ldr	r3, [pc, #304]	; (8002754 <HAL_UART_MspInit+0x2ec>)
 8002622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002624:	4a4b      	ldr	r2, [pc, #300]	; (8002754 <HAL_UART_MspInit+0x2ec>)
 8002626:	f043 0304 	orr.w	r3, r3, #4
 800262a:	6313      	str	r3, [r2, #48]	; 0x30
 800262c:	4b49      	ldr	r3, [pc, #292]	; (8002754 <HAL_UART_MspInit+0x2ec>)
 800262e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002630:	f003 0304 	and.w	r3, r3, #4
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002638:	23c0      	movs	r3, #192	; 0xc0
 800263a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263c:	2302      	movs	r3, #2
 800263e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002644:	2303      	movs	r3, #3
 8002646:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002648:	2308      	movs	r3, #8
 800264a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800264c:	f107 031c 	add.w	r3, r7, #28
 8002650:	4619      	mov	r1, r3
 8002652:	4841      	ldr	r0, [pc, #260]	; (8002758 <HAL_UART_MspInit+0x2f0>)
 8002654:	f000 fe5e 	bl	8003314 <HAL_GPIO_Init>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8002658:	4b40      	ldr	r3, [pc, #256]	; (800275c <HAL_UART_MspInit+0x2f4>)
 800265a:	4a41      	ldr	r2, [pc, #260]	; (8002760 <HAL_UART_MspInit+0x2f8>)
 800265c:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800265e:	4b3f      	ldr	r3, [pc, #252]	; (800275c <HAL_UART_MspInit+0x2f4>)
 8002660:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002664:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002666:	4b3d      	ldr	r3, [pc, #244]	; (800275c <HAL_UART_MspInit+0x2f4>)
 8002668:	2240      	movs	r2, #64	; 0x40
 800266a:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800266c:	4b3b      	ldr	r3, [pc, #236]	; (800275c <HAL_UART_MspInit+0x2f4>)
 800266e:	2200      	movs	r2, #0
 8002670:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002672:	4b3a      	ldr	r3, [pc, #232]	; (800275c <HAL_UART_MspInit+0x2f4>)
 8002674:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002678:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800267a:	4b38      	ldr	r3, [pc, #224]	; (800275c <HAL_UART_MspInit+0x2f4>)
 800267c:	2200      	movs	r2, #0
 800267e:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002680:	4b36      	ldr	r3, [pc, #216]	; (800275c <HAL_UART_MspInit+0x2f4>)
 8002682:	2200      	movs	r2, #0
 8002684:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8002686:	4b35      	ldr	r3, [pc, #212]	; (800275c <HAL_UART_MspInit+0x2f4>)
 8002688:	2200      	movs	r2, #0
 800268a:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800268c:	4b33      	ldr	r3, [pc, #204]	; (800275c <HAL_UART_MspInit+0x2f4>)
 800268e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002692:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002694:	4b31      	ldr	r3, [pc, #196]	; (800275c <HAL_UART_MspInit+0x2f4>)
 8002696:	2204      	movs	r2, #4
 8002698:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart6_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800269a:	4b30      	ldr	r3, [pc, #192]	; (800275c <HAL_UART_MspInit+0x2f4>)
 800269c:	2203      	movs	r2, #3
 800269e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart6_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80026a0:	4b2e      	ldr	r3, [pc, #184]	; (800275c <HAL_UART_MspInit+0x2f4>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart6_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80026a6:	4b2d      	ldr	r3, [pc, #180]	; (800275c <HAL_UART_MspInit+0x2f4>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80026ac:	482b      	ldr	r0, [pc, #172]	; (800275c <HAL_UART_MspInit+0x2f4>)
 80026ae:	f000 fa2f 	bl	8002b10 <HAL_DMA_Init>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <HAL_UART_MspInit+0x254>
      Error_Handler();
 80026b8:	f7ff f946 	bl	8001948 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a27      	ldr	r2, [pc, #156]	; (800275c <HAL_UART_MspInit+0x2f4>)
 80026c0:	635a      	str	r2, [r3, #52]	; 0x34
 80026c2:	4a26      	ldr	r2, [pc, #152]	; (800275c <HAL_UART_MspInit+0x2f4>)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80026c8:	4b26      	ldr	r3, [pc, #152]	; (8002764 <HAL_UART_MspInit+0x2fc>)
 80026ca:	4a27      	ldr	r2, [pc, #156]	; (8002768 <HAL_UART_MspInit+0x300>)
 80026cc:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80026ce:	4b25      	ldr	r3, [pc, #148]	; (8002764 <HAL_UART_MspInit+0x2fc>)
 80026d0:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80026d4:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026d6:	4b23      	ldr	r3, [pc, #140]	; (8002764 <HAL_UART_MspInit+0x2fc>)
 80026d8:	2200      	movs	r2, #0
 80026da:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026dc:	4b21      	ldr	r3, [pc, #132]	; (8002764 <HAL_UART_MspInit+0x2fc>)
 80026de:	2200      	movs	r2, #0
 80026e0:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026e2:	4b20      	ldr	r3, [pc, #128]	; (8002764 <HAL_UART_MspInit+0x2fc>)
 80026e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026e8:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026ea:	4b1e      	ldr	r3, [pc, #120]	; (8002764 <HAL_UART_MspInit+0x2fc>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026f0:	4b1c      	ldr	r3, [pc, #112]	; (8002764 <HAL_UART_MspInit+0x2fc>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80026f6:	4b1b      	ldr	r3, [pc, #108]	; (8002764 <HAL_UART_MspInit+0x2fc>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80026fc:	4b19      	ldr	r3, [pc, #100]	; (8002764 <HAL_UART_MspInit+0x2fc>)
 80026fe:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002702:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002704:	4b17      	ldr	r3, [pc, #92]	; (8002764 <HAL_UART_MspInit+0x2fc>)
 8002706:	2204      	movs	r2, #4
 8002708:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart6_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800270a:	4b16      	ldr	r3, [pc, #88]	; (8002764 <HAL_UART_MspInit+0x2fc>)
 800270c:	2203      	movs	r2, #3
 800270e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart6_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002710:	4b14      	ldr	r3, [pc, #80]	; (8002764 <HAL_UART_MspInit+0x2fc>)
 8002712:	2200      	movs	r2, #0
 8002714:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart6_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002716:	4b13      	ldr	r3, [pc, #76]	; (8002764 <HAL_UART_MspInit+0x2fc>)
 8002718:	2200      	movs	r2, #0
 800271a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800271c:	4811      	ldr	r0, [pc, #68]	; (8002764 <HAL_UART_MspInit+0x2fc>)
 800271e:	f000 f9f7 	bl	8002b10 <HAL_DMA_Init>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <HAL_UART_MspInit+0x2c4>
      Error_Handler();
 8002728:	f7ff f90e 	bl	8001948 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a0d      	ldr	r2, [pc, #52]	; (8002764 <HAL_UART_MspInit+0x2fc>)
 8002730:	639a      	str	r2, [r3, #56]	; 0x38
 8002732:	4a0c      	ldr	r2, [pc, #48]	; (8002764 <HAL_UART_MspInit+0x2fc>)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002738:	2200      	movs	r2, #0
 800273a:	2100      	movs	r1, #0
 800273c:	2047      	movs	r0, #71	; 0x47
 800273e:	f000 f9b0 	bl	8002aa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002742:	2047      	movs	r0, #71	; 0x47
 8002744:	f000 f9c9 	bl	8002ada <HAL_NVIC_EnableIRQ>
}
 8002748:	bf00      	nop
 800274a:	3730      	adds	r7, #48	; 0x30
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40011400 	.word	0x40011400
 8002754:	40023800 	.word	0x40023800
 8002758:	40020800 	.word	0x40020800
 800275c:	200009cc 	.word	0x200009cc
 8002760:	400264a0 	.word	0x400264a0
 8002764:	20000868 	.word	0x20000868
 8002768:	40026428 	.word	0x40026428

0800276c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800276c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002770:	480d      	ldr	r0, [pc, #52]	; (80027a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002772:	490e      	ldr	r1, [pc, #56]	; (80027ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002774:	4a0e      	ldr	r2, [pc, #56]	; (80027b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002776:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002778:	e002      	b.n	8002780 <LoopCopyDataInit>

0800277a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800277a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800277c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800277e:	3304      	adds	r3, #4

08002780 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002780:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002782:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002784:	d3f9      	bcc.n	800277a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002786:	4a0b      	ldr	r2, [pc, #44]	; (80027b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002788:	4c0b      	ldr	r4, [pc, #44]	; (80027b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800278a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800278c:	e001      	b.n	8002792 <LoopFillZerobss>

0800278e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800278e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002790:	3204      	adds	r2, #4

08002792 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002792:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002794:	d3fb      	bcc.n	800278e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002796:	f7ff fa3b 	bl	8001c10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800279a:	f003 fdaf 	bl	80062fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800279e:	f7fe fd45 	bl	800122c <main>
  bx  lr    
 80027a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80027a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027ac:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80027b0:	08009ad8 	.word	0x08009ad8
  ldr r2, =_sbss
 80027b4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80027b8:	20000a84 	.word	0x20000a84

080027bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027bc:	e7fe      	b.n	80027bc <ADC_IRQHandler>
	...

080027c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027c4:	4b0e      	ldr	r3, [pc, #56]	; (8002800 <HAL_Init+0x40>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a0d      	ldr	r2, [pc, #52]	; (8002800 <HAL_Init+0x40>)
 80027ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027d0:	4b0b      	ldr	r3, [pc, #44]	; (8002800 <HAL_Init+0x40>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a0a      	ldr	r2, [pc, #40]	; (8002800 <HAL_Init+0x40>)
 80027d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027dc:	4b08      	ldr	r3, [pc, #32]	; (8002800 <HAL_Init+0x40>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a07      	ldr	r2, [pc, #28]	; (8002800 <HAL_Init+0x40>)
 80027e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027e8:	2003      	movs	r0, #3
 80027ea:	f000 f94f 	bl	8002a8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027ee:	2000      	movs	r0, #0
 80027f0:	f000 f808 	bl	8002804 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027f4:	f7ff f8ae 	bl	8001954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	40023c00 	.word	0x40023c00

08002804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800280c:	4b12      	ldr	r3, [pc, #72]	; (8002858 <HAL_InitTick+0x54>)
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	4b12      	ldr	r3, [pc, #72]	; (800285c <HAL_InitTick+0x58>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	4619      	mov	r1, r3
 8002816:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800281a:	fbb3 f3f1 	udiv	r3, r3, r1
 800281e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002822:	4618      	mov	r0, r3
 8002824:	f000 f967 	bl	8002af6 <HAL_SYSTICK_Config>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e00e      	b.n	8002850 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b0f      	cmp	r3, #15
 8002836:	d80a      	bhi.n	800284e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002838:	2200      	movs	r2, #0
 800283a:	6879      	ldr	r1, [r7, #4]
 800283c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002840:	f000 f92f 	bl	8002aa2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002844:	4a06      	ldr	r2, [pc, #24]	; (8002860 <HAL_InitTick+0x5c>)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800284a:	2300      	movs	r3, #0
 800284c:	e000      	b.n	8002850 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
}
 8002850:	4618      	mov	r0, r3
 8002852:	3708      	adds	r7, #8
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	20000008 	.word	0x20000008
 800285c:	20000010 	.word	0x20000010
 8002860:	2000000c 	.word	0x2000000c

08002864 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002868:	4b06      	ldr	r3, [pc, #24]	; (8002884 <HAL_IncTick+0x20>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	461a      	mov	r2, r3
 800286e:	4b06      	ldr	r3, [pc, #24]	; (8002888 <HAL_IncTick+0x24>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4413      	add	r3, r2
 8002874:	4a04      	ldr	r2, [pc, #16]	; (8002888 <HAL_IncTick+0x24>)
 8002876:	6013      	str	r3, [r2, #0]
}
 8002878:	bf00      	nop
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	20000010 	.word	0x20000010
 8002888:	20000a70 	.word	0x20000a70

0800288c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  return uwTick;
 8002890:	4b03      	ldr	r3, [pc, #12]	; (80028a0 <HAL_GetTick+0x14>)
 8002892:	681b      	ldr	r3, [r3, #0]
}
 8002894:	4618      	mov	r0, r3
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	20000a70 	.word	0x20000a70

080028a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028ac:	f7ff ffee 	bl	800288c <HAL_GetTick>
 80028b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028bc:	d005      	beq.n	80028ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028be:	4b0a      	ldr	r3, [pc, #40]	; (80028e8 <HAL_Delay+0x44>)
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	461a      	mov	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4413      	add	r3, r2
 80028c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028ca:	bf00      	nop
 80028cc:	f7ff ffde 	bl	800288c <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d8f7      	bhi.n	80028cc <HAL_Delay+0x28>
  {
  }
}
 80028dc:	bf00      	nop
 80028de:	bf00      	nop
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	20000010 	.word	0x20000010

080028ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f003 0307 	and.w	r3, r3, #7
 80028fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028fc:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <__NVIC_SetPriorityGrouping+0x44>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002902:	68ba      	ldr	r2, [r7, #8]
 8002904:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002908:	4013      	ands	r3, r2
 800290a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002914:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800291c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800291e:	4a04      	ldr	r2, [pc, #16]	; (8002930 <__NVIC_SetPriorityGrouping+0x44>)
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	60d3      	str	r3, [r2, #12]
}
 8002924:	bf00      	nop
 8002926:	3714      	adds	r7, #20
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	e000ed00 	.word	0xe000ed00

08002934 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002938:	4b04      	ldr	r3, [pc, #16]	; (800294c <__NVIC_GetPriorityGrouping+0x18>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	0a1b      	lsrs	r3, r3, #8
 800293e:	f003 0307 	and.w	r3, r3, #7
}
 8002942:	4618      	mov	r0, r3
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr
 800294c:	e000ed00 	.word	0xe000ed00

08002950 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800295a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295e:	2b00      	cmp	r3, #0
 8002960:	db0b      	blt.n	800297a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002962:	79fb      	ldrb	r3, [r7, #7]
 8002964:	f003 021f 	and.w	r2, r3, #31
 8002968:	4907      	ldr	r1, [pc, #28]	; (8002988 <__NVIC_EnableIRQ+0x38>)
 800296a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296e:	095b      	lsrs	r3, r3, #5
 8002970:	2001      	movs	r0, #1
 8002972:	fa00 f202 	lsl.w	r2, r0, r2
 8002976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	e000e100 	.word	0xe000e100

0800298c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	4603      	mov	r3, r0
 8002994:	6039      	str	r1, [r7, #0]
 8002996:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299c:	2b00      	cmp	r3, #0
 800299e:	db0a      	blt.n	80029b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	b2da      	uxtb	r2, r3
 80029a4:	490c      	ldr	r1, [pc, #48]	; (80029d8 <__NVIC_SetPriority+0x4c>)
 80029a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029aa:	0112      	lsls	r2, r2, #4
 80029ac:	b2d2      	uxtb	r2, r2
 80029ae:	440b      	add	r3, r1
 80029b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029b4:	e00a      	b.n	80029cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	4908      	ldr	r1, [pc, #32]	; (80029dc <__NVIC_SetPriority+0x50>)
 80029bc:	79fb      	ldrb	r3, [r7, #7]
 80029be:	f003 030f 	and.w	r3, r3, #15
 80029c2:	3b04      	subs	r3, #4
 80029c4:	0112      	lsls	r2, r2, #4
 80029c6:	b2d2      	uxtb	r2, r2
 80029c8:	440b      	add	r3, r1
 80029ca:	761a      	strb	r2, [r3, #24]
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	e000e100 	.word	0xe000e100
 80029dc:	e000ed00 	.word	0xe000ed00

080029e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b089      	sub	sp, #36	; 0x24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f003 0307 	and.w	r3, r3, #7
 80029f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	f1c3 0307 	rsb	r3, r3, #7
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	bf28      	it	cs
 80029fe:	2304      	movcs	r3, #4
 8002a00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	3304      	adds	r3, #4
 8002a06:	2b06      	cmp	r3, #6
 8002a08:	d902      	bls.n	8002a10 <NVIC_EncodePriority+0x30>
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	3b03      	subs	r3, #3
 8002a0e:	e000      	b.n	8002a12 <NVIC_EncodePriority+0x32>
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	43da      	mvns	r2, r3
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	401a      	ands	r2, r3
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a32:	43d9      	mvns	r1, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a38:	4313      	orrs	r3, r2
         );
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3724      	adds	r7, #36	; 0x24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
	...

08002a48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	3b01      	subs	r3, #1
 8002a54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a58:	d301      	bcc.n	8002a5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e00f      	b.n	8002a7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a5e:	4a0a      	ldr	r2, [pc, #40]	; (8002a88 <SysTick_Config+0x40>)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	3b01      	subs	r3, #1
 8002a64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a66:	210f      	movs	r1, #15
 8002a68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a6c:	f7ff ff8e 	bl	800298c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a70:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <SysTick_Config+0x40>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a76:	4b04      	ldr	r3, [pc, #16]	; (8002a88 <SysTick_Config+0x40>)
 8002a78:	2207      	movs	r2, #7
 8002a7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	e000e010 	.word	0xe000e010

08002a8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f7ff ff29 	bl	80028ec <__NVIC_SetPriorityGrouping>
}
 8002a9a:	bf00      	nop
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b086      	sub	sp, #24
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	60b9      	str	r1, [r7, #8]
 8002aac:	607a      	str	r2, [r7, #4]
 8002aae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ab4:	f7ff ff3e 	bl	8002934 <__NVIC_GetPriorityGrouping>
 8002ab8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	68b9      	ldr	r1, [r7, #8]
 8002abe:	6978      	ldr	r0, [r7, #20]
 8002ac0:	f7ff ff8e 	bl	80029e0 <NVIC_EncodePriority>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aca:	4611      	mov	r1, r2
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff ff5d 	bl	800298c <__NVIC_SetPriority>
}
 8002ad2:	bf00      	nop
 8002ad4:	3718      	adds	r7, #24
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b082      	sub	sp, #8
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff ff31 	bl	8002950 <__NVIC_EnableIRQ>
}
 8002aee:	bf00      	nop
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b082      	sub	sp, #8
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7ff ffa2 	bl	8002a48 <SysTick_Config>
 8002b04:	4603      	mov	r3, r0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
	...

08002b10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b1c:	f7ff feb6 	bl	800288c <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d101      	bne.n	8002b2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e099      	b.n	8002c60 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2202      	movs	r2, #2
 8002b38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0201 	bic.w	r2, r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b4c:	e00f      	b.n	8002b6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b4e:	f7ff fe9d 	bl	800288c <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b05      	cmp	r3, #5
 8002b5a:	d908      	bls.n	8002b6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2203      	movs	r2, #3
 8002b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e078      	b.n	8002c60 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1e8      	bne.n	8002b4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b84:	697a      	ldr	r2, [r7, #20]
 8002b86:	4b38      	ldr	r3, [pc, #224]	; (8002c68 <HAL_DMA_Init+0x158>)
 8002b88:	4013      	ands	r3, r2
 8002b8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ba6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc4:	2b04      	cmp	r3, #4
 8002bc6:	d107      	bne.n	8002bd8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	f023 0307 	bic.w	r3, r3, #7
 8002bee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	d117      	bne.n	8002c32 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00e      	beq.n	8002c32 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 fb01 	bl	800321c <DMA_CheckFifoParam>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d008      	beq.n	8002c32 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2240      	movs	r2, #64	; 0x40
 8002c24:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e016      	b.n	8002c60 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 fab8 	bl	80031b0 <DMA_CalcBaseAndBitshift>
 8002c40:	4603      	mov	r3, r0
 8002c42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c48:	223f      	movs	r2, #63	; 0x3f
 8002c4a:	409a      	lsls	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3718      	adds	r7, #24
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	f010803f 	.word	0xf010803f

08002c6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
 8002c78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c82:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d101      	bne.n	8002c92 <HAL_DMA_Start_IT+0x26>
 8002c8e:	2302      	movs	r3, #2
 8002c90:	e040      	b.n	8002d14 <HAL_DMA_Start_IT+0xa8>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d12f      	bne.n	8002d06 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2202      	movs	r2, #2
 8002caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	68b9      	ldr	r1, [r7, #8]
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f000 fa4a 	bl	8003154 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc4:	223f      	movs	r2, #63	; 0x3f
 8002cc6:	409a      	lsls	r2, r3
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f042 0216 	orr.w	r2, r2, #22
 8002cda:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d007      	beq.n	8002cf4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f042 0208 	orr.w	r2, r2, #8
 8002cf2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f042 0201 	orr.w	r2, r2, #1
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	e005      	b.n	8002d12 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d0e:	2302      	movs	r3, #2
 8002d10:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3718      	adds	r7, #24
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d28:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d2a:	f7ff fdaf 	bl	800288c <HAL_GetTick>
 8002d2e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d008      	beq.n	8002d4e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2280      	movs	r2, #128	; 0x80
 8002d40:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e052      	b.n	8002df4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 0216 	bic.w	r2, r2, #22
 8002d5c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	695a      	ldr	r2, [r3, #20]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d6c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d103      	bne.n	8002d7e <HAL_DMA_Abort+0x62>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d007      	beq.n	8002d8e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 0208 	bic.w	r2, r2, #8
 8002d8c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 0201 	bic.w	r2, r2, #1
 8002d9c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d9e:	e013      	b.n	8002dc8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002da0:	f7ff fd74 	bl	800288c <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b05      	cmp	r3, #5
 8002dac:	d90c      	bls.n	8002dc8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2220      	movs	r2, #32
 8002db2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2203      	movs	r2, #3
 8002dc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e015      	b.n	8002df4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1e4      	bne.n	8002da0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dda:	223f      	movs	r2, #63	; 0x3f
 8002ddc:	409a      	lsls	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d004      	beq.n	8002e1a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2280      	movs	r2, #128	; 0x80
 8002e14:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e00c      	b.n	8002e34 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2205      	movs	r2, #5
 8002e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f022 0201 	bic.w	r2, r2, #1
 8002e30:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e4c:	4b92      	ldr	r3, [pc, #584]	; (8003098 <HAL_DMA_IRQHandler+0x258>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a92      	ldr	r2, [pc, #584]	; (800309c <HAL_DMA_IRQHandler+0x25c>)
 8002e52:	fba2 2303 	umull	r2, r3, r2, r3
 8002e56:	0a9b      	lsrs	r3, r3, #10
 8002e58:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e6a:	2208      	movs	r2, #8
 8002e6c:	409a      	lsls	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	4013      	ands	r3, r2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d01a      	beq.n	8002eac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d013      	beq.n	8002eac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 0204 	bic.w	r2, r2, #4
 8002e92:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e98:	2208      	movs	r2, #8
 8002e9a:	409a      	lsls	r2, r3
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea4:	f043 0201 	orr.w	r2, r3, #1
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	409a      	lsls	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d012      	beq.n	8002ee2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00b      	beq.n	8002ee2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ece:	2201      	movs	r2, #1
 8002ed0:	409a      	lsls	r2, r3
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eda:	f043 0202 	orr.w	r2, r3, #2
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee6:	2204      	movs	r2, #4
 8002ee8:	409a      	lsls	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	4013      	ands	r3, r2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d012      	beq.n	8002f18 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00b      	beq.n	8002f18 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f04:	2204      	movs	r2, #4
 8002f06:	409a      	lsls	r2, r3
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f10:	f043 0204 	orr.w	r2, r3, #4
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1c:	2210      	movs	r2, #16
 8002f1e:	409a      	lsls	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4013      	ands	r3, r2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d043      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0308 	and.w	r3, r3, #8
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d03c      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3a:	2210      	movs	r2, #16
 8002f3c:	409a      	lsls	r2, r3
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d018      	beq.n	8002f82 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d108      	bne.n	8002f70 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d024      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	4798      	blx	r3
 8002f6e:	e01f      	b.n	8002fb0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d01b      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	4798      	blx	r3
 8002f80:	e016      	b.n	8002fb0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d107      	bne.n	8002fa0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 0208 	bic.w	r2, r2, #8
 8002f9e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d003      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb4:	2220      	movs	r2, #32
 8002fb6:	409a      	lsls	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 808e 	beq.w	80030de <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0310 	and.w	r3, r3, #16
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f000 8086 	beq.w	80030de <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	409a      	lsls	r2, r3
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b05      	cmp	r3, #5
 8002fe8:	d136      	bne.n	8003058 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 0216 	bic.w	r2, r2, #22
 8002ff8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	695a      	ldr	r2, [r3, #20]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003008:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	2b00      	cmp	r3, #0
 8003010:	d103      	bne.n	800301a <HAL_DMA_IRQHandler+0x1da>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003016:	2b00      	cmp	r3, #0
 8003018:	d007      	beq.n	800302a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 0208 	bic.w	r2, r2, #8
 8003028:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800302e:	223f      	movs	r2, #63	; 0x3f
 8003030:	409a      	lsls	r2, r3
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800304a:	2b00      	cmp	r3, #0
 800304c:	d07d      	beq.n	800314a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	4798      	blx	r3
        }
        return;
 8003056:	e078      	b.n	800314a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d01c      	beq.n	80030a0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d108      	bne.n	8003086 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003078:	2b00      	cmp	r3, #0
 800307a:	d030      	beq.n	80030de <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	4798      	blx	r3
 8003084:	e02b      	b.n	80030de <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800308a:	2b00      	cmp	r3, #0
 800308c:	d027      	beq.n	80030de <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	4798      	blx	r3
 8003096:	e022      	b.n	80030de <HAL_DMA_IRQHandler+0x29e>
 8003098:	20000008 	.word	0x20000008
 800309c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10f      	bne.n	80030ce <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0210 	bic.w	r2, r2, #16
 80030bc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d032      	beq.n	800314c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d022      	beq.n	8003138 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2205      	movs	r2, #5
 80030f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 0201 	bic.w	r2, r2, #1
 8003108:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	3301      	adds	r3, #1
 800310e:	60bb      	str	r3, [r7, #8]
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	429a      	cmp	r2, r3
 8003114:	d307      	bcc.n	8003126 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1f2      	bne.n	800310a <HAL_DMA_IRQHandler+0x2ca>
 8003124:	e000      	b.n	8003128 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003126:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800313c:	2b00      	cmp	r3, #0
 800313e:	d005      	beq.n	800314c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	4798      	blx	r3
 8003148:	e000      	b.n	800314c <HAL_DMA_IRQHandler+0x30c>
        return;
 800314a:	bf00      	nop
    }
  }
}
 800314c:	3718      	adds	r7, #24
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop

08003154 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
 8003160:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003170:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	2b40      	cmp	r3, #64	; 0x40
 8003180:	d108      	bne.n	8003194 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003192:	e007      	b.n	80031a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	60da      	str	r2, [r3, #12]
}
 80031a4:	bf00      	nop
 80031a6:	3714      	adds	r7, #20
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	3b10      	subs	r3, #16
 80031c0:	4a14      	ldr	r2, [pc, #80]	; (8003214 <DMA_CalcBaseAndBitshift+0x64>)
 80031c2:	fba2 2303 	umull	r2, r3, r2, r3
 80031c6:	091b      	lsrs	r3, r3, #4
 80031c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80031ca:	4a13      	ldr	r2, [pc, #76]	; (8003218 <DMA_CalcBaseAndBitshift+0x68>)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	4413      	add	r3, r2
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	461a      	mov	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2b03      	cmp	r3, #3
 80031dc:	d909      	bls.n	80031f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80031e6:	f023 0303 	bic.w	r3, r3, #3
 80031ea:	1d1a      	adds	r2, r3, #4
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	659a      	str	r2, [r3, #88]	; 0x58
 80031f0:	e007      	b.n	8003202 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80031fa:	f023 0303 	bic.w	r3, r3, #3
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003206:	4618      	mov	r0, r3
 8003208:	3714      	adds	r7, #20
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	aaaaaaab 	.word	0xaaaaaaab
 8003218:	08009640 	.word	0x08009640

0800321c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003224:	2300      	movs	r3, #0
 8003226:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d11f      	bne.n	8003276 <DMA_CheckFifoParam+0x5a>
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	2b03      	cmp	r3, #3
 800323a:	d856      	bhi.n	80032ea <DMA_CheckFifoParam+0xce>
 800323c:	a201      	add	r2, pc, #4	; (adr r2, 8003244 <DMA_CheckFifoParam+0x28>)
 800323e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003242:	bf00      	nop
 8003244:	08003255 	.word	0x08003255
 8003248:	08003267 	.word	0x08003267
 800324c:	08003255 	.word	0x08003255
 8003250:	080032eb 	.word	0x080032eb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003258:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d046      	beq.n	80032ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003264:	e043      	b.n	80032ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800326e:	d140      	bne.n	80032f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003274:	e03d      	b.n	80032f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800327e:	d121      	bne.n	80032c4 <DMA_CheckFifoParam+0xa8>
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	2b03      	cmp	r3, #3
 8003284:	d837      	bhi.n	80032f6 <DMA_CheckFifoParam+0xda>
 8003286:	a201      	add	r2, pc, #4	; (adr r2, 800328c <DMA_CheckFifoParam+0x70>)
 8003288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328c:	0800329d 	.word	0x0800329d
 8003290:	080032a3 	.word	0x080032a3
 8003294:	0800329d 	.word	0x0800329d
 8003298:	080032b5 	.word	0x080032b5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	73fb      	strb	r3, [r7, #15]
      break;
 80032a0:	e030      	b.n	8003304 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d025      	beq.n	80032fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032b2:	e022      	b.n	80032fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032bc:	d11f      	bne.n	80032fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80032c2:	e01c      	b.n	80032fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d903      	bls.n	80032d2 <DMA_CheckFifoParam+0xb6>
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	2b03      	cmp	r3, #3
 80032ce:	d003      	beq.n	80032d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80032d0:	e018      	b.n	8003304 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	73fb      	strb	r3, [r7, #15]
      break;
 80032d6:	e015      	b.n	8003304 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00e      	beq.n	8003302 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	73fb      	strb	r3, [r7, #15]
      break;
 80032e8:	e00b      	b.n	8003302 <DMA_CheckFifoParam+0xe6>
      break;
 80032ea:	bf00      	nop
 80032ec:	e00a      	b.n	8003304 <DMA_CheckFifoParam+0xe8>
      break;
 80032ee:	bf00      	nop
 80032f0:	e008      	b.n	8003304 <DMA_CheckFifoParam+0xe8>
      break;
 80032f2:	bf00      	nop
 80032f4:	e006      	b.n	8003304 <DMA_CheckFifoParam+0xe8>
      break;
 80032f6:	bf00      	nop
 80032f8:	e004      	b.n	8003304 <DMA_CheckFifoParam+0xe8>
      break;
 80032fa:	bf00      	nop
 80032fc:	e002      	b.n	8003304 <DMA_CheckFifoParam+0xe8>
      break;   
 80032fe:	bf00      	nop
 8003300:	e000      	b.n	8003304 <DMA_CheckFifoParam+0xe8>
      break;
 8003302:	bf00      	nop
    }
  } 
  
  return status; 
 8003304:	7bfb      	ldrb	r3, [r7, #15]
}
 8003306:	4618      	mov	r0, r3
 8003308:	3714      	adds	r7, #20
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop

08003314 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003314:	b480      	push	{r7}
 8003316:	b089      	sub	sp, #36	; 0x24
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800331e:	2300      	movs	r3, #0
 8003320:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003322:	2300      	movs	r3, #0
 8003324:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003326:	2300      	movs	r3, #0
 8003328:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800332a:	2300      	movs	r3, #0
 800332c:	61fb      	str	r3, [r7, #28]
 800332e:	e16b      	b.n	8003608 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003330:	2201      	movs	r2, #1
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	4013      	ands	r3, r2
 8003342:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	429a      	cmp	r2, r3
 800334a:	f040 815a 	bne.w	8003602 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	2b01      	cmp	r3, #1
 8003358:	d005      	beq.n	8003366 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003362:	2b02      	cmp	r3, #2
 8003364:	d130      	bne.n	80033c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	2203      	movs	r2, #3
 8003372:	fa02 f303 	lsl.w	r3, r2, r3
 8003376:	43db      	mvns	r3, r3
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	4013      	ands	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	68da      	ldr	r2, [r3, #12]
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	4313      	orrs	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800339c:	2201      	movs	r2, #1
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	43db      	mvns	r3, r3
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	4013      	ands	r3, r2
 80033aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	091b      	lsrs	r3, r3, #4
 80033b2:	f003 0201 	and.w	r2, r3, #1
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	4313      	orrs	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f003 0303 	and.w	r3, r3, #3
 80033d0:	2b03      	cmp	r3, #3
 80033d2:	d017      	beq.n	8003404 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	2203      	movs	r2, #3
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	43db      	mvns	r3, r3
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	4013      	ands	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	689a      	ldr	r2, [r3, #8]
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f003 0303 	and.w	r3, r3, #3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d123      	bne.n	8003458 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	08da      	lsrs	r2, r3, #3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3208      	adds	r2, #8
 8003418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800341c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	f003 0307 	and.w	r3, r3, #7
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	220f      	movs	r2, #15
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	43db      	mvns	r3, r3
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	4013      	ands	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	691a      	ldr	r2, [r3, #16]
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	f003 0307 	and.w	r3, r3, #7
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	4313      	orrs	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	08da      	lsrs	r2, r3, #3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	3208      	adds	r2, #8
 8003452:	69b9      	ldr	r1, [r7, #24]
 8003454:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	2203      	movs	r2, #3
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	43db      	mvns	r3, r3
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	4013      	ands	r3, r2
 800346e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f003 0203 	and.w	r2, r3, #3
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	4313      	orrs	r3, r2
 8003484:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 80b4 	beq.w	8003602 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800349a:	2300      	movs	r3, #0
 800349c:	60fb      	str	r3, [r7, #12]
 800349e:	4b60      	ldr	r3, [pc, #384]	; (8003620 <HAL_GPIO_Init+0x30c>)
 80034a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a2:	4a5f      	ldr	r2, [pc, #380]	; (8003620 <HAL_GPIO_Init+0x30c>)
 80034a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034a8:	6453      	str	r3, [r2, #68]	; 0x44
 80034aa:	4b5d      	ldr	r3, [pc, #372]	; (8003620 <HAL_GPIO_Init+0x30c>)
 80034ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034b6:	4a5b      	ldr	r2, [pc, #364]	; (8003624 <HAL_GPIO_Init+0x310>)
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	089b      	lsrs	r3, r3, #2
 80034bc:	3302      	adds	r3, #2
 80034be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	f003 0303 	and.w	r3, r3, #3
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	220f      	movs	r2, #15
 80034ce:	fa02 f303 	lsl.w	r3, r2, r3
 80034d2:	43db      	mvns	r3, r3
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	4013      	ands	r3, r2
 80034d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a52      	ldr	r2, [pc, #328]	; (8003628 <HAL_GPIO_Init+0x314>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d02b      	beq.n	800353a <HAL_GPIO_Init+0x226>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a51      	ldr	r2, [pc, #324]	; (800362c <HAL_GPIO_Init+0x318>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d025      	beq.n	8003536 <HAL_GPIO_Init+0x222>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a50      	ldr	r2, [pc, #320]	; (8003630 <HAL_GPIO_Init+0x31c>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d01f      	beq.n	8003532 <HAL_GPIO_Init+0x21e>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a4f      	ldr	r2, [pc, #316]	; (8003634 <HAL_GPIO_Init+0x320>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d019      	beq.n	800352e <HAL_GPIO_Init+0x21a>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a4e      	ldr	r2, [pc, #312]	; (8003638 <HAL_GPIO_Init+0x324>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d013      	beq.n	800352a <HAL_GPIO_Init+0x216>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a4d      	ldr	r2, [pc, #308]	; (800363c <HAL_GPIO_Init+0x328>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d00d      	beq.n	8003526 <HAL_GPIO_Init+0x212>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a4c      	ldr	r2, [pc, #304]	; (8003640 <HAL_GPIO_Init+0x32c>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d007      	beq.n	8003522 <HAL_GPIO_Init+0x20e>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a4b      	ldr	r2, [pc, #300]	; (8003644 <HAL_GPIO_Init+0x330>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d101      	bne.n	800351e <HAL_GPIO_Init+0x20a>
 800351a:	2307      	movs	r3, #7
 800351c:	e00e      	b.n	800353c <HAL_GPIO_Init+0x228>
 800351e:	2308      	movs	r3, #8
 8003520:	e00c      	b.n	800353c <HAL_GPIO_Init+0x228>
 8003522:	2306      	movs	r3, #6
 8003524:	e00a      	b.n	800353c <HAL_GPIO_Init+0x228>
 8003526:	2305      	movs	r3, #5
 8003528:	e008      	b.n	800353c <HAL_GPIO_Init+0x228>
 800352a:	2304      	movs	r3, #4
 800352c:	e006      	b.n	800353c <HAL_GPIO_Init+0x228>
 800352e:	2303      	movs	r3, #3
 8003530:	e004      	b.n	800353c <HAL_GPIO_Init+0x228>
 8003532:	2302      	movs	r3, #2
 8003534:	e002      	b.n	800353c <HAL_GPIO_Init+0x228>
 8003536:	2301      	movs	r3, #1
 8003538:	e000      	b.n	800353c <HAL_GPIO_Init+0x228>
 800353a:	2300      	movs	r3, #0
 800353c:	69fa      	ldr	r2, [r7, #28]
 800353e:	f002 0203 	and.w	r2, r2, #3
 8003542:	0092      	lsls	r2, r2, #2
 8003544:	4093      	lsls	r3, r2
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	4313      	orrs	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800354c:	4935      	ldr	r1, [pc, #212]	; (8003624 <HAL_GPIO_Init+0x310>)
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	089b      	lsrs	r3, r3, #2
 8003552:	3302      	adds	r3, #2
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800355a:	4b3b      	ldr	r3, [pc, #236]	; (8003648 <HAL_GPIO_Init+0x334>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	43db      	mvns	r3, r3
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	4013      	ands	r3, r2
 8003568:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d003      	beq.n	800357e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	4313      	orrs	r3, r2
 800357c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800357e:	4a32      	ldr	r2, [pc, #200]	; (8003648 <HAL_GPIO_Init+0x334>)
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003584:	4b30      	ldr	r3, [pc, #192]	; (8003648 <HAL_GPIO_Init+0x334>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	43db      	mvns	r3, r3
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	4013      	ands	r3, r2
 8003592:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d003      	beq.n	80035a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035a8:	4a27      	ldr	r2, [pc, #156]	; (8003648 <HAL_GPIO_Init+0x334>)
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035ae:	4b26      	ldr	r3, [pc, #152]	; (8003648 <HAL_GPIO_Init+0x334>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	43db      	mvns	r3, r3
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	4013      	ands	r3, r2
 80035bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035d2:	4a1d      	ldr	r2, [pc, #116]	; (8003648 <HAL_GPIO_Init+0x334>)
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035d8:	4b1b      	ldr	r3, [pc, #108]	; (8003648 <HAL_GPIO_Init+0x334>)
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	43db      	mvns	r3, r3
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	4013      	ands	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d003      	beq.n	80035fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035fc:	4a12      	ldr	r2, [pc, #72]	; (8003648 <HAL_GPIO_Init+0x334>)
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	3301      	adds	r3, #1
 8003606:	61fb      	str	r3, [r7, #28]
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	2b0f      	cmp	r3, #15
 800360c:	f67f ae90 	bls.w	8003330 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003610:	bf00      	nop
 8003612:	bf00      	nop
 8003614:	3724      	adds	r7, #36	; 0x24
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	40023800 	.word	0x40023800
 8003624:	40013800 	.word	0x40013800
 8003628:	40020000 	.word	0x40020000
 800362c:	40020400 	.word	0x40020400
 8003630:	40020800 	.word	0x40020800
 8003634:	40020c00 	.word	0x40020c00
 8003638:	40021000 	.word	0x40021000
 800363c:	40021400 	.word	0x40021400
 8003640:	40021800 	.word	0x40021800
 8003644:	40021c00 	.word	0x40021c00
 8003648:	40013c00 	.word	0x40013c00

0800364c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	460b      	mov	r3, r1
 8003656:	807b      	strh	r3, [r7, #2]
 8003658:	4613      	mov	r3, r2
 800365a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800365c:	787b      	ldrb	r3, [r7, #1]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003662:	887a      	ldrh	r2, [r7, #2]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003668:	e003      	b.n	8003672 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800366a:	887b      	ldrh	r3, [r7, #2]
 800366c:	041a      	lsls	r2, r3, #16
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	619a      	str	r2, [r3, #24]
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
	...

08003680 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e12b      	b.n	80038ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d106      	bne.n	80036ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7fd fd78 	bl	800119c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2224      	movs	r2, #36	; 0x24
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 0201 	bic.w	r2, r2, #1
 80036c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036e4:	f000 fd5c 	bl	80041a0 <HAL_RCC_GetPCLK1Freq>
 80036e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	4a81      	ldr	r2, [pc, #516]	; (80038f4 <HAL_I2C_Init+0x274>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d807      	bhi.n	8003704 <HAL_I2C_Init+0x84>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4a80      	ldr	r2, [pc, #512]	; (80038f8 <HAL_I2C_Init+0x278>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	bf94      	ite	ls
 80036fc:	2301      	movls	r3, #1
 80036fe:	2300      	movhi	r3, #0
 8003700:	b2db      	uxtb	r3, r3
 8003702:	e006      	b.n	8003712 <HAL_I2C_Init+0x92>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	4a7d      	ldr	r2, [pc, #500]	; (80038fc <HAL_I2C_Init+0x27c>)
 8003708:	4293      	cmp	r3, r2
 800370a:	bf94      	ite	ls
 800370c:	2301      	movls	r3, #1
 800370e:	2300      	movhi	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e0e7      	b.n	80038ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	4a78      	ldr	r2, [pc, #480]	; (8003900 <HAL_I2C_Init+0x280>)
 800371e:	fba2 2303 	umull	r2, r3, r2, r3
 8003722:	0c9b      	lsrs	r3, r3, #18
 8003724:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	430a      	orrs	r2, r1
 8003738:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	4a6a      	ldr	r2, [pc, #424]	; (80038f4 <HAL_I2C_Init+0x274>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d802      	bhi.n	8003754 <HAL_I2C_Init+0xd4>
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	3301      	adds	r3, #1
 8003752:	e009      	b.n	8003768 <HAL_I2C_Init+0xe8>
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800375a:	fb02 f303 	mul.w	r3, r2, r3
 800375e:	4a69      	ldr	r2, [pc, #420]	; (8003904 <HAL_I2C_Init+0x284>)
 8003760:	fba2 2303 	umull	r2, r3, r2, r3
 8003764:	099b      	lsrs	r3, r3, #6
 8003766:	3301      	adds	r3, #1
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	6812      	ldr	r2, [r2, #0]
 800376c:	430b      	orrs	r3, r1
 800376e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800377a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	495c      	ldr	r1, [pc, #368]	; (80038f4 <HAL_I2C_Init+0x274>)
 8003784:	428b      	cmp	r3, r1
 8003786:	d819      	bhi.n	80037bc <HAL_I2C_Init+0x13c>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	1e59      	subs	r1, r3, #1
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	fbb1 f3f3 	udiv	r3, r1, r3
 8003796:	1c59      	adds	r1, r3, #1
 8003798:	f640 73fc 	movw	r3, #4092	; 0xffc
 800379c:	400b      	ands	r3, r1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00a      	beq.n	80037b8 <HAL_I2C_Init+0x138>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	1e59      	subs	r1, r3, #1
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80037b0:	3301      	adds	r3, #1
 80037b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037b6:	e051      	b.n	800385c <HAL_I2C_Init+0x1dc>
 80037b8:	2304      	movs	r3, #4
 80037ba:	e04f      	b.n	800385c <HAL_I2C_Init+0x1dc>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d111      	bne.n	80037e8 <HAL_I2C_Init+0x168>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	1e58      	subs	r0, r3, #1
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6859      	ldr	r1, [r3, #4]
 80037cc:	460b      	mov	r3, r1
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	440b      	add	r3, r1
 80037d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80037d6:	3301      	adds	r3, #1
 80037d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037dc:	2b00      	cmp	r3, #0
 80037de:	bf0c      	ite	eq
 80037e0:	2301      	moveq	r3, #1
 80037e2:	2300      	movne	r3, #0
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	e012      	b.n	800380e <HAL_I2C_Init+0x18e>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	1e58      	subs	r0, r3, #1
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6859      	ldr	r1, [r3, #4]
 80037f0:	460b      	mov	r3, r1
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	440b      	add	r3, r1
 80037f6:	0099      	lsls	r1, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80037fe:	3301      	adds	r3, #1
 8003800:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003804:	2b00      	cmp	r3, #0
 8003806:	bf0c      	ite	eq
 8003808:	2301      	moveq	r3, #1
 800380a:	2300      	movne	r3, #0
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <HAL_I2C_Init+0x196>
 8003812:	2301      	movs	r3, #1
 8003814:	e022      	b.n	800385c <HAL_I2C_Init+0x1dc>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10e      	bne.n	800383c <HAL_I2C_Init+0x1bc>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	1e58      	subs	r0, r3, #1
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6859      	ldr	r1, [r3, #4]
 8003826:	460b      	mov	r3, r1
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	440b      	add	r3, r1
 800382c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003830:	3301      	adds	r3, #1
 8003832:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800383a:	e00f      	b.n	800385c <HAL_I2C_Init+0x1dc>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	1e58      	subs	r0, r3, #1
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6859      	ldr	r1, [r3, #4]
 8003844:	460b      	mov	r3, r1
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	440b      	add	r3, r1
 800384a:	0099      	lsls	r1, r3, #2
 800384c:	440b      	add	r3, r1
 800384e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003852:	3301      	adds	r3, #1
 8003854:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003858:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800385c:	6879      	ldr	r1, [r7, #4]
 800385e:	6809      	ldr	r1, [r1, #0]
 8003860:	4313      	orrs	r3, r2
 8003862:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	69da      	ldr	r2, [r3, #28]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	431a      	orrs	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	430a      	orrs	r2, r1
 800387e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800388a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	6911      	ldr	r1, [r2, #16]
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	68d2      	ldr	r2, [r2, #12]
 8003896:	4311      	orrs	r1, r2
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	6812      	ldr	r2, [r2, #0]
 800389c:	430b      	orrs	r3, r1
 800389e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	695a      	ldr	r2, [r3, #20]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	431a      	orrs	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	430a      	orrs	r2, r1
 80038ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f042 0201 	orr.w	r2, r2, #1
 80038ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2220      	movs	r2, #32
 80038d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	000186a0 	.word	0x000186a0
 80038f8:	001e847f 	.word	0x001e847f
 80038fc:	003d08ff 	.word	0x003d08ff
 8003900:	431bde83 	.word	0x431bde83
 8003904:	10624dd3 	.word	0x10624dd3

08003908 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e264      	b.n	8003de4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d075      	beq.n	8003a12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003926:	4ba3      	ldr	r3, [pc, #652]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 030c 	and.w	r3, r3, #12
 800392e:	2b04      	cmp	r3, #4
 8003930:	d00c      	beq.n	800394c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003932:	4ba0      	ldr	r3, [pc, #640]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800393a:	2b08      	cmp	r3, #8
 800393c:	d112      	bne.n	8003964 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800393e:	4b9d      	ldr	r3, [pc, #628]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003946:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800394a:	d10b      	bne.n	8003964 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800394c:	4b99      	ldr	r3, [pc, #612]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d05b      	beq.n	8003a10 <HAL_RCC_OscConfig+0x108>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d157      	bne.n	8003a10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e23f      	b.n	8003de4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800396c:	d106      	bne.n	800397c <HAL_RCC_OscConfig+0x74>
 800396e:	4b91      	ldr	r3, [pc, #580]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a90      	ldr	r2, [pc, #576]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 8003974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003978:	6013      	str	r3, [r2, #0]
 800397a:	e01d      	b.n	80039b8 <HAL_RCC_OscConfig+0xb0>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003984:	d10c      	bne.n	80039a0 <HAL_RCC_OscConfig+0x98>
 8003986:	4b8b      	ldr	r3, [pc, #556]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a8a      	ldr	r2, [pc, #552]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 800398c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003990:	6013      	str	r3, [r2, #0]
 8003992:	4b88      	ldr	r3, [pc, #544]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a87      	ldr	r2, [pc, #540]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 8003998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800399c:	6013      	str	r3, [r2, #0]
 800399e:	e00b      	b.n	80039b8 <HAL_RCC_OscConfig+0xb0>
 80039a0:	4b84      	ldr	r3, [pc, #528]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a83      	ldr	r2, [pc, #524]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 80039a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039aa:	6013      	str	r3, [r2, #0]
 80039ac:	4b81      	ldr	r3, [pc, #516]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a80      	ldr	r2, [pc, #512]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 80039b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d013      	beq.n	80039e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c0:	f7fe ff64 	bl	800288c <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039c8:	f7fe ff60 	bl	800288c <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b64      	cmp	r3, #100	; 0x64
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e204      	b.n	8003de4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039da:	4b76      	ldr	r3, [pc, #472]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d0f0      	beq.n	80039c8 <HAL_RCC_OscConfig+0xc0>
 80039e6:	e014      	b.n	8003a12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e8:	f7fe ff50 	bl	800288c <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039f0:	f7fe ff4c 	bl	800288c <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b64      	cmp	r3, #100	; 0x64
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e1f0      	b.n	8003de4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a02:	4b6c      	ldr	r3, [pc, #432]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1f0      	bne.n	80039f0 <HAL_RCC_OscConfig+0xe8>
 8003a0e:	e000      	b.n	8003a12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d063      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a1e:	4b65      	ldr	r3, [pc, #404]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f003 030c 	and.w	r3, r3, #12
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00b      	beq.n	8003a42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a2a:	4b62      	ldr	r3, [pc, #392]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a32:	2b08      	cmp	r3, #8
 8003a34:	d11c      	bne.n	8003a70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a36:	4b5f      	ldr	r3, [pc, #380]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d116      	bne.n	8003a70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a42:	4b5c      	ldr	r3, [pc, #368]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d005      	beq.n	8003a5a <HAL_RCC_OscConfig+0x152>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d001      	beq.n	8003a5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e1c4      	b.n	8003de4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a5a:	4b56      	ldr	r3, [pc, #344]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	4952      	ldr	r1, [pc, #328]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a6e:	e03a      	b.n	8003ae6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d020      	beq.n	8003aba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a78:	4b4f      	ldr	r3, [pc, #316]	; (8003bb8 <HAL_RCC_OscConfig+0x2b0>)
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7e:	f7fe ff05 	bl	800288c <HAL_GetTick>
 8003a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a84:	e008      	b.n	8003a98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a86:	f7fe ff01 	bl	800288c <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d901      	bls.n	8003a98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e1a5      	b.n	8003de4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a98:	4b46      	ldr	r3, [pc, #280]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d0f0      	beq.n	8003a86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa4:	4b43      	ldr	r3, [pc, #268]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	4940      	ldr	r1, [pc, #256]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	600b      	str	r3, [r1, #0]
 8003ab8:	e015      	b.n	8003ae6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aba:	4b3f      	ldr	r3, [pc, #252]	; (8003bb8 <HAL_RCC_OscConfig+0x2b0>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac0:	f7fe fee4 	bl	800288c <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ac8:	f7fe fee0 	bl	800288c <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e184      	b.n	8003de4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ada:	4b36      	ldr	r3, [pc, #216]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1f0      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0308 	and.w	r3, r3, #8
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d030      	beq.n	8003b54 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d016      	beq.n	8003b28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003afa:	4b30      	ldr	r3, [pc, #192]	; (8003bbc <HAL_RCC_OscConfig+0x2b4>)
 8003afc:	2201      	movs	r2, #1
 8003afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b00:	f7fe fec4 	bl	800288c <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b08:	f7fe fec0 	bl	800288c <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e164      	b.n	8003de4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b1a:	4b26      	ldr	r3, [pc, #152]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 8003b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d0f0      	beq.n	8003b08 <HAL_RCC_OscConfig+0x200>
 8003b26:	e015      	b.n	8003b54 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b28:	4b24      	ldr	r3, [pc, #144]	; (8003bbc <HAL_RCC_OscConfig+0x2b4>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b2e:	f7fe fead 	bl	800288c <HAL_GetTick>
 8003b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b34:	e008      	b.n	8003b48 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b36:	f7fe fea9 	bl	800288c <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e14d      	b.n	8003de4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b48:	4b1a      	ldr	r3, [pc, #104]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 8003b4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1f0      	bne.n	8003b36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0304 	and.w	r3, r3, #4
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f000 80a0 	beq.w	8003ca2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b62:	2300      	movs	r3, #0
 8003b64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b66:	4b13      	ldr	r3, [pc, #76]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10f      	bne.n	8003b92 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b72:	2300      	movs	r3, #0
 8003b74:	60bb      	str	r3, [r7, #8]
 8003b76:	4b0f      	ldr	r3, [pc, #60]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	4a0e      	ldr	r2, [pc, #56]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 8003b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b80:	6413      	str	r3, [r2, #64]	; 0x40
 8003b82:	4b0c      	ldr	r3, [pc, #48]	; (8003bb4 <HAL_RCC_OscConfig+0x2ac>)
 8003b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b8a:	60bb      	str	r3, [r7, #8]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b92:	4b0b      	ldr	r3, [pc, #44]	; (8003bc0 <HAL_RCC_OscConfig+0x2b8>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d121      	bne.n	8003be2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b9e:	4b08      	ldr	r3, [pc, #32]	; (8003bc0 <HAL_RCC_OscConfig+0x2b8>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a07      	ldr	r2, [pc, #28]	; (8003bc0 <HAL_RCC_OscConfig+0x2b8>)
 8003ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ba8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003baa:	f7fe fe6f 	bl	800288c <HAL_GetTick>
 8003bae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb0:	e011      	b.n	8003bd6 <HAL_RCC_OscConfig+0x2ce>
 8003bb2:	bf00      	nop
 8003bb4:	40023800 	.word	0x40023800
 8003bb8:	42470000 	.word	0x42470000
 8003bbc:	42470e80 	.word	0x42470e80
 8003bc0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bc4:	f7fe fe62 	bl	800288c <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e106      	b.n	8003de4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd6:	4b85      	ldr	r3, [pc, #532]	; (8003dec <HAL_RCC_OscConfig+0x4e4>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d0f0      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d106      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x2f0>
 8003bea:	4b81      	ldr	r3, [pc, #516]	; (8003df0 <HAL_RCC_OscConfig+0x4e8>)
 8003bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bee:	4a80      	ldr	r2, [pc, #512]	; (8003df0 <HAL_RCC_OscConfig+0x4e8>)
 8003bf0:	f043 0301 	orr.w	r3, r3, #1
 8003bf4:	6713      	str	r3, [r2, #112]	; 0x70
 8003bf6:	e01c      	b.n	8003c32 <HAL_RCC_OscConfig+0x32a>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	2b05      	cmp	r3, #5
 8003bfe:	d10c      	bne.n	8003c1a <HAL_RCC_OscConfig+0x312>
 8003c00:	4b7b      	ldr	r3, [pc, #492]	; (8003df0 <HAL_RCC_OscConfig+0x4e8>)
 8003c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c04:	4a7a      	ldr	r2, [pc, #488]	; (8003df0 <HAL_RCC_OscConfig+0x4e8>)
 8003c06:	f043 0304 	orr.w	r3, r3, #4
 8003c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c0c:	4b78      	ldr	r3, [pc, #480]	; (8003df0 <HAL_RCC_OscConfig+0x4e8>)
 8003c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c10:	4a77      	ldr	r2, [pc, #476]	; (8003df0 <HAL_RCC_OscConfig+0x4e8>)
 8003c12:	f043 0301 	orr.w	r3, r3, #1
 8003c16:	6713      	str	r3, [r2, #112]	; 0x70
 8003c18:	e00b      	b.n	8003c32 <HAL_RCC_OscConfig+0x32a>
 8003c1a:	4b75      	ldr	r3, [pc, #468]	; (8003df0 <HAL_RCC_OscConfig+0x4e8>)
 8003c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1e:	4a74      	ldr	r2, [pc, #464]	; (8003df0 <HAL_RCC_OscConfig+0x4e8>)
 8003c20:	f023 0301 	bic.w	r3, r3, #1
 8003c24:	6713      	str	r3, [r2, #112]	; 0x70
 8003c26:	4b72      	ldr	r3, [pc, #456]	; (8003df0 <HAL_RCC_OscConfig+0x4e8>)
 8003c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2a:	4a71      	ldr	r2, [pc, #452]	; (8003df0 <HAL_RCC_OscConfig+0x4e8>)
 8003c2c:	f023 0304 	bic.w	r3, r3, #4
 8003c30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d015      	beq.n	8003c66 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c3a:	f7fe fe27 	bl	800288c <HAL_GetTick>
 8003c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c40:	e00a      	b.n	8003c58 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c42:	f7fe fe23 	bl	800288c <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d901      	bls.n	8003c58 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e0c5      	b.n	8003de4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c58:	4b65      	ldr	r3, [pc, #404]	; (8003df0 <HAL_RCC_OscConfig+0x4e8>)
 8003c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d0ee      	beq.n	8003c42 <HAL_RCC_OscConfig+0x33a>
 8003c64:	e014      	b.n	8003c90 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c66:	f7fe fe11 	bl	800288c <HAL_GetTick>
 8003c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c6c:	e00a      	b.n	8003c84 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c6e:	f7fe fe0d 	bl	800288c <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d901      	bls.n	8003c84 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e0af      	b.n	8003de4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c84:	4b5a      	ldr	r3, [pc, #360]	; (8003df0 <HAL_RCC_OscConfig+0x4e8>)
 8003c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1ee      	bne.n	8003c6e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c90:	7dfb      	ldrb	r3, [r7, #23]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d105      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c96:	4b56      	ldr	r3, [pc, #344]	; (8003df0 <HAL_RCC_OscConfig+0x4e8>)
 8003c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9a:	4a55      	ldr	r2, [pc, #340]	; (8003df0 <HAL_RCC_OscConfig+0x4e8>)
 8003c9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ca0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f000 809b 	beq.w	8003de2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cac:	4b50      	ldr	r3, [pc, #320]	; (8003df0 <HAL_RCC_OscConfig+0x4e8>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f003 030c 	and.w	r3, r3, #12
 8003cb4:	2b08      	cmp	r3, #8
 8003cb6:	d05c      	beq.n	8003d72 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d141      	bne.n	8003d44 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cc0:	4b4c      	ldr	r3, [pc, #304]	; (8003df4 <HAL_RCC_OscConfig+0x4ec>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc6:	f7fe fde1 	bl	800288c <HAL_GetTick>
 8003cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ccc:	e008      	b.n	8003ce0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cce:	f7fe fddd 	bl	800288c <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d901      	bls.n	8003ce0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e081      	b.n	8003de4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ce0:	4b43      	ldr	r3, [pc, #268]	; (8003df0 <HAL_RCC_OscConfig+0x4e8>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1f0      	bne.n	8003cce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	69da      	ldr	r2, [r3, #28]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfa:	019b      	lsls	r3, r3, #6
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d02:	085b      	lsrs	r3, r3, #1
 8003d04:	3b01      	subs	r3, #1
 8003d06:	041b      	lsls	r3, r3, #16
 8003d08:	431a      	orrs	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0e:	061b      	lsls	r3, r3, #24
 8003d10:	4937      	ldr	r1, [pc, #220]	; (8003df0 <HAL_RCC_OscConfig+0x4e8>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d16:	4b37      	ldr	r3, [pc, #220]	; (8003df4 <HAL_RCC_OscConfig+0x4ec>)
 8003d18:	2201      	movs	r2, #1
 8003d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d1c:	f7fe fdb6 	bl	800288c <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d22:	e008      	b.n	8003d36 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d24:	f7fe fdb2 	bl	800288c <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e056      	b.n	8003de4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d36:	4b2e      	ldr	r3, [pc, #184]	; (8003df0 <HAL_RCC_OscConfig+0x4e8>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d0f0      	beq.n	8003d24 <HAL_RCC_OscConfig+0x41c>
 8003d42:	e04e      	b.n	8003de2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d44:	4b2b      	ldr	r3, [pc, #172]	; (8003df4 <HAL_RCC_OscConfig+0x4ec>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d4a:	f7fe fd9f 	bl	800288c <HAL_GetTick>
 8003d4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d50:	e008      	b.n	8003d64 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d52:	f7fe fd9b 	bl	800288c <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d901      	bls.n	8003d64 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e03f      	b.n	8003de4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d64:	4b22      	ldr	r3, [pc, #136]	; (8003df0 <HAL_RCC_OscConfig+0x4e8>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1f0      	bne.n	8003d52 <HAL_RCC_OscConfig+0x44a>
 8003d70:	e037      	b.n	8003de2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d101      	bne.n	8003d7e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e032      	b.n	8003de4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d7e:	4b1c      	ldr	r3, [pc, #112]	; (8003df0 <HAL_RCC_OscConfig+0x4e8>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d028      	beq.n	8003dde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d121      	bne.n	8003dde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d11a      	bne.n	8003dde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003dae:	4013      	ands	r3, r2
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003db4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d111      	bne.n	8003dde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc4:	085b      	lsrs	r3, r3, #1
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d107      	bne.n	8003dde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d001      	beq.n	8003de2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e000      	b.n	8003de4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3718      	adds	r7, #24
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	40007000 	.word	0x40007000
 8003df0:	40023800 	.word	0x40023800
 8003df4:	42470060 	.word	0x42470060

08003df8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d101      	bne.n	8003e0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e0cc      	b.n	8003fa6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e0c:	4b68      	ldr	r3, [pc, #416]	; (8003fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0307 	and.w	r3, r3, #7
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d90c      	bls.n	8003e34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e1a:	4b65      	ldr	r3, [pc, #404]	; (8003fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	b2d2      	uxtb	r2, r2
 8003e20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e22:	4b63      	ldr	r3, [pc, #396]	; (8003fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0307 	and.w	r3, r3, #7
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d001      	beq.n	8003e34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e0b8      	b.n	8003fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d020      	beq.n	8003e82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0304 	and.w	r3, r3, #4
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d005      	beq.n	8003e58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e4c:	4b59      	ldr	r3, [pc, #356]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	4a58      	ldr	r2, [pc, #352]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0308 	and.w	r3, r3, #8
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d005      	beq.n	8003e70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e64:	4b53      	ldr	r3, [pc, #332]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	4a52      	ldr	r2, [pc, #328]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e70:	4b50      	ldr	r3, [pc, #320]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	494d      	ldr	r1, [pc, #308]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d044      	beq.n	8003f18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d107      	bne.n	8003ea6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e96:	4b47      	ldr	r3, [pc, #284]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d119      	bne.n	8003ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e07f      	b.n	8003fa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d003      	beq.n	8003eb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eb2:	2b03      	cmp	r3, #3
 8003eb4:	d107      	bne.n	8003ec6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eb6:	4b3f      	ldr	r3, [pc, #252]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d109      	bne.n	8003ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e06f      	b.n	8003fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ec6:	4b3b      	ldr	r3, [pc, #236]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e067      	b.n	8003fa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ed6:	4b37      	ldr	r3, [pc, #220]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f023 0203 	bic.w	r2, r3, #3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	4934      	ldr	r1, [pc, #208]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ee8:	f7fe fcd0 	bl	800288c <HAL_GetTick>
 8003eec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eee:	e00a      	b.n	8003f06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ef0:	f7fe fccc 	bl	800288c <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e04f      	b.n	8003fa6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f06:	4b2b      	ldr	r3, [pc, #172]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f003 020c 	and.w	r2, r3, #12
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d1eb      	bne.n	8003ef0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f18:	4b25      	ldr	r3, [pc, #148]	; (8003fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0307 	and.w	r3, r3, #7
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d20c      	bcs.n	8003f40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f26:	4b22      	ldr	r3, [pc, #136]	; (8003fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	b2d2      	uxtb	r2, r2
 8003f2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f2e:	4b20      	ldr	r3, [pc, #128]	; (8003fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0307 	and.w	r3, r3, #7
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d001      	beq.n	8003f40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e032      	b.n	8003fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0304 	and.w	r3, r3, #4
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d008      	beq.n	8003f5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f4c:	4b19      	ldr	r3, [pc, #100]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	4916      	ldr	r1, [pc, #88]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0308 	and.w	r3, r3, #8
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d009      	beq.n	8003f7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f6a:	4b12      	ldr	r3, [pc, #72]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	00db      	lsls	r3, r3, #3
 8003f78:	490e      	ldr	r1, [pc, #56]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f7e:	f000 f821 	bl	8003fc4 <HAL_RCC_GetSysClockFreq>
 8003f82:	4602      	mov	r2, r0
 8003f84:	4b0b      	ldr	r3, [pc, #44]	; (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	091b      	lsrs	r3, r3, #4
 8003f8a:	f003 030f 	and.w	r3, r3, #15
 8003f8e:	490a      	ldr	r1, [pc, #40]	; (8003fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8003f90:	5ccb      	ldrb	r3, [r1, r3]
 8003f92:	fa22 f303 	lsr.w	r3, r2, r3
 8003f96:	4a09      	ldr	r2, [pc, #36]	; (8003fbc <HAL_RCC_ClockConfig+0x1c4>)
 8003f98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f9a:	4b09      	ldr	r3, [pc, #36]	; (8003fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7fe fc30 	bl	8002804 <HAL_InitTick>

  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3710      	adds	r7, #16
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	40023c00 	.word	0x40023c00
 8003fb4:	40023800 	.word	0x40023800
 8003fb8:	08009628 	.word	0x08009628
 8003fbc:	20000008 	.word	0x20000008
 8003fc0:	2000000c 	.word	0x2000000c

08003fc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fc4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003fc8:	b084      	sub	sp, #16
 8003fca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	607b      	str	r3, [r7, #4]
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	60fb      	str	r3, [r7, #12]
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fdc:	4b67      	ldr	r3, [pc, #412]	; (800417c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f003 030c 	and.w	r3, r3, #12
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	d00d      	beq.n	8004004 <HAL_RCC_GetSysClockFreq+0x40>
 8003fe8:	2b08      	cmp	r3, #8
 8003fea:	f200 80bd 	bhi.w	8004168 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d002      	beq.n	8003ff8 <HAL_RCC_GetSysClockFreq+0x34>
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	d003      	beq.n	8003ffe <HAL_RCC_GetSysClockFreq+0x3a>
 8003ff6:	e0b7      	b.n	8004168 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ff8:	4b61      	ldr	r3, [pc, #388]	; (8004180 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003ffa:	60bb      	str	r3, [r7, #8]
       break;
 8003ffc:	e0b7      	b.n	800416e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ffe:	4b61      	ldr	r3, [pc, #388]	; (8004184 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004000:	60bb      	str	r3, [r7, #8]
      break;
 8004002:	e0b4      	b.n	800416e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004004:	4b5d      	ldr	r3, [pc, #372]	; (800417c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800400c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800400e:	4b5b      	ldr	r3, [pc, #364]	; (800417c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d04d      	beq.n	80040b6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800401a:	4b58      	ldr	r3, [pc, #352]	; (800417c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	099b      	lsrs	r3, r3, #6
 8004020:	461a      	mov	r2, r3
 8004022:	f04f 0300 	mov.w	r3, #0
 8004026:	f240 10ff 	movw	r0, #511	; 0x1ff
 800402a:	f04f 0100 	mov.w	r1, #0
 800402e:	ea02 0800 	and.w	r8, r2, r0
 8004032:	ea03 0901 	and.w	r9, r3, r1
 8004036:	4640      	mov	r0, r8
 8004038:	4649      	mov	r1, r9
 800403a:	f04f 0200 	mov.w	r2, #0
 800403e:	f04f 0300 	mov.w	r3, #0
 8004042:	014b      	lsls	r3, r1, #5
 8004044:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004048:	0142      	lsls	r2, r0, #5
 800404a:	4610      	mov	r0, r2
 800404c:	4619      	mov	r1, r3
 800404e:	ebb0 0008 	subs.w	r0, r0, r8
 8004052:	eb61 0109 	sbc.w	r1, r1, r9
 8004056:	f04f 0200 	mov.w	r2, #0
 800405a:	f04f 0300 	mov.w	r3, #0
 800405e:	018b      	lsls	r3, r1, #6
 8004060:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004064:	0182      	lsls	r2, r0, #6
 8004066:	1a12      	subs	r2, r2, r0
 8004068:	eb63 0301 	sbc.w	r3, r3, r1
 800406c:	f04f 0000 	mov.w	r0, #0
 8004070:	f04f 0100 	mov.w	r1, #0
 8004074:	00d9      	lsls	r1, r3, #3
 8004076:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800407a:	00d0      	lsls	r0, r2, #3
 800407c:	4602      	mov	r2, r0
 800407e:	460b      	mov	r3, r1
 8004080:	eb12 0208 	adds.w	r2, r2, r8
 8004084:	eb43 0309 	adc.w	r3, r3, r9
 8004088:	f04f 0000 	mov.w	r0, #0
 800408c:	f04f 0100 	mov.w	r1, #0
 8004090:	0259      	lsls	r1, r3, #9
 8004092:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004096:	0250      	lsls	r0, r2, #9
 8004098:	4602      	mov	r2, r0
 800409a:	460b      	mov	r3, r1
 800409c:	4610      	mov	r0, r2
 800409e:	4619      	mov	r1, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	461a      	mov	r2, r3
 80040a4:	f04f 0300 	mov.w	r3, #0
 80040a8:	f7fc fd9e 	bl	8000be8 <__aeabi_uldivmod>
 80040ac:	4602      	mov	r2, r0
 80040ae:	460b      	mov	r3, r1
 80040b0:	4613      	mov	r3, r2
 80040b2:	60fb      	str	r3, [r7, #12]
 80040b4:	e04a      	b.n	800414c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040b6:	4b31      	ldr	r3, [pc, #196]	; (800417c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	099b      	lsrs	r3, r3, #6
 80040bc:	461a      	mov	r2, r3
 80040be:	f04f 0300 	mov.w	r3, #0
 80040c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80040c6:	f04f 0100 	mov.w	r1, #0
 80040ca:	ea02 0400 	and.w	r4, r2, r0
 80040ce:	ea03 0501 	and.w	r5, r3, r1
 80040d2:	4620      	mov	r0, r4
 80040d4:	4629      	mov	r1, r5
 80040d6:	f04f 0200 	mov.w	r2, #0
 80040da:	f04f 0300 	mov.w	r3, #0
 80040de:	014b      	lsls	r3, r1, #5
 80040e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80040e4:	0142      	lsls	r2, r0, #5
 80040e6:	4610      	mov	r0, r2
 80040e8:	4619      	mov	r1, r3
 80040ea:	1b00      	subs	r0, r0, r4
 80040ec:	eb61 0105 	sbc.w	r1, r1, r5
 80040f0:	f04f 0200 	mov.w	r2, #0
 80040f4:	f04f 0300 	mov.w	r3, #0
 80040f8:	018b      	lsls	r3, r1, #6
 80040fa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80040fe:	0182      	lsls	r2, r0, #6
 8004100:	1a12      	subs	r2, r2, r0
 8004102:	eb63 0301 	sbc.w	r3, r3, r1
 8004106:	f04f 0000 	mov.w	r0, #0
 800410a:	f04f 0100 	mov.w	r1, #0
 800410e:	00d9      	lsls	r1, r3, #3
 8004110:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004114:	00d0      	lsls	r0, r2, #3
 8004116:	4602      	mov	r2, r0
 8004118:	460b      	mov	r3, r1
 800411a:	1912      	adds	r2, r2, r4
 800411c:	eb45 0303 	adc.w	r3, r5, r3
 8004120:	f04f 0000 	mov.w	r0, #0
 8004124:	f04f 0100 	mov.w	r1, #0
 8004128:	0299      	lsls	r1, r3, #10
 800412a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800412e:	0290      	lsls	r0, r2, #10
 8004130:	4602      	mov	r2, r0
 8004132:	460b      	mov	r3, r1
 8004134:	4610      	mov	r0, r2
 8004136:	4619      	mov	r1, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	461a      	mov	r2, r3
 800413c:	f04f 0300 	mov.w	r3, #0
 8004140:	f7fc fd52 	bl	8000be8 <__aeabi_uldivmod>
 8004144:	4602      	mov	r2, r0
 8004146:	460b      	mov	r3, r1
 8004148:	4613      	mov	r3, r2
 800414a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800414c:	4b0b      	ldr	r3, [pc, #44]	; (800417c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	0c1b      	lsrs	r3, r3, #16
 8004152:	f003 0303 	and.w	r3, r3, #3
 8004156:	3301      	adds	r3, #1
 8004158:	005b      	lsls	r3, r3, #1
 800415a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	fbb2 f3f3 	udiv	r3, r2, r3
 8004164:	60bb      	str	r3, [r7, #8]
      break;
 8004166:	e002      	b.n	800416e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004168:	4b05      	ldr	r3, [pc, #20]	; (8004180 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800416a:	60bb      	str	r3, [r7, #8]
      break;
 800416c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800416e:	68bb      	ldr	r3, [r7, #8]
}
 8004170:	4618      	mov	r0, r3
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800417a:	bf00      	nop
 800417c:	40023800 	.word	0x40023800
 8004180:	00f42400 	.word	0x00f42400
 8004184:	007a1200 	.word	0x007a1200

08004188 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004188:	b480      	push	{r7}
 800418a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800418c:	4b03      	ldr	r3, [pc, #12]	; (800419c <HAL_RCC_GetHCLKFreq+0x14>)
 800418e:	681b      	ldr	r3, [r3, #0]
}
 8004190:	4618      	mov	r0, r3
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	20000008 	.word	0x20000008

080041a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041a4:	f7ff fff0 	bl	8004188 <HAL_RCC_GetHCLKFreq>
 80041a8:	4602      	mov	r2, r0
 80041aa:	4b05      	ldr	r3, [pc, #20]	; (80041c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	0a9b      	lsrs	r3, r3, #10
 80041b0:	f003 0307 	and.w	r3, r3, #7
 80041b4:	4903      	ldr	r1, [pc, #12]	; (80041c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041b6:	5ccb      	ldrb	r3, [r1, r3]
 80041b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041bc:	4618      	mov	r0, r3
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	40023800 	.word	0x40023800
 80041c4:	08009638 	.word	0x08009638

080041c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80041cc:	f7ff ffdc 	bl	8004188 <HAL_RCC_GetHCLKFreq>
 80041d0:	4602      	mov	r2, r0
 80041d2:	4b05      	ldr	r3, [pc, #20]	; (80041e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	0b5b      	lsrs	r3, r3, #13
 80041d8:	f003 0307 	and.w	r3, r3, #7
 80041dc:	4903      	ldr	r1, [pc, #12]	; (80041ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80041de:	5ccb      	ldrb	r3, [r1, r3]
 80041e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	40023800 	.word	0x40023800
 80041ec:	08009638 	.word	0x08009638

080041f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e041      	b.n	8004286 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d106      	bne.n	800421c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f7fd ff56 	bl	80020c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2202      	movs	r2, #2
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	3304      	adds	r3, #4
 800422c:	4619      	mov	r1, r3
 800422e:	4610      	mov	r0, r2
 8004230:	f000 fd3e 	bl	8004cb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3708      	adds	r7, #8
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b082      	sub	sp, #8
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d101      	bne.n	80042a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e041      	b.n	8004324 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d106      	bne.n	80042ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 f839 	bl	800432c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2202      	movs	r2, #2
 80042be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	3304      	adds	r3, #4
 80042ca:	4619      	mov	r1, r3
 80042cc:	4610      	mov	r0, r2
 80042ce:	f000 fcef 	bl	8004cb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3708      	adds	r7, #8
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d109      	bne.n	8004364 <HAL_TIM_PWM_Start+0x24>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b01      	cmp	r3, #1
 800435a:	bf14      	ite	ne
 800435c:	2301      	movne	r3, #1
 800435e:	2300      	moveq	r3, #0
 8004360:	b2db      	uxtb	r3, r3
 8004362:	e022      	b.n	80043aa <HAL_TIM_PWM_Start+0x6a>
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	2b04      	cmp	r3, #4
 8004368:	d109      	bne.n	800437e <HAL_TIM_PWM_Start+0x3e>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b01      	cmp	r3, #1
 8004374:	bf14      	ite	ne
 8004376:	2301      	movne	r3, #1
 8004378:	2300      	moveq	r3, #0
 800437a:	b2db      	uxtb	r3, r3
 800437c:	e015      	b.n	80043aa <HAL_TIM_PWM_Start+0x6a>
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	2b08      	cmp	r3, #8
 8004382:	d109      	bne.n	8004398 <HAL_TIM_PWM_Start+0x58>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800438a:	b2db      	uxtb	r3, r3
 800438c:	2b01      	cmp	r3, #1
 800438e:	bf14      	ite	ne
 8004390:	2301      	movne	r3, #1
 8004392:	2300      	moveq	r3, #0
 8004394:	b2db      	uxtb	r3, r3
 8004396:	e008      	b.n	80043aa <HAL_TIM_PWM_Start+0x6a>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	bf14      	ite	ne
 80043a4:	2301      	movne	r3, #1
 80043a6:	2300      	moveq	r3, #0
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e07c      	b.n	80044ac <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d104      	bne.n	80043c2 <HAL_TIM_PWM_Start+0x82>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2202      	movs	r2, #2
 80043bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043c0:	e013      	b.n	80043ea <HAL_TIM_PWM_Start+0xaa>
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	2b04      	cmp	r3, #4
 80043c6:	d104      	bne.n	80043d2 <HAL_TIM_PWM_Start+0x92>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2202      	movs	r2, #2
 80043cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043d0:	e00b      	b.n	80043ea <HAL_TIM_PWM_Start+0xaa>
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	2b08      	cmp	r3, #8
 80043d6:	d104      	bne.n	80043e2 <HAL_TIM_PWM_Start+0xa2>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2202      	movs	r2, #2
 80043dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043e0:	e003      	b.n	80043ea <HAL_TIM_PWM_Start+0xaa>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2202      	movs	r2, #2
 80043e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2201      	movs	r2, #1
 80043f0:	6839      	ldr	r1, [r7, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 ff46 	bl	8005284 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a2d      	ldr	r2, [pc, #180]	; (80044b4 <HAL_TIM_PWM_Start+0x174>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d004      	beq.n	800440c <HAL_TIM_PWM_Start+0xcc>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a2c      	ldr	r2, [pc, #176]	; (80044b8 <HAL_TIM_PWM_Start+0x178>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d101      	bne.n	8004410 <HAL_TIM_PWM_Start+0xd0>
 800440c:	2301      	movs	r3, #1
 800440e:	e000      	b.n	8004412 <HAL_TIM_PWM_Start+0xd2>
 8004410:	2300      	movs	r3, #0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d007      	beq.n	8004426 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004424:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a22      	ldr	r2, [pc, #136]	; (80044b4 <HAL_TIM_PWM_Start+0x174>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d022      	beq.n	8004476 <HAL_TIM_PWM_Start+0x136>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004438:	d01d      	beq.n	8004476 <HAL_TIM_PWM_Start+0x136>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a1f      	ldr	r2, [pc, #124]	; (80044bc <HAL_TIM_PWM_Start+0x17c>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d018      	beq.n	8004476 <HAL_TIM_PWM_Start+0x136>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a1d      	ldr	r2, [pc, #116]	; (80044c0 <HAL_TIM_PWM_Start+0x180>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d013      	beq.n	8004476 <HAL_TIM_PWM_Start+0x136>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a1c      	ldr	r2, [pc, #112]	; (80044c4 <HAL_TIM_PWM_Start+0x184>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d00e      	beq.n	8004476 <HAL_TIM_PWM_Start+0x136>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a16      	ldr	r2, [pc, #88]	; (80044b8 <HAL_TIM_PWM_Start+0x178>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d009      	beq.n	8004476 <HAL_TIM_PWM_Start+0x136>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a18      	ldr	r2, [pc, #96]	; (80044c8 <HAL_TIM_PWM_Start+0x188>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d004      	beq.n	8004476 <HAL_TIM_PWM_Start+0x136>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a16      	ldr	r2, [pc, #88]	; (80044cc <HAL_TIM_PWM_Start+0x18c>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d111      	bne.n	800449a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f003 0307 	and.w	r3, r3, #7
 8004480:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2b06      	cmp	r3, #6
 8004486:	d010      	beq.n	80044aa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f042 0201 	orr.w	r2, r2, #1
 8004496:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004498:	e007      	b.n	80044aa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f042 0201 	orr.w	r2, r2, #1
 80044a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3710      	adds	r7, #16
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	40010000 	.word	0x40010000
 80044b8:	40010400 	.word	0x40010400
 80044bc:	40000400 	.word	0x40000400
 80044c0:	40000800 	.word	0x40000800
 80044c4:	40000c00 	.word	0x40000c00
 80044c8:	40014000 	.word	0x40014000
 80044cc:	40001800 	.word	0x40001800

080044d0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d101      	bne.n	80044e4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e097      	b.n	8004614 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d106      	bne.n	80044fe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f7fd fe23 	bl	8002144 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2202      	movs	r2, #2
 8004502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	6812      	ldr	r2, [r2, #0]
 8004510:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004514:	f023 0307 	bic.w	r3, r3, #7
 8004518:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	3304      	adds	r3, #4
 8004522:	4619      	mov	r1, r3
 8004524:	4610      	mov	r0, r2
 8004526:	f000 fbc3 	bl	8004cb0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	4313      	orrs	r3, r2
 800454a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004552:	f023 0303 	bic.w	r3, r3, #3
 8004556:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	689a      	ldr	r2, [r3, #8]
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	021b      	lsls	r3, r3, #8
 8004562:	4313      	orrs	r3, r2
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	4313      	orrs	r3, r2
 8004568:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004570:	f023 030c 	bic.w	r3, r3, #12
 8004574:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800457c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004580:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	68da      	ldr	r2, [r3, #12]
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	021b      	lsls	r3, r3, #8
 800458c:	4313      	orrs	r3, r2
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	4313      	orrs	r3, r2
 8004592:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	011a      	lsls	r2, r3, #4
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	031b      	lsls	r3, r3, #12
 80045a0:	4313      	orrs	r3, r2
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80045ae:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80045b6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685a      	ldr	r2, [r3, #4]
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	011b      	lsls	r3, r3, #4
 80045c2:	4313      	orrs	r3, r2
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3718      	adds	r7, #24
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800462c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004634:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800463c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004644:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d110      	bne.n	800466e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800464c:	7bfb      	ldrb	r3, [r7, #15]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d102      	bne.n	8004658 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004652:	7b7b      	ldrb	r3, [r7, #13]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d001      	beq.n	800465c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e069      	b.n	8004730 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2202      	movs	r2, #2
 8004660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2202      	movs	r2, #2
 8004668:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800466c:	e031      	b.n	80046d2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	2b04      	cmp	r3, #4
 8004672:	d110      	bne.n	8004696 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004674:	7bbb      	ldrb	r3, [r7, #14]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d102      	bne.n	8004680 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800467a:	7b3b      	ldrb	r3, [r7, #12]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d001      	beq.n	8004684 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e055      	b.n	8004730 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2202      	movs	r2, #2
 8004688:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2202      	movs	r2, #2
 8004690:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004694:	e01d      	b.n	80046d2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004696:	7bfb      	ldrb	r3, [r7, #15]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d108      	bne.n	80046ae <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800469c:	7bbb      	ldrb	r3, [r7, #14]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d105      	bne.n	80046ae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046a2:	7b7b      	ldrb	r3, [r7, #13]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d102      	bne.n	80046ae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80046a8:	7b3b      	ldrb	r3, [r7, #12]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d001      	beq.n	80046b2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e03e      	b.n	8004730 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2202      	movs	r2, #2
 80046b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2202      	movs	r2, #2
 80046be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2202      	movs	r2, #2
 80046c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2202      	movs	r2, #2
 80046ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d003      	beq.n	80046e0 <HAL_TIM_Encoder_Start+0xc4>
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	2b04      	cmp	r3, #4
 80046dc:	d008      	beq.n	80046f0 <HAL_TIM_Encoder_Start+0xd4>
 80046de:	e00f      	b.n	8004700 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2201      	movs	r2, #1
 80046e6:	2100      	movs	r1, #0
 80046e8:	4618      	mov	r0, r3
 80046ea:	f000 fdcb 	bl	8005284 <TIM_CCxChannelCmd>
      break;
 80046ee:	e016      	b.n	800471e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2201      	movs	r2, #1
 80046f6:	2104      	movs	r1, #4
 80046f8:	4618      	mov	r0, r3
 80046fa:	f000 fdc3 	bl	8005284 <TIM_CCxChannelCmd>
      break;
 80046fe:	e00e      	b.n	800471e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2201      	movs	r2, #1
 8004706:	2100      	movs	r1, #0
 8004708:	4618      	mov	r0, r3
 800470a:	f000 fdbb 	bl	8005284 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2201      	movs	r2, #1
 8004714:	2104      	movs	r1, #4
 8004716:	4618      	mov	r0, r3
 8004718:	f000 fdb4 	bl	8005284 <TIM_CCxChannelCmd>
      break;
 800471c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f042 0201 	orr.w	r2, r2, #1
 800472c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b02      	cmp	r3, #2
 800474c:	d122      	bne.n	8004794 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b02      	cmp	r3, #2
 800475a:	d11b      	bne.n	8004794 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f06f 0202 	mvn.w	r2, #2
 8004764:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2201      	movs	r2, #1
 800476a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	f003 0303 	and.w	r3, r3, #3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d003      	beq.n	8004782 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 fa7a 	bl	8004c74 <HAL_TIM_IC_CaptureCallback>
 8004780:	e005      	b.n	800478e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 fa6c 	bl	8004c60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 fa7d 	bl	8004c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	f003 0304 	and.w	r3, r3, #4
 800479e:	2b04      	cmp	r3, #4
 80047a0:	d122      	bne.n	80047e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	f003 0304 	and.w	r3, r3, #4
 80047ac:	2b04      	cmp	r3, #4
 80047ae:	d11b      	bne.n	80047e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f06f 0204 	mvn.w	r2, #4
 80047b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2202      	movs	r2, #2
 80047be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d003      	beq.n	80047d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 fa50 	bl	8004c74 <HAL_TIM_IC_CaptureCallback>
 80047d4:	e005      	b.n	80047e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 fa42 	bl	8004c60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 fa53 	bl	8004c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	f003 0308 	and.w	r3, r3, #8
 80047f2:	2b08      	cmp	r3, #8
 80047f4:	d122      	bne.n	800483c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	f003 0308 	and.w	r3, r3, #8
 8004800:	2b08      	cmp	r3, #8
 8004802:	d11b      	bne.n	800483c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f06f 0208 	mvn.w	r2, #8
 800480c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2204      	movs	r2, #4
 8004812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	f003 0303 	and.w	r3, r3, #3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d003      	beq.n	800482a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 fa26 	bl	8004c74 <HAL_TIM_IC_CaptureCallback>
 8004828:	e005      	b.n	8004836 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 fa18 	bl	8004c60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f000 fa29 	bl	8004c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	f003 0310 	and.w	r3, r3, #16
 8004846:	2b10      	cmp	r3, #16
 8004848:	d122      	bne.n	8004890 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	f003 0310 	and.w	r3, r3, #16
 8004854:	2b10      	cmp	r3, #16
 8004856:	d11b      	bne.n	8004890 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f06f 0210 	mvn.w	r2, #16
 8004860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2208      	movs	r2, #8
 8004866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	69db      	ldr	r3, [r3, #28]
 800486e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004872:	2b00      	cmp	r3, #0
 8004874:	d003      	beq.n	800487e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f9fc 	bl	8004c74 <HAL_TIM_IC_CaptureCallback>
 800487c:	e005      	b.n	800488a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 f9ee 	bl	8004c60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f9ff 	bl	8004c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b01      	cmp	r3, #1
 800489c:	d10e      	bne.n	80048bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	f003 0301 	and.w	r3, r3, #1
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d107      	bne.n	80048bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f06f 0201 	mvn.w	r2, #1
 80048b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f9c8 	bl	8004c4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c6:	2b80      	cmp	r3, #128	; 0x80
 80048c8:	d10e      	bne.n	80048e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048d4:	2b80      	cmp	r3, #128	; 0x80
 80048d6:	d107      	bne.n	80048e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 fdcc 	bl	8005480 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f2:	2b40      	cmp	r3, #64	; 0x40
 80048f4:	d10e      	bne.n	8004914 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004900:	2b40      	cmp	r3, #64	; 0x40
 8004902:	d107      	bne.n	8004914 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800490c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f9c4 	bl	8004c9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	f003 0320 	and.w	r3, r3, #32
 800491e:	2b20      	cmp	r3, #32
 8004920:	d10e      	bne.n	8004940 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	f003 0320 	and.w	r3, r3, #32
 800492c:	2b20      	cmp	r3, #32
 800492e:	d107      	bne.n	8004940 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f06f 0220 	mvn.w	r2, #32
 8004938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 fd96 	bl	800546c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004940:	bf00      	nop
 8004942:	3708      	adds	r7, #8
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800495a:	2b01      	cmp	r3, #1
 800495c:	d101      	bne.n	8004962 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800495e:	2302      	movs	r3, #2
 8004960:	e0ac      	b.n	8004abc <HAL_TIM_PWM_ConfigChannel+0x174>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2b0c      	cmp	r3, #12
 800496e:	f200 809f 	bhi.w	8004ab0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004972:	a201      	add	r2, pc, #4	; (adr r2, 8004978 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004978:	080049ad 	.word	0x080049ad
 800497c:	08004ab1 	.word	0x08004ab1
 8004980:	08004ab1 	.word	0x08004ab1
 8004984:	08004ab1 	.word	0x08004ab1
 8004988:	080049ed 	.word	0x080049ed
 800498c:	08004ab1 	.word	0x08004ab1
 8004990:	08004ab1 	.word	0x08004ab1
 8004994:	08004ab1 	.word	0x08004ab1
 8004998:	08004a2f 	.word	0x08004a2f
 800499c:	08004ab1 	.word	0x08004ab1
 80049a0:	08004ab1 	.word	0x08004ab1
 80049a4:	08004ab1 	.word	0x08004ab1
 80049a8:	08004a6f 	.word	0x08004a6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68b9      	ldr	r1, [r7, #8]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 fa1c 	bl	8004df0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	699a      	ldr	r2, [r3, #24]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f042 0208 	orr.w	r2, r2, #8
 80049c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	699a      	ldr	r2, [r3, #24]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f022 0204 	bic.w	r2, r2, #4
 80049d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6999      	ldr	r1, [r3, #24]
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	691a      	ldr	r2, [r3, #16]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	430a      	orrs	r2, r1
 80049e8:	619a      	str	r2, [r3, #24]
      break;
 80049ea:	e062      	b.n	8004ab2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68b9      	ldr	r1, [r7, #8]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 fa6c 	bl	8004ed0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	699a      	ldr	r2, [r3, #24]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	699a      	ldr	r2, [r3, #24]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	6999      	ldr	r1, [r3, #24]
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	021a      	lsls	r2, r3, #8
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	619a      	str	r2, [r3, #24]
      break;
 8004a2c:	e041      	b.n	8004ab2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68b9      	ldr	r1, [r7, #8]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f000 fac1 	bl	8004fbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	69da      	ldr	r2, [r3, #28]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f042 0208 	orr.w	r2, r2, #8
 8004a48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	69da      	ldr	r2, [r3, #28]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f022 0204 	bic.w	r2, r2, #4
 8004a58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	69d9      	ldr	r1, [r3, #28]
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	691a      	ldr	r2, [r3, #16]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	61da      	str	r2, [r3, #28]
      break;
 8004a6c:	e021      	b.n	8004ab2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68b9      	ldr	r1, [r7, #8]
 8004a74:	4618      	mov	r0, r3
 8004a76:	f000 fb15 	bl	80050a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	69da      	ldr	r2, [r3, #28]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	69da      	ldr	r2, [r3, #28]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	69d9      	ldr	r1, [r3, #28]
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	021a      	lsls	r2, r3, #8
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	61da      	str	r2, [r3, #28]
      break;
 8004aae:	e000      	b.n	8004ab2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004ab0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3710      	adds	r7, #16
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d101      	bne.n	8004adc <HAL_TIM_ConfigClockSource+0x18>
 8004ad8:	2302      	movs	r3, #2
 8004ada:	e0b3      	b.n	8004c44 <HAL_TIM_ConfigClockSource+0x180>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004afa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b02:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b14:	d03e      	beq.n	8004b94 <HAL_TIM_ConfigClockSource+0xd0>
 8004b16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b1a:	f200 8087 	bhi.w	8004c2c <HAL_TIM_ConfigClockSource+0x168>
 8004b1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b22:	f000 8085 	beq.w	8004c30 <HAL_TIM_ConfigClockSource+0x16c>
 8004b26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b2a:	d87f      	bhi.n	8004c2c <HAL_TIM_ConfigClockSource+0x168>
 8004b2c:	2b70      	cmp	r3, #112	; 0x70
 8004b2e:	d01a      	beq.n	8004b66 <HAL_TIM_ConfigClockSource+0xa2>
 8004b30:	2b70      	cmp	r3, #112	; 0x70
 8004b32:	d87b      	bhi.n	8004c2c <HAL_TIM_ConfigClockSource+0x168>
 8004b34:	2b60      	cmp	r3, #96	; 0x60
 8004b36:	d050      	beq.n	8004bda <HAL_TIM_ConfigClockSource+0x116>
 8004b38:	2b60      	cmp	r3, #96	; 0x60
 8004b3a:	d877      	bhi.n	8004c2c <HAL_TIM_ConfigClockSource+0x168>
 8004b3c:	2b50      	cmp	r3, #80	; 0x50
 8004b3e:	d03c      	beq.n	8004bba <HAL_TIM_ConfigClockSource+0xf6>
 8004b40:	2b50      	cmp	r3, #80	; 0x50
 8004b42:	d873      	bhi.n	8004c2c <HAL_TIM_ConfigClockSource+0x168>
 8004b44:	2b40      	cmp	r3, #64	; 0x40
 8004b46:	d058      	beq.n	8004bfa <HAL_TIM_ConfigClockSource+0x136>
 8004b48:	2b40      	cmp	r3, #64	; 0x40
 8004b4a:	d86f      	bhi.n	8004c2c <HAL_TIM_ConfigClockSource+0x168>
 8004b4c:	2b30      	cmp	r3, #48	; 0x30
 8004b4e:	d064      	beq.n	8004c1a <HAL_TIM_ConfigClockSource+0x156>
 8004b50:	2b30      	cmp	r3, #48	; 0x30
 8004b52:	d86b      	bhi.n	8004c2c <HAL_TIM_ConfigClockSource+0x168>
 8004b54:	2b20      	cmp	r3, #32
 8004b56:	d060      	beq.n	8004c1a <HAL_TIM_ConfigClockSource+0x156>
 8004b58:	2b20      	cmp	r3, #32
 8004b5a:	d867      	bhi.n	8004c2c <HAL_TIM_ConfigClockSource+0x168>
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d05c      	beq.n	8004c1a <HAL_TIM_ConfigClockSource+0x156>
 8004b60:	2b10      	cmp	r3, #16
 8004b62:	d05a      	beq.n	8004c1a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004b64:	e062      	b.n	8004c2c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6818      	ldr	r0, [r3, #0]
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	6899      	ldr	r1, [r3, #8]
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	685a      	ldr	r2, [r3, #4]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	f000 fb65 	bl	8005244 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b88:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	609a      	str	r2, [r3, #8]
      break;
 8004b92:	e04e      	b.n	8004c32 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6818      	ldr	r0, [r3, #0]
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	6899      	ldr	r1, [r3, #8]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	685a      	ldr	r2, [r3, #4]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f000 fb4e 	bl	8005244 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689a      	ldr	r2, [r3, #8]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bb6:	609a      	str	r2, [r3, #8]
      break;
 8004bb8:	e03b      	b.n	8004c32 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6818      	ldr	r0, [r3, #0]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	6859      	ldr	r1, [r3, #4]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	f000 fac2 	bl	8005150 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2150      	movs	r1, #80	; 0x50
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 fb1b 	bl	800520e <TIM_ITRx_SetConfig>
      break;
 8004bd8:	e02b      	b.n	8004c32 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6818      	ldr	r0, [r3, #0]
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	6859      	ldr	r1, [r3, #4]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	461a      	mov	r2, r3
 8004be8:	f000 fae1 	bl	80051ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2160      	movs	r1, #96	; 0x60
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f000 fb0b 	bl	800520e <TIM_ITRx_SetConfig>
      break;
 8004bf8:	e01b      	b.n	8004c32 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6818      	ldr	r0, [r3, #0]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	6859      	ldr	r1, [r3, #4]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	461a      	mov	r2, r3
 8004c08:	f000 faa2 	bl	8005150 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2140      	movs	r1, #64	; 0x40
 8004c12:	4618      	mov	r0, r3
 8004c14:	f000 fafb 	bl	800520e <TIM_ITRx_SetConfig>
      break;
 8004c18:	e00b      	b.n	8004c32 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4619      	mov	r1, r3
 8004c24:	4610      	mov	r0, r2
 8004c26:	f000 faf2 	bl	800520e <TIM_ITRx_SetConfig>
        break;
 8004c2a:	e002      	b.n	8004c32 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004c2c:	bf00      	nop
 8004c2e:	e000      	b.n	8004c32 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004c30:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004c54:	bf00      	nop
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a40      	ldr	r2, [pc, #256]	; (8004dc4 <TIM_Base_SetConfig+0x114>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d013      	beq.n	8004cf0 <TIM_Base_SetConfig+0x40>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cce:	d00f      	beq.n	8004cf0 <TIM_Base_SetConfig+0x40>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a3d      	ldr	r2, [pc, #244]	; (8004dc8 <TIM_Base_SetConfig+0x118>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d00b      	beq.n	8004cf0 <TIM_Base_SetConfig+0x40>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a3c      	ldr	r2, [pc, #240]	; (8004dcc <TIM_Base_SetConfig+0x11c>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d007      	beq.n	8004cf0 <TIM_Base_SetConfig+0x40>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a3b      	ldr	r2, [pc, #236]	; (8004dd0 <TIM_Base_SetConfig+0x120>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d003      	beq.n	8004cf0 <TIM_Base_SetConfig+0x40>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a3a      	ldr	r2, [pc, #232]	; (8004dd4 <TIM_Base_SetConfig+0x124>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d108      	bne.n	8004d02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a2f      	ldr	r2, [pc, #188]	; (8004dc4 <TIM_Base_SetConfig+0x114>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d02b      	beq.n	8004d62 <TIM_Base_SetConfig+0xb2>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d10:	d027      	beq.n	8004d62 <TIM_Base_SetConfig+0xb2>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a2c      	ldr	r2, [pc, #176]	; (8004dc8 <TIM_Base_SetConfig+0x118>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d023      	beq.n	8004d62 <TIM_Base_SetConfig+0xb2>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a2b      	ldr	r2, [pc, #172]	; (8004dcc <TIM_Base_SetConfig+0x11c>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d01f      	beq.n	8004d62 <TIM_Base_SetConfig+0xb2>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a2a      	ldr	r2, [pc, #168]	; (8004dd0 <TIM_Base_SetConfig+0x120>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d01b      	beq.n	8004d62 <TIM_Base_SetConfig+0xb2>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a29      	ldr	r2, [pc, #164]	; (8004dd4 <TIM_Base_SetConfig+0x124>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d017      	beq.n	8004d62 <TIM_Base_SetConfig+0xb2>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a28      	ldr	r2, [pc, #160]	; (8004dd8 <TIM_Base_SetConfig+0x128>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d013      	beq.n	8004d62 <TIM_Base_SetConfig+0xb2>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a27      	ldr	r2, [pc, #156]	; (8004ddc <TIM_Base_SetConfig+0x12c>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d00f      	beq.n	8004d62 <TIM_Base_SetConfig+0xb2>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a26      	ldr	r2, [pc, #152]	; (8004de0 <TIM_Base_SetConfig+0x130>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d00b      	beq.n	8004d62 <TIM_Base_SetConfig+0xb2>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a25      	ldr	r2, [pc, #148]	; (8004de4 <TIM_Base_SetConfig+0x134>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d007      	beq.n	8004d62 <TIM_Base_SetConfig+0xb2>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a24      	ldr	r2, [pc, #144]	; (8004de8 <TIM_Base_SetConfig+0x138>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d003      	beq.n	8004d62 <TIM_Base_SetConfig+0xb2>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a23      	ldr	r2, [pc, #140]	; (8004dec <TIM_Base_SetConfig+0x13c>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d108      	bne.n	8004d74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	689a      	ldr	r2, [r3, #8]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a0a      	ldr	r2, [pc, #40]	; (8004dc4 <TIM_Base_SetConfig+0x114>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d003      	beq.n	8004da8 <TIM_Base_SetConfig+0xf8>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a0c      	ldr	r2, [pc, #48]	; (8004dd4 <TIM_Base_SetConfig+0x124>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d103      	bne.n	8004db0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	691a      	ldr	r2, [r3, #16]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	615a      	str	r2, [r3, #20]
}
 8004db6:	bf00      	nop
 8004db8:	3714      	adds	r7, #20
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	40010000 	.word	0x40010000
 8004dc8:	40000400 	.word	0x40000400
 8004dcc:	40000800 	.word	0x40000800
 8004dd0:	40000c00 	.word	0x40000c00
 8004dd4:	40010400 	.word	0x40010400
 8004dd8:	40014000 	.word	0x40014000
 8004ddc:	40014400 	.word	0x40014400
 8004de0:	40014800 	.word	0x40014800
 8004de4:	40001800 	.word	0x40001800
 8004de8:	40001c00 	.word	0x40001c00
 8004dec:	40002000 	.word	0x40002000

08004df0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b087      	sub	sp, #28
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	f023 0201 	bic.w	r2, r3, #1
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f023 0303 	bic.w	r3, r3, #3
 8004e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	f023 0302 	bic.w	r3, r3, #2
 8004e38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a20      	ldr	r2, [pc, #128]	; (8004ec8 <TIM_OC1_SetConfig+0xd8>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d003      	beq.n	8004e54 <TIM_OC1_SetConfig+0x64>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a1f      	ldr	r2, [pc, #124]	; (8004ecc <TIM_OC1_SetConfig+0xdc>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d10c      	bne.n	8004e6e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	f023 0308 	bic.w	r3, r3, #8
 8004e5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f023 0304 	bic.w	r3, r3, #4
 8004e6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a15      	ldr	r2, [pc, #84]	; (8004ec8 <TIM_OC1_SetConfig+0xd8>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d003      	beq.n	8004e7e <TIM_OC1_SetConfig+0x8e>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a14      	ldr	r2, [pc, #80]	; (8004ecc <TIM_OC1_SetConfig+0xdc>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d111      	bne.n	8004ea2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	685a      	ldr	r2, [r3, #4]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	621a      	str	r2, [r3, #32]
}
 8004ebc:	bf00      	nop
 8004ebe:	371c      	adds	r7, #28
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr
 8004ec8:	40010000 	.word	0x40010000
 8004ecc:	40010400 	.word	0x40010400

08004ed0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b087      	sub	sp, #28
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	f023 0210 	bic.w	r2, r3, #16
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	021b      	lsls	r3, r3, #8
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	f023 0320 	bic.w	r3, r3, #32
 8004f1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	011b      	lsls	r3, r3, #4
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a22      	ldr	r2, [pc, #136]	; (8004fb4 <TIM_OC2_SetConfig+0xe4>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d003      	beq.n	8004f38 <TIM_OC2_SetConfig+0x68>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a21      	ldr	r2, [pc, #132]	; (8004fb8 <TIM_OC2_SetConfig+0xe8>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d10d      	bne.n	8004f54 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	011b      	lsls	r3, r3, #4
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a17      	ldr	r2, [pc, #92]	; (8004fb4 <TIM_OC2_SetConfig+0xe4>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d003      	beq.n	8004f64 <TIM_OC2_SetConfig+0x94>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a16      	ldr	r2, [pc, #88]	; (8004fb8 <TIM_OC2_SetConfig+0xe8>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d113      	bne.n	8004f8c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	693a      	ldr	r2, [r7, #16]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685a      	ldr	r2, [r3, #4]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	621a      	str	r2, [r3, #32]
}
 8004fa6:	bf00      	nop
 8004fa8:	371c      	adds	r7, #28
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	40010000 	.word	0x40010000
 8004fb8:	40010400 	.word	0x40010400

08004fbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b087      	sub	sp, #28
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	69db      	ldr	r3, [r3, #28]
 8004fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f023 0303 	bic.w	r3, r3, #3
 8004ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005004:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	021b      	lsls	r3, r3, #8
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	4313      	orrs	r3, r2
 8005010:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a21      	ldr	r2, [pc, #132]	; (800509c <TIM_OC3_SetConfig+0xe0>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d003      	beq.n	8005022 <TIM_OC3_SetConfig+0x66>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a20      	ldr	r2, [pc, #128]	; (80050a0 <TIM_OC3_SetConfig+0xe4>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d10d      	bne.n	800503e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005028:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	021b      	lsls	r3, r3, #8
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	4313      	orrs	r3, r2
 8005034:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800503c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a16      	ldr	r2, [pc, #88]	; (800509c <TIM_OC3_SetConfig+0xe0>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d003      	beq.n	800504e <TIM_OC3_SetConfig+0x92>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a15      	ldr	r2, [pc, #84]	; (80050a0 <TIM_OC3_SetConfig+0xe4>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d113      	bne.n	8005076 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005054:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800505c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	011b      	lsls	r3, r3, #4
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	4313      	orrs	r3, r2
 8005068:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	011b      	lsls	r3, r3, #4
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	4313      	orrs	r3, r2
 8005074:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	621a      	str	r2, [r3, #32]
}
 8005090:	bf00      	nop
 8005092:	371c      	adds	r7, #28
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr
 800509c:	40010000 	.word	0x40010000
 80050a0:	40010400 	.word	0x40010400

080050a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b087      	sub	sp, #28
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	69db      	ldr	r3, [r3, #28]
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	021b      	lsls	r3, r3, #8
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	031b      	lsls	r3, r3, #12
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a12      	ldr	r2, [pc, #72]	; (8005148 <TIM_OC4_SetConfig+0xa4>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d003      	beq.n	800510c <TIM_OC4_SetConfig+0x68>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a11      	ldr	r2, [pc, #68]	; (800514c <TIM_OC4_SetConfig+0xa8>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d109      	bne.n	8005120 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005112:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	695b      	ldr	r3, [r3, #20]
 8005118:	019b      	lsls	r3, r3, #6
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	4313      	orrs	r3, r2
 800511e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685a      	ldr	r2, [r3, #4]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	621a      	str	r2, [r3, #32]
}
 800513a:	bf00      	nop
 800513c:	371c      	adds	r7, #28
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	40010000 	.word	0x40010000
 800514c:	40010400 	.word	0x40010400

08005150 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005150:	b480      	push	{r7}
 8005152:	b087      	sub	sp, #28
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	f023 0201 	bic.w	r2, r3, #1
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	699b      	ldr	r3, [r3, #24]
 8005172:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800517a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	011b      	lsls	r3, r3, #4
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	4313      	orrs	r3, r2
 8005184:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	f023 030a 	bic.w	r3, r3, #10
 800518c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	4313      	orrs	r3, r2
 8005194:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	621a      	str	r2, [r3, #32]
}
 80051a2:	bf00      	nop
 80051a4:	371c      	adds	r7, #28
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr

080051ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051ae:	b480      	push	{r7}
 80051b0:	b087      	sub	sp, #28
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	60f8      	str	r0, [r7, #12]
 80051b6:	60b9      	str	r1, [r7, #8]
 80051b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	f023 0210 	bic.w	r2, r3, #16
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6a1b      	ldr	r3, [r3, #32]
 80051d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	031b      	lsls	r3, r3, #12
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	011b      	lsls	r3, r3, #4
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	621a      	str	r2, [r3, #32]
}
 8005202:	bf00      	nop
 8005204:	371c      	adds	r7, #28
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800520e:	b480      	push	{r7}
 8005210:	b085      	sub	sp, #20
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
 8005216:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005224:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	4313      	orrs	r3, r2
 800522c:	f043 0307 	orr.w	r3, r3, #7
 8005230:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	609a      	str	r2, [r3, #8]
}
 8005238:	bf00      	nop
 800523a:	3714      	adds	r7, #20
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005244:	b480      	push	{r7}
 8005246:	b087      	sub	sp, #28
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
 8005250:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800525e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	021a      	lsls	r2, r3, #8
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	431a      	orrs	r2, r3
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	4313      	orrs	r3, r2
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	4313      	orrs	r3, r2
 8005270:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	609a      	str	r2, [r3, #8]
}
 8005278:	bf00      	nop
 800527a:	371c      	adds	r7, #28
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005284:	b480      	push	{r7}
 8005286:	b087      	sub	sp, #28
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	f003 031f 	and.w	r3, r3, #31
 8005296:	2201      	movs	r2, #1
 8005298:	fa02 f303 	lsl.w	r3, r2, r3
 800529c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6a1a      	ldr	r2, [r3, #32]
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	43db      	mvns	r3, r3
 80052a6:	401a      	ands	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6a1a      	ldr	r2, [r3, #32]
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	f003 031f 	and.w	r3, r3, #31
 80052b6:	6879      	ldr	r1, [r7, #4]
 80052b8:	fa01 f303 	lsl.w	r3, r1, r3
 80052bc:	431a      	orrs	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	621a      	str	r2, [r3, #32]
}
 80052c2:	bf00      	nop
 80052c4:	371c      	adds	r7, #28
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
	...

080052d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d101      	bne.n	80052e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052e4:	2302      	movs	r3, #2
 80052e6:	e05a      	b.n	800539e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2202      	movs	r2, #2
 80052f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800530e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	4313      	orrs	r3, r2
 8005318:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a21      	ldr	r2, [pc, #132]	; (80053ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d022      	beq.n	8005372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005334:	d01d      	beq.n	8005372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a1d      	ldr	r2, [pc, #116]	; (80053b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d018      	beq.n	8005372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a1b      	ldr	r2, [pc, #108]	; (80053b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d013      	beq.n	8005372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a1a      	ldr	r2, [pc, #104]	; (80053b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d00e      	beq.n	8005372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a18      	ldr	r2, [pc, #96]	; (80053bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d009      	beq.n	8005372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a17      	ldr	r2, [pc, #92]	; (80053c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d004      	beq.n	8005372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a15      	ldr	r2, [pc, #84]	; (80053c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d10c      	bne.n	800538c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005378:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	68ba      	ldr	r2, [r7, #8]
 8005380:	4313      	orrs	r3, r2
 8005382:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68ba      	ldr	r2, [r7, #8]
 800538a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3714      	adds	r7, #20
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	40010000 	.word	0x40010000
 80053b0:	40000400 	.word	0x40000400
 80053b4:	40000800 	.word	0x40000800
 80053b8:	40000c00 	.word	0x40000c00
 80053bc:	40010400 	.word	0x40010400
 80053c0:	40014000 	.word	0x40014000
 80053c4:	40001800 	.word	0x40001800

080053c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80053d2:	2300      	movs	r3, #0
 80053d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d101      	bne.n	80053e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80053e0:	2302      	movs	r3, #2
 80053e2:	e03d      	b.n	8005460 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	4313      	orrs	r3, r2
 8005406:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	4313      	orrs	r3, r2
 8005414:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4313      	orrs	r3, r2
 8005422:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	4313      	orrs	r3, r2
 8005430:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	695b      	ldr	r3, [r3, #20]
 800543c:	4313      	orrs	r3, r2
 800543e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	4313      	orrs	r3, r2
 800544c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3714      	adds	r7, #20
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d101      	bne.n	80054a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e03f      	b.n	8005526 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d106      	bne.n	80054c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f7fc ffd4 	bl	8002468 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2224      	movs	r2, #36	; 0x24
 80054c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68da      	ldr	r2, [r3, #12]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 fd3d 	bl	8005f58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	691a      	ldr	r2, [r3, #16]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	695a      	ldr	r2, [r3, #20]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68da      	ldr	r2, [r3, #12]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800550c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2220      	movs	r2, #32
 8005518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2220      	movs	r2, #32
 8005520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3708      	adds	r7, #8
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
	...

08005530 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	4613      	mov	r3, r2
 800553c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b20      	cmp	r3, #32
 8005548:	d153      	bne.n	80055f2 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d002      	beq.n	8005556 <HAL_UART_Transmit_DMA+0x26>
 8005550:	88fb      	ldrh	r3, [r7, #6]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d101      	bne.n	800555a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e04c      	b.n	80055f4 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005560:	2b01      	cmp	r3, #1
 8005562:	d101      	bne.n	8005568 <HAL_UART_Transmit_DMA+0x38>
 8005564:	2302      	movs	r3, #2
 8005566:	e045      	b.n	80055f4 <HAL_UART_Transmit_DMA+0xc4>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	88fa      	ldrh	r2, [r7, #6]
 800557a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	88fa      	ldrh	r2, [r7, #6]
 8005580:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2221      	movs	r2, #33	; 0x21
 800558c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005594:	4a19      	ldr	r2, [pc, #100]	; (80055fc <HAL_UART_Transmit_DMA+0xcc>)
 8005596:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800559c:	4a18      	ldr	r2, [pc, #96]	; (8005600 <HAL_UART_Transmit_DMA+0xd0>)
 800559e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a4:	4a17      	ldr	r2, [pc, #92]	; (8005604 <HAL_UART_Transmit_DMA+0xd4>)
 80055a6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ac:	2200      	movs	r2, #0
 80055ae:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80055b0:	f107 0308 	add.w	r3, r7, #8
 80055b4:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	6819      	ldr	r1, [r3, #0]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	3304      	adds	r3, #4
 80055c4:	461a      	mov	r2, r3
 80055c6:	88fb      	ldrh	r3, [r7, #6]
 80055c8:	f7fd fb50 	bl	8002c6c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055d4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	695a      	ldr	r2, [r3, #20]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80055ec:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80055ee:	2300      	movs	r3, #0
 80055f0:	e000      	b.n	80055f4 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80055f2:	2302      	movs	r3, #2
  }
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3718      	adds	r7, #24
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	08005a15 	.word	0x08005a15
 8005600:	08005a67 	.word	0x08005a67
 8005604:	08005b4f 	.word	0x08005b4f

08005608 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	4613      	mov	r3, r2
 8005614:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800561c:	b2db      	uxtb	r3, r3
 800561e:	2b20      	cmp	r3, #32
 8005620:	d11d      	bne.n	800565e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d002      	beq.n	800562e <HAL_UART_Receive_DMA+0x26>
 8005628:	88fb      	ldrh	r3, [r7, #6]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e016      	b.n	8005660 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005638:	2b01      	cmp	r3, #1
 800563a:	d101      	bne.n	8005640 <HAL_UART_Receive_DMA+0x38>
 800563c:	2302      	movs	r3, #2
 800563e:	e00f      	b.n	8005660 <HAL_UART_Receive_DMA+0x58>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800564e:	88fb      	ldrh	r3, [r7, #6]
 8005650:	461a      	mov	r2, r3
 8005652:	68b9      	ldr	r1, [r7, #8]
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	f000 fac5 	bl	8005be4 <UART_Start_Receive_DMA>
 800565a:	4603      	mov	r3, r0
 800565c:	e000      	b.n	8005660 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800565e:	2302      	movs	r3, #2
  }
}
 8005660:	4618      	mov	r0, r3
 8005662:	3710      	adds	r7, #16
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b08a      	sub	sp, #40	; 0x28
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005688:	2300      	movs	r3, #0
 800568a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800568c:	2300      	movs	r3, #0
 800568e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005692:	f003 030f 	and.w	r3, r3, #15
 8005696:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d10d      	bne.n	80056ba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a0:	f003 0320 	and.w	r3, r3, #32
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d008      	beq.n	80056ba <HAL_UART_IRQHandler+0x52>
 80056a8:	6a3b      	ldr	r3, [r7, #32]
 80056aa:	f003 0320 	and.w	r3, r3, #32
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 fbb9 	bl	8005e2a <UART_Receive_IT>
      return;
 80056b8:	e17c      	b.n	80059b4 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f000 80b1 	beq.w	8005824 <HAL_UART_IRQHandler+0x1bc>
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	f003 0301 	and.w	r3, r3, #1
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d105      	bne.n	80056d8 <HAL_UART_IRQHandler+0x70>
 80056cc:	6a3b      	ldr	r3, [r7, #32]
 80056ce:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	f000 80a6 	beq.w	8005824 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80056d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00a      	beq.n	80056f8 <HAL_UART_IRQHandler+0x90>
 80056e2:	6a3b      	ldr	r3, [r7, #32]
 80056e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d005      	beq.n	80056f8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f0:	f043 0201 	orr.w	r2, r3, #1
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fa:	f003 0304 	and.w	r3, r3, #4
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00a      	beq.n	8005718 <HAL_UART_IRQHandler+0xb0>
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	f003 0301 	and.w	r3, r3, #1
 8005708:	2b00      	cmp	r3, #0
 800570a:	d005      	beq.n	8005718 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005710:	f043 0202 	orr.w	r2, r3, #2
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571a:	f003 0302 	and.w	r3, r3, #2
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00a      	beq.n	8005738 <HAL_UART_IRQHandler+0xd0>
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	f003 0301 	and.w	r3, r3, #1
 8005728:	2b00      	cmp	r3, #0
 800572a:	d005      	beq.n	8005738 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005730:	f043 0204 	orr.w	r2, r3, #4
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573a:	f003 0308 	and.w	r3, r3, #8
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00f      	beq.n	8005762 <HAL_UART_IRQHandler+0xfa>
 8005742:	6a3b      	ldr	r3, [r7, #32]
 8005744:	f003 0320 	and.w	r3, r3, #32
 8005748:	2b00      	cmp	r3, #0
 800574a:	d104      	bne.n	8005756 <HAL_UART_IRQHandler+0xee>
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	2b00      	cmp	r3, #0
 8005754:	d005      	beq.n	8005762 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575a:	f043 0208 	orr.w	r2, r3, #8
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005766:	2b00      	cmp	r3, #0
 8005768:	f000 811f 	beq.w	80059aa <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800576c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576e:	f003 0320 	and.w	r3, r3, #32
 8005772:	2b00      	cmp	r3, #0
 8005774:	d007      	beq.n	8005786 <HAL_UART_IRQHandler+0x11e>
 8005776:	6a3b      	ldr	r3, [r7, #32]
 8005778:	f003 0320 	and.w	r3, r3, #32
 800577c:	2b00      	cmp	r3, #0
 800577e:	d002      	beq.n	8005786 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 fb52 	bl	8005e2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	695b      	ldr	r3, [r3, #20]
 800578c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005790:	2b40      	cmp	r3, #64	; 0x40
 8005792:	bf0c      	ite	eq
 8005794:	2301      	moveq	r3, #1
 8005796:	2300      	movne	r3, #0
 8005798:	b2db      	uxtb	r3, r3
 800579a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a0:	f003 0308 	and.w	r3, r3, #8
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d102      	bne.n	80057ae <HAL_UART_IRQHandler+0x146>
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d031      	beq.n	8005812 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 fa92 	bl	8005cd8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	695b      	ldr	r3, [r3, #20]
 80057ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057be:	2b40      	cmp	r3, #64	; 0x40
 80057c0:	d123      	bne.n	800580a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	695a      	ldr	r2, [r3, #20]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057d0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d013      	beq.n	8005802 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057de:	4a77      	ldr	r2, [pc, #476]	; (80059bc <HAL_UART_IRQHandler+0x354>)
 80057e0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7fd fb08 	bl	8002dfc <HAL_DMA_Abort_IT>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d016      	beq.n	8005820 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80057fc:	4610      	mov	r0, r2
 80057fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005800:	e00e      	b.n	8005820 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f8f0 	bl	80059e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005808:	e00a      	b.n	8005820 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 f8ec 	bl	80059e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005810:	e006      	b.n	8005820 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 f8e8 	bl	80059e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800581e:	e0c4      	b.n	80059aa <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005820:	bf00      	nop
    return;
 8005822:	e0c2      	b.n	80059aa <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005828:	2b01      	cmp	r3, #1
 800582a:	f040 80a2 	bne.w	8005972 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800582e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005830:	f003 0310 	and.w	r3, r3, #16
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 809c 	beq.w	8005972 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800583a:	6a3b      	ldr	r3, [r7, #32]
 800583c:	f003 0310 	and.w	r3, r3, #16
 8005840:	2b00      	cmp	r3, #0
 8005842:	f000 8096 	beq.w	8005972 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005846:	2300      	movs	r3, #0
 8005848:	60fb      	str	r3, [r7, #12]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	60fb      	str	r3, [r7, #12]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	60fb      	str	r3, [r7, #12]
 800585a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005866:	2b40      	cmp	r3, #64	; 0x40
 8005868:	d14f      	bne.n	800590a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005874:	8a3b      	ldrh	r3, [r7, #16]
 8005876:	2b00      	cmp	r3, #0
 8005878:	f000 8099 	beq.w	80059ae <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005880:	8a3a      	ldrh	r2, [r7, #16]
 8005882:	429a      	cmp	r2, r3
 8005884:	f080 8093 	bcs.w	80059ae <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	8a3a      	ldrh	r2, [r7, #16]
 800588c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005892:	69db      	ldr	r3, [r3, #28]
 8005894:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005898:	d02b      	beq.n	80058f2 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68da      	ldr	r2, [r3, #12]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058a8:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	695a      	ldr	r2, [r3, #20]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f022 0201 	bic.w	r2, r2, #1
 80058b8:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	695a      	ldr	r2, [r3, #20]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058c8:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2220      	movs	r2, #32
 80058ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68da      	ldr	r2, [r3, #12]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f022 0210 	bic.w	r2, r2, #16
 80058e6:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ec:	4618      	mov	r0, r3
 80058ee:	f7fd fa15 	bl	8002d1c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	b29b      	uxth	r3, r3
 8005900:	4619      	mov	r1, r3
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 f87a 	bl	80059fc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005908:	e051      	b.n	80059ae <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005912:	b29b      	uxth	r3, r3
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800591c:	b29b      	uxth	r3, r3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d047      	beq.n	80059b2 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8005922:	8a7b      	ldrh	r3, [r7, #18]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d044      	beq.n	80059b2 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68da      	ldr	r2, [r3, #12]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005936:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	695a      	ldr	r2, [r3, #20]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 0201 	bic.w	r2, r2, #1
 8005946:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2220      	movs	r2, #32
 800594c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68da      	ldr	r2, [r3, #12]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f022 0210 	bic.w	r2, r2, #16
 8005964:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005966:	8a7b      	ldrh	r3, [r7, #18]
 8005968:	4619      	mov	r1, r3
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f846 	bl	80059fc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005970:	e01f      	b.n	80059b2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005978:	2b00      	cmp	r3, #0
 800597a:	d008      	beq.n	800598e <HAL_UART_IRQHandler+0x326>
 800597c:	6a3b      	ldr	r3, [r7, #32]
 800597e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005982:	2b00      	cmp	r3, #0
 8005984:	d003      	beq.n	800598e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 f9e7 	bl	8005d5a <UART_Transmit_IT>
    return;
 800598c:	e012      	b.n	80059b4 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800598e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00d      	beq.n	80059b4 <HAL_UART_IRQHandler+0x34c>
 8005998:	6a3b      	ldr	r3, [r7, #32]
 800599a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d008      	beq.n	80059b4 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 fa29 	bl	8005dfa <UART_EndTransmit_IT>
    return;
 80059a8:	e004      	b.n	80059b4 <HAL_UART_IRQHandler+0x34c>
    return;
 80059aa:	bf00      	nop
 80059ac:	e002      	b.n	80059b4 <HAL_UART_IRQHandler+0x34c>
      return;
 80059ae:	bf00      	nop
 80059b0:	e000      	b.n	80059b4 <HAL_UART_IRQHandler+0x34c>
      return;
 80059b2:	bf00      	nop
  }
}
 80059b4:	3728      	adds	r7, #40	; 0x28
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	08005d33 	.word	0x08005d33

080059c0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	460b      	mov	r3, r1
 8005a06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a08:	bf00      	nop
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a20:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d113      	bne.n	8005a58 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	695a      	ldr	r2, [r3, #20]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a44:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68da      	ldr	r2, [r3, #12]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a54:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005a56:	e002      	b.n	8005a5e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8005a58:	68f8      	ldr	r0, [r7, #12]
 8005a5a:	f7fb ff61 	bl	8001920 <HAL_UART_TxCpltCallback>
}
 8005a5e:	bf00      	nop
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b084      	sub	sp, #16
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a72:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f7ff ffa3 	bl	80059c0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a7a:	bf00      	nop
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b084      	sub	sp, #16
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d12a      	bne.n	8005af4 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68da      	ldr	r2, [r3, #12]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ab2:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	695a      	ldr	r2, [r3, #20]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f022 0201 	bic.w	r2, r2, #1
 8005ac2:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	695a      	ldr	r2, [r3, #20]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ad2:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2220      	movs	r2, #32
 8005ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d107      	bne.n	8005af4 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68da      	ldr	r2, [r3, #12]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f022 0210 	bic.w	r2, r2, #16
 8005af2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d106      	bne.n	8005b0a <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b00:	4619      	mov	r1, r3
 8005b02:	68f8      	ldr	r0, [r7, #12]
 8005b04:	f7ff ff7a 	bl	80059fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b08:	e002      	b.n	8005b10 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	f7fb ff12 	bl	8001934 <HAL_UART_RxCpltCallback>
}
 8005b10:	bf00      	nop
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b24:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d108      	bne.n	8005b40 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b32:	085b      	lsrs	r3, r3, #1
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	4619      	mov	r1, r3
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f7ff ff5f 	bl	80059fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b3e:	e002      	b.n	8005b46 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f7ff ff47 	bl	80059d4 <HAL_UART_RxHalfCpltCallback>
}
 8005b46:	bf00      	nop
 8005b48:	3710      	adds	r7, #16
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b084      	sub	sp, #16
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005b56:	2300      	movs	r3, #0
 8005b58:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b6a:	2b80      	cmp	r3, #128	; 0x80
 8005b6c:	bf0c      	ite	eq
 8005b6e:	2301      	moveq	r3, #1
 8005b70:	2300      	movne	r3, #0
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	2b21      	cmp	r3, #33	; 0x21
 8005b80:	d108      	bne.n	8005b94 <UART_DMAError+0x46>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d005      	beq.n	8005b94 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005b8e:	68b8      	ldr	r0, [r7, #8]
 8005b90:	f000 f88c 	bl	8005cac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b9e:	2b40      	cmp	r3, #64	; 0x40
 8005ba0:	bf0c      	ite	eq
 8005ba2:	2301      	moveq	r3, #1
 8005ba4:	2300      	movne	r3, #0
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b22      	cmp	r3, #34	; 0x22
 8005bb4:	d108      	bne.n	8005bc8 <UART_DMAError+0x7a>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d005      	beq.n	8005bc8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005bc2:	68b8      	ldr	r0, [r7, #8]
 8005bc4:	f000 f888 	bl	8005cd8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bcc:	f043 0210 	orr.w	r2, r3, #16
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bd4:	68b8      	ldr	r0, [r7, #8]
 8005bd6:	f7ff ff07 	bl	80059e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bda:	bf00      	nop
 8005bdc:	3710      	adds	r7, #16
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
	...

08005be4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	4613      	mov	r3, r2
 8005bf0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005bf2:	68ba      	ldr	r2, [r7, #8]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	88fa      	ldrh	r2, [r7, #6]
 8005bfc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2222      	movs	r2, #34	; 0x22
 8005c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c10:	4a23      	ldr	r2, [pc, #140]	; (8005ca0 <UART_Start_Receive_DMA+0xbc>)
 8005c12:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c18:	4a22      	ldr	r2, [pc, #136]	; (8005ca4 <UART_Start_Receive_DMA+0xc0>)
 8005c1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c20:	4a21      	ldr	r2, [pc, #132]	; (8005ca8 <UART_Start_Receive_DMA+0xc4>)
 8005c22:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c28:	2200      	movs	r2, #0
 8005c2a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005c2c:	f107 0308 	add.w	r3, r7, #8
 8005c30:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	3304      	adds	r3, #4
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	88fb      	ldrh	r3, [r7, #6]
 8005c44:	f7fd f812 	bl	8002c6c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005c48:	2300      	movs	r3, #0
 8005c4a:	613b      	str	r3, [r7, #16]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	613b      	str	r3, [r7, #16]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	613b      	str	r3, [r7, #16]
 8005c5c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68da      	ldr	r2, [r3, #12]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c74:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	695a      	ldr	r2, [r3, #20]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f042 0201 	orr.w	r2, r2, #1
 8005c84:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	695a      	ldr	r2, [r3, #20]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c94:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3718      	adds	r7, #24
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	08005a83 	.word	0x08005a83
 8005ca4:	08005b19 	.word	0x08005b19
 8005ca8:	08005b4f 	.word	0x08005b4f

08005cac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68da      	ldr	r2, [r3, #12]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005cc2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2220      	movs	r2, #32
 8005cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68da      	ldr	r2, [r3, #12]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005cee:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	695a      	ldr	r2, [r3, #20]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f022 0201 	bic.w	r2, r2, #1
 8005cfe:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d107      	bne.n	8005d18 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68da      	ldr	r2, [r3, #12]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f022 0210 	bic.w	r2, r2, #16
 8005d16:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2220      	movs	r2, #32
 8005d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005d26:	bf00      	nop
 8005d28:	370c      	adds	r7, #12
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b084      	sub	sp, #16
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2200      	movs	r2, #0
 8005d44:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	f7ff fe4b 	bl	80059e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d52:	bf00      	nop
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b085      	sub	sp, #20
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b21      	cmp	r3, #33	; 0x21
 8005d6c:	d13e      	bne.n	8005dec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d76:	d114      	bne.n	8005da2 <UART_Transmit_IT+0x48>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d110      	bne.n	8005da2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a1b      	ldr	r3, [r3, #32]
 8005d84:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	881b      	ldrh	r3, [r3, #0]
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d94:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	1c9a      	adds	r2, r3, #2
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	621a      	str	r2, [r3, #32]
 8005da0:	e008      	b.n	8005db4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	1c59      	adds	r1, r3, #1
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	6211      	str	r1, [r2, #32]
 8005dac:	781a      	ldrb	r2, [r3, #0]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10f      	bne.n	8005de8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68da      	ldr	r2, [r3, #12]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005dd6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68da      	ldr	r2, [r3, #12]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005de6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005de8:	2300      	movs	r3, #0
 8005dea:	e000      	b.n	8005dee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005dec:	2302      	movs	r3, #2
  }
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3714      	adds	r7, #20
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b082      	sub	sp, #8
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68da      	ldr	r2, [r3, #12]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e10:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2220      	movs	r2, #32
 8005e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f7fb fd80 	bl	8001920 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3708      	adds	r7, #8
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b084      	sub	sp, #16
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b22      	cmp	r3, #34	; 0x22
 8005e3c:	f040 8087 	bne.w	8005f4e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e48:	d117      	bne.n	8005e7a <UART_Receive_IT+0x50>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d113      	bne.n	8005e7a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005e52:	2300      	movs	r3, #0
 8005e54:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e72:	1c9a      	adds	r2, r3, #2
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	629a      	str	r2, [r3, #40]	; 0x28
 8005e78:	e026      	b.n	8005ec8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8005e80:	2300      	movs	r3, #0
 8005e82:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e8c:	d007      	beq.n	8005e9e <UART_Receive_IT+0x74>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d10a      	bne.n	8005eac <UART_Receive_IT+0x82>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d106      	bne.n	8005eac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	b2da      	uxtb	r2, r3
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	701a      	strb	r2, [r3, #0]
 8005eaa:	e008      	b.n	8005ebe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005eb8:	b2da      	uxtb	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec2:	1c5a      	adds	r2, r3, #1
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d136      	bne.n	8005f4a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68da      	ldr	r2, [r3, #12]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f022 0220 	bic.w	r2, r2, #32
 8005eea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68da      	ldr	r2, [r3, #12]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005efa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	695a      	ldr	r2, [r3, #20]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f022 0201 	bic.w	r2, r2, #1
 8005f0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2220      	movs	r2, #32
 8005f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d10e      	bne.n	8005f3a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68da      	ldr	r2, [r3, #12]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f022 0210 	bic.w	r2, r2, #16
 8005f2a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f30:	4619      	mov	r1, r3
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f7ff fd62 	bl	80059fc <HAL_UARTEx_RxEventCallback>
 8005f38:	e002      	b.n	8005f40 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f7fb fcfa 	bl	8001934 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8005f46:	2300      	movs	r3, #0
 8005f48:	e002      	b.n	8005f50 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	e000      	b.n	8005f50 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005f4e:	2302      	movs	r3, #2
  }
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3710      	adds	r7, #16
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f5c:	b09f      	sub	sp, #124	; 0x7c
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005f6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f6e:	68d9      	ldr	r1, [r3, #12]
 8005f70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	ea40 0301 	orr.w	r3, r0, r1
 8005f78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f7c:	689a      	ldr	r2, [r3, #8]
 8005f7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	431a      	orrs	r2, r3
 8005f84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f86:	695b      	ldr	r3, [r3, #20]
 8005f88:	431a      	orrs	r2, r3
 8005f8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f8c:	69db      	ldr	r3, [r3, #28]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005f9c:	f021 010c 	bic.w	r1, r1, #12
 8005fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fa6:	430b      	orrs	r3, r1
 8005fa8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005faa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	695b      	ldr	r3, [r3, #20]
 8005fb0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005fb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fb6:	6999      	ldr	r1, [r3, #24]
 8005fb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	ea40 0301 	orr.w	r3, r0, r1
 8005fc0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	4bc5      	ldr	r3, [pc, #788]	; (80062dc <UART_SetConfig+0x384>)
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d004      	beq.n	8005fd6 <UART_SetConfig+0x7e>
 8005fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	4bc3      	ldr	r3, [pc, #780]	; (80062e0 <UART_SetConfig+0x388>)
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d103      	bne.n	8005fde <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005fd6:	f7fe f8f7 	bl	80041c8 <HAL_RCC_GetPCLK2Freq>
 8005fda:	6778      	str	r0, [r7, #116]	; 0x74
 8005fdc:	e002      	b.n	8005fe4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005fde:	f7fe f8df 	bl	80041a0 <HAL_RCC_GetPCLK1Freq>
 8005fe2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fe6:	69db      	ldr	r3, [r3, #28]
 8005fe8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fec:	f040 80b6 	bne.w	800615c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ff0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ff2:	461c      	mov	r4, r3
 8005ff4:	f04f 0500 	mov.w	r5, #0
 8005ff8:	4622      	mov	r2, r4
 8005ffa:	462b      	mov	r3, r5
 8005ffc:	1891      	adds	r1, r2, r2
 8005ffe:	6439      	str	r1, [r7, #64]	; 0x40
 8006000:	415b      	adcs	r3, r3
 8006002:	647b      	str	r3, [r7, #68]	; 0x44
 8006004:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006008:	1912      	adds	r2, r2, r4
 800600a:	eb45 0303 	adc.w	r3, r5, r3
 800600e:	f04f 0000 	mov.w	r0, #0
 8006012:	f04f 0100 	mov.w	r1, #0
 8006016:	00d9      	lsls	r1, r3, #3
 8006018:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800601c:	00d0      	lsls	r0, r2, #3
 800601e:	4602      	mov	r2, r0
 8006020:	460b      	mov	r3, r1
 8006022:	1911      	adds	r1, r2, r4
 8006024:	6639      	str	r1, [r7, #96]	; 0x60
 8006026:	416b      	adcs	r3, r5
 8006028:	667b      	str	r3, [r7, #100]	; 0x64
 800602a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	461a      	mov	r2, r3
 8006030:	f04f 0300 	mov.w	r3, #0
 8006034:	1891      	adds	r1, r2, r2
 8006036:	63b9      	str	r1, [r7, #56]	; 0x38
 8006038:	415b      	adcs	r3, r3
 800603a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800603c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006040:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006044:	f7fa fdd0 	bl	8000be8 <__aeabi_uldivmod>
 8006048:	4602      	mov	r2, r0
 800604a:	460b      	mov	r3, r1
 800604c:	4ba5      	ldr	r3, [pc, #660]	; (80062e4 <UART_SetConfig+0x38c>)
 800604e:	fba3 2302 	umull	r2, r3, r3, r2
 8006052:	095b      	lsrs	r3, r3, #5
 8006054:	011e      	lsls	r6, r3, #4
 8006056:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006058:	461c      	mov	r4, r3
 800605a:	f04f 0500 	mov.w	r5, #0
 800605e:	4622      	mov	r2, r4
 8006060:	462b      	mov	r3, r5
 8006062:	1891      	adds	r1, r2, r2
 8006064:	6339      	str	r1, [r7, #48]	; 0x30
 8006066:	415b      	adcs	r3, r3
 8006068:	637b      	str	r3, [r7, #52]	; 0x34
 800606a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800606e:	1912      	adds	r2, r2, r4
 8006070:	eb45 0303 	adc.w	r3, r5, r3
 8006074:	f04f 0000 	mov.w	r0, #0
 8006078:	f04f 0100 	mov.w	r1, #0
 800607c:	00d9      	lsls	r1, r3, #3
 800607e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006082:	00d0      	lsls	r0, r2, #3
 8006084:	4602      	mov	r2, r0
 8006086:	460b      	mov	r3, r1
 8006088:	1911      	adds	r1, r2, r4
 800608a:	65b9      	str	r1, [r7, #88]	; 0x58
 800608c:	416b      	adcs	r3, r5
 800608e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006090:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	461a      	mov	r2, r3
 8006096:	f04f 0300 	mov.w	r3, #0
 800609a:	1891      	adds	r1, r2, r2
 800609c:	62b9      	str	r1, [r7, #40]	; 0x28
 800609e:	415b      	adcs	r3, r3
 80060a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80060a6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80060aa:	f7fa fd9d 	bl	8000be8 <__aeabi_uldivmod>
 80060ae:	4602      	mov	r2, r0
 80060b0:	460b      	mov	r3, r1
 80060b2:	4b8c      	ldr	r3, [pc, #560]	; (80062e4 <UART_SetConfig+0x38c>)
 80060b4:	fba3 1302 	umull	r1, r3, r3, r2
 80060b8:	095b      	lsrs	r3, r3, #5
 80060ba:	2164      	movs	r1, #100	; 0x64
 80060bc:	fb01 f303 	mul.w	r3, r1, r3
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	00db      	lsls	r3, r3, #3
 80060c4:	3332      	adds	r3, #50	; 0x32
 80060c6:	4a87      	ldr	r2, [pc, #540]	; (80062e4 <UART_SetConfig+0x38c>)
 80060c8:	fba2 2303 	umull	r2, r3, r2, r3
 80060cc:	095b      	lsrs	r3, r3, #5
 80060ce:	005b      	lsls	r3, r3, #1
 80060d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80060d4:	441e      	add	r6, r3
 80060d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060d8:	4618      	mov	r0, r3
 80060da:	f04f 0100 	mov.w	r1, #0
 80060de:	4602      	mov	r2, r0
 80060e0:	460b      	mov	r3, r1
 80060e2:	1894      	adds	r4, r2, r2
 80060e4:	623c      	str	r4, [r7, #32]
 80060e6:	415b      	adcs	r3, r3
 80060e8:	627b      	str	r3, [r7, #36]	; 0x24
 80060ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80060ee:	1812      	adds	r2, r2, r0
 80060f0:	eb41 0303 	adc.w	r3, r1, r3
 80060f4:	f04f 0400 	mov.w	r4, #0
 80060f8:	f04f 0500 	mov.w	r5, #0
 80060fc:	00dd      	lsls	r5, r3, #3
 80060fe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006102:	00d4      	lsls	r4, r2, #3
 8006104:	4622      	mov	r2, r4
 8006106:	462b      	mov	r3, r5
 8006108:	1814      	adds	r4, r2, r0
 800610a:	653c      	str	r4, [r7, #80]	; 0x50
 800610c:	414b      	adcs	r3, r1
 800610e:	657b      	str	r3, [r7, #84]	; 0x54
 8006110:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	461a      	mov	r2, r3
 8006116:	f04f 0300 	mov.w	r3, #0
 800611a:	1891      	adds	r1, r2, r2
 800611c:	61b9      	str	r1, [r7, #24]
 800611e:	415b      	adcs	r3, r3
 8006120:	61fb      	str	r3, [r7, #28]
 8006122:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006126:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800612a:	f7fa fd5d 	bl	8000be8 <__aeabi_uldivmod>
 800612e:	4602      	mov	r2, r0
 8006130:	460b      	mov	r3, r1
 8006132:	4b6c      	ldr	r3, [pc, #432]	; (80062e4 <UART_SetConfig+0x38c>)
 8006134:	fba3 1302 	umull	r1, r3, r3, r2
 8006138:	095b      	lsrs	r3, r3, #5
 800613a:	2164      	movs	r1, #100	; 0x64
 800613c:	fb01 f303 	mul.w	r3, r1, r3
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	00db      	lsls	r3, r3, #3
 8006144:	3332      	adds	r3, #50	; 0x32
 8006146:	4a67      	ldr	r2, [pc, #412]	; (80062e4 <UART_SetConfig+0x38c>)
 8006148:	fba2 2303 	umull	r2, r3, r2, r3
 800614c:	095b      	lsrs	r3, r3, #5
 800614e:	f003 0207 	and.w	r2, r3, #7
 8006152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4432      	add	r2, r6
 8006158:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800615a:	e0b9      	b.n	80062d0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800615c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800615e:	461c      	mov	r4, r3
 8006160:	f04f 0500 	mov.w	r5, #0
 8006164:	4622      	mov	r2, r4
 8006166:	462b      	mov	r3, r5
 8006168:	1891      	adds	r1, r2, r2
 800616a:	6139      	str	r1, [r7, #16]
 800616c:	415b      	adcs	r3, r3
 800616e:	617b      	str	r3, [r7, #20]
 8006170:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006174:	1912      	adds	r2, r2, r4
 8006176:	eb45 0303 	adc.w	r3, r5, r3
 800617a:	f04f 0000 	mov.w	r0, #0
 800617e:	f04f 0100 	mov.w	r1, #0
 8006182:	00d9      	lsls	r1, r3, #3
 8006184:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006188:	00d0      	lsls	r0, r2, #3
 800618a:	4602      	mov	r2, r0
 800618c:	460b      	mov	r3, r1
 800618e:	eb12 0804 	adds.w	r8, r2, r4
 8006192:	eb43 0905 	adc.w	r9, r3, r5
 8006196:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	4618      	mov	r0, r3
 800619c:	f04f 0100 	mov.w	r1, #0
 80061a0:	f04f 0200 	mov.w	r2, #0
 80061a4:	f04f 0300 	mov.w	r3, #0
 80061a8:	008b      	lsls	r3, r1, #2
 80061aa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80061ae:	0082      	lsls	r2, r0, #2
 80061b0:	4640      	mov	r0, r8
 80061b2:	4649      	mov	r1, r9
 80061b4:	f7fa fd18 	bl	8000be8 <__aeabi_uldivmod>
 80061b8:	4602      	mov	r2, r0
 80061ba:	460b      	mov	r3, r1
 80061bc:	4b49      	ldr	r3, [pc, #292]	; (80062e4 <UART_SetConfig+0x38c>)
 80061be:	fba3 2302 	umull	r2, r3, r3, r2
 80061c2:	095b      	lsrs	r3, r3, #5
 80061c4:	011e      	lsls	r6, r3, #4
 80061c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061c8:	4618      	mov	r0, r3
 80061ca:	f04f 0100 	mov.w	r1, #0
 80061ce:	4602      	mov	r2, r0
 80061d0:	460b      	mov	r3, r1
 80061d2:	1894      	adds	r4, r2, r2
 80061d4:	60bc      	str	r4, [r7, #8]
 80061d6:	415b      	adcs	r3, r3
 80061d8:	60fb      	str	r3, [r7, #12]
 80061da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061de:	1812      	adds	r2, r2, r0
 80061e0:	eb41 0303 	adc.w	r3, r1, r3
 80061e4:	f04f 0400 	mov.w	r4, #0
 80061e8:	f04f 0500 	mov.w	r5, #0
 80061ec:	00dd      	lsls	r5, r3, #3
 80061ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80061f2:	00d4      	lsls	r4, r2, #3
 80061f4:	4622      	mov	r2, r4
 80061f6:	462b      	mov	r3, r5
 80061f8:	1814      	adds	r4, r2, r0
 80061fa:	64bc      	str	r4, [r7, #72]	; 0x48
 80061fc:	414b      	adcs	r3, r1
 80061fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	4618      	mov	r0, r3
 8006206:	f04f 0100 	mov.w	r1, #0
 800620a:	f04f 0200 	mov.w	r2, #0
 800620e:	f04f 0300 	mov.w	r3, #0
 8006212:	008b      	lsls	r3, r1, #2
 8006214:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006218:	0082      	lsls	r2, r0, #2
 800621a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800621e:	f7fa fce3 	bl	8000be8 <__aeabi_uldivmod>
 8006222:	4602      	mov	r2, r0
 8006224:	460b      	mov	r3, r1
 8006226:	4b2f      	ldr	r3, [pc, #188]	; (80062e4 <UART_SetConfig+0x38c>)
 8006228:	fba3 1302 	umull	r1, r3, r3, r2
 800622c:	095b      	lsrs	r3, r3, #5
 800622e:	2164      	movs	r1, #100	; 0x64
 8006230:	fb01 f303 	mul.w	r3, r1, r3
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	011b      	lsls	r3, r3, #4
 8006238:	3332      	adds	r3, #50	; 0x32
 800623a:	4a2a      	ldr	r2, [pc, #168]	; (80062e4 <UART_SetConfig+0x38c>)
 800623c:	fba2 2303 	umull	r2, r3, r2, r3
 8006240:	095b      	lsrs	r3, r3, #5
 8006242:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006246:	441e      	add	r6, r3
 8006248:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800624a:	4618      	mov	r0, r3
 800624c:	f04f 0100 	mov.w	r1, #0
 8006250:	4602      	mov	r2, r0
 8006252:	460b      	mov	r3, r1
 8006254:	1894      	adds	r4, r2, r2
 8006256:	603c      	str	r4, [r7, #0]
 8006258:	415b      	adcs	r3, r3
 800625a:	607b      	str	r3, [r7, #4]
 800625c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006260:	1812      	adds	r2, r2, r0
 8006262:	eb41 0303 	adc.w	r3, r1, r3
 8006266:	f04f 0400 	mov.w	r4, #0
 800626a:	f04f 0500 	mov.w	r5, #0
 800626e:	00dd      	lsls	r5, r3, #3
 8006270:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006274:	00d4      	lsls	r4, r2, #3
 8006276:	4622      	mov	r2, r4
 8006278:	462b      	mov	r3, r5
 800627a:	eb12 0a00 	adds.w	sl, r2, r0
 800627e:	eb43 0b01 	adc.w	fp, r3, r1
 8006282:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	4618      	mov	r0, r3
 8006288:	f04f 0100 	mov.w	r1, #0
 800628c:	f04f 0200 	mov.w	r2, #0
 8006290:	f04f 0300 	mov.w	r3, #0
 8006294:	008b      	lsls	r3, r1, #2
 8006296:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800629a:	0082      	lsls	r2, r0, #2
 800629c:	4650      	mov	r0, sl
 800629e:	4659      	mov	r1, fp
 80062a0:	f7fa fca2 	bl	8000be8 <__aeabi_uldivmod>
 80062a4:	4602      	mov	r2, r0
 80062a6:	460b      	mov	r3, r1
 80062a8:	4b0e      	ldr	r3, [pc, #56]	; (80062e4 <UART_SetConfig+0x38c>)
 80062aa:	fba3 1302 	umull	r1, r3, r3, r2
 80062ae:	095b      	lsrs	r3, r3, #5
 80062b0:	2164      	movs	r1, #100	; 0x64
 80062b2:	fb01 f303 	mul.w	r3, r1, r3
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	011b      	lsls	r3, r3, #4
 80062ba:	3332      	adds	r3, #50	; 0x32
 80062bc:	4a09      	ldr	r2, [pc, #36]	; (80062e4 <UART_SetConfig+0x38c>)
 80062be:	fba2 2303 	umull	r2, r3, r2, r3
 80062c2:	095b      	lsrs	r3, r3, #5
 80062c4:	f003 020f 	and.w	r2, r3, #15
 80062c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4432      	add	r2, r6
 80062ce:	609a      	str	r2, [r3, #8]
}
 80062d0:	bf00      	nop
 80062d2:	377c      	adds	r7, #124	; 0x7c
 80062d4:	46bd      	mov	sp, r7
 80062d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062da:	bf00      	nop
 80062dc:	40011000 	.word	0x40011000
 80062e0:	40011400 	.word	0x40011400
 80062e4:	51eb851f 	.word	0x51eb851f

080062e8 <atoi>:
 80062e8:	220a      	movs	r2, #10
 80062ea:	2100      	movs	r1, #0
 80062ec:	f000 bd9c 	b.w	8006e28 <strtol>

080062f0 <__errno>:
 80062f0:	4b01      	ldr	r3, [pc, #4]	; (80062f8 <__errno+0x8>)
 80062f2:	6818      	ldr	r0, [r3, #0]
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	20000014 	.word	0x20000014

080062fc <__libc_init_array>:
 80062fc:	b570      	push	{r4, r5, r6, lr}
 80062fe:	4d0d      	ldr	r5, [pc, #52]	; (8006334 <__libc_init_array+0x38>)
 8006300:	4c0d      	ldr	r4, [pc, #52]	; (8006338 <__libc_init_array+0x3c>)
 8006302:	1b64      	subs	r4, r4, r5
 8006304:	10a4      	asrs	r4, r4, #2
 8006306:	2600      	movs	r6, #0
 8006308:	42a6      	cmp	r6, r4
 800630a:	d109      	bne.n	8006320 <__libc_init_array+0x24>
 800630c:	4d0b      	ldr	r5, [pc, #44]	; (800633c <__libc_init_array+0x40>)
 800630e:	4c0c      	ldr	r4, [pc, #48]	; (8006340 <__libc_init_array+0x44>)
 8006310:	f003 f974 	bl	80095fc <_init>
 8006314:	1b64      	subs	r4, r4, r5
 8006316:	10a4      	asrs	r4, r4, #2
 8006318:	2600      	movs	r6, #0
 800631a:	42a6      	cmp	r6, r4
 800631c:	d105      	bne.n	800632a <__libc_init_array+0x2e>
 800631e:	bd70      	pop	{r4, r5, r6, pc}
 8006320:	f855 3b04 	ldr.w	r3, [r5], #4
 8006324:	4798      	blx	r3
 8006326:	3601      	adds	r6, #1
 8006328:	e7ee      	b.n	8006308 <__libc_init_array+0xc>
 800632a:	f855 3b04 	ldr.w	r3, [r5], #4
 800632e:	4798      	blx	r3
 8006330:	3601      	adds	r6, #1
 8006332:	e7f2      	b.n	800631a <__libc_init_array+0x1e>
 8006334:	08009ad0 	.word	0x08009ad0
 8006338:	08009ad0 	.word	0x08009ad0
 800633c:	08009ad0 	.word	0x08009ad0
 8006340:	08009ad4 	.word	0x08009ad4

08006344 <memset>:
 8006344:	4402      	add	r2, r0
 8006346:	4603      	mov	r3, r0
 8006348:	4293      	cmp	r3, r2
 800634a:	d100      	bne.n	800634e <memset+0xa>
 800634c:	4770      	bx	lr
 800634e:	f803 1b01 	strb.w	r1, [r3], #1
 8006352:	e7f9      	b.n	8006348 <memset+0x4>

08006354 <__cvt>:
 8006354:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006358:	ec55 4b10 	vmov	r4, r5, d0
 800635c:	2d00      	cmp	r5, #0
 800635e:	460e      	mov	r6, r1
 8006360:	4619      	mov	r1, r3
 8006362:	462b      	mov	r3, r5
 8006364:	bfbb      	ittet	lt
 8006366:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800636a:	461d      	movlt	r5, r3
 800636c:	2300      	movge	r3, #0
 800636e:	232d      	movlt	r3, #45	; 0x2d
 8006370:	700b      	strb	r3, [r1, #0]
 8006372:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006374:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006378:	4691      	mov	r9, r2
 800637a:	f023 0820 	bic.w	r8, r3, #32
 800637e:	bfbc      	itt	lt
 8006380:	4622      	movlt	r2, r4
 8006382:	4614      	movlt	r4, r2
 8006384:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006388:	d005      	beq.n	8006396 <__cvt+0x42>
 800638a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800638e:	d100      	bne.n	8006392 <__cvt+0x3e>
 8006390:	3601      	adds	r6, #1
 8006392:	2102      	movs	r1, #2
 8006394:	e000      	b.n	8006398 <__cvt+0x44>
 8006396:	2103      	movs	r1, #3
 8006398:	ab03      	add	r3, sp, #12
 800639a:	9301      	str	r3, [sp, #4]
 800639c:	ab02      	add	r3, sp, #8
 800639e:	9300      	str	r3, [sp, #0]
 80063a0:	ec45 4b10 	vmov	d0, r4, r5
 80063a4:	4653      	mov	r3, sl
 80063a6:	4632      	mov	r2, r6
 80063a8:	f000 fdf2 	bl	8006f90 <_dtoa_r>
 80063ac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80063b0:	4607      	mov	r7, r0
 80063b2:	d102      	bne.n	80063ba <__cvt+0x66>
 80063b4:	f019 0f01 	tst.w	r9, #1
 80063b8:	d022      	beq.n	8006400 <__cvt+0xac>
 80063ba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80063be:	eb07 0906 	add.w	r9, r7, r6
 80063c2:	d110      	bne.n	80063e6 <__cvt+0x92>
 80063c4:	783b      	ldrb	r3, [r7, #0]
 80063c6:	2b30      	cmp	r3, #48	; 0x30
 80063c8:	d10a      	bne.n	80063e0 <__cvt+0x8c>
 80063ca:	2200      	movs	r2, #0
 80063cc:	2300      	movs	r3, #0
 80063ce:	4620      	mov	r0, r4
 80063d0:	4629      	mov	r1, r5
 80063d2:	f7fa fb79 	bl	8000ac8 <__aeabi_dcmpeq>
 80063d6:	b918      	cbnz	r0, 80063e0 <__cvt+0x8c>
 80063d8:	f1c6 0601 	rsb	r6, r6, #1
 80063dc:	f8ca 6000 	str.w	r6, [sl]
 80063e0:	f8da 3000 	ldr.w	r3, [sl]
 80063e4:	4499      	add	r9, r3
 80063e6:	2200      	movs	r2, #0
 80063e8:	2300      	movs	r3, #0
 80063ea:	4620      	mov	r0, r4
 80063ec:	4629      	mov	r1, r5
 80063ee:	f7fa fb6b 	bl	8000ac8 <__aeabi_dcmpeq>
 80063f2:	b108      	cbz	r0, 80063f8 <__cvt+0xa4>
 80063f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80063f8:	2230      	movs	r2, #48	; 0x30
 80063fa:	9b03      	ldr	r3, [sp, #12]
 80063fc:	454b      	cmp	r3, r9
 80063fe:	d307      	bcc.n	8006410 <__cvt+0xbc>
 8006400:	9b03      	ldr	r3, [sp, #12]
 8006402:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006404:	1bdb      	subs	r3, r3, r7
 8006406:	4638      	mov	r0, r7
 8006408:	6013      	str	r3, [r2, #0]
 800640a:	b004      	add	sp, #16
 800640c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006410:	1c59      	adds	r1, r3, #1
 8006412:	9103      	str	r1, [sp, #12]
 8006414:	701a      	strb	r2, [r3, #0]
 8006416:	e7f0      	b.n	80063fa <__cvt+0xa6>

08006418 <__exponent>:
 8006418:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800641a:	4603      	mov	r3, r0
 800641c:	2900      	cmp	r1, #0
 800641e:	bfb8      	it	lt
 8006420:	4249      	neglt	r1, r1
 8006422:	f803 2b02 	strb.w	r2, [r3], #2
 8006426:	bfb4      	ite	lt
 8006428:	222d      	movlt	r2, #45	; 0x2d
 800642a:	222b      	movge	r2, #43	; 0x2b
 800642c:	2909      	cmp	r1, #9
 800642e:	7042      	strb	r2, [r0, #1]
 8006430:	dd2a      	ble.n	8006488 <__exponent+0x70>
 8006432:	f10d 0407 	add.w	r4, sp, #7
 8006436:	46a4      	mov	ip, r4
 8006438:	270a      	movs	r7, #10
 800643a:	46a6      	mov	lr, r4
 800643c:	460a      	mov	r2, r1
 800643e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006442:	fb07 1516 	mls	r5, r7, r6, r1
 8006446:	3530      	adds	r5, #48	; 0x30
 8006448:	2a63      	cmp	r2, #99	; 0x63
 800644a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800644e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006452:	4631      	mov	r1, r6
 8006454:	dcf1      	bgt.n	800643a <__exponent+0x22>
 8006456:	3130      	adds	r1, #48	; 0x30
 8006458:	f1ae 0502 	sub.w	r5, lr, #2
 800645c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006460:	1c44      	adds	r4, r0, #1
 8006462:	4629      	mov	r1, r5
 8006464:	4561      	cmp	r1, ip
 8006466:	d30a      	bcc.n	800647e <__exponent+0x66>
 8006468:	f10d 0209 	add.w	r2, sp, #9
 800646c:	eba2 020e 	sub.w	r2, r2, lr
 8006470:	4565      	cmp	r5, ip
 8006472:	bf88      	it	hi
 8006474:	2200      	movhi	r2, #0
 8006476:	4413      	add	r3, r2
 8006478:	1a18      	subs	r0, r3, r0
 800647a:	b003      	add	sp, #12
 800647c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800647e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006482:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006486:	e7ed      	b.n	8006464 <__exponent+0x4c>
 8006488:	2330      	movs	r3, #48	; 0x30
 800648a:	3130      	adds	r1, #48	; 0x30
 800648c:	7083      	strb	r3, [r0, #2]
 800648e:	70c1      	strb	r1, [r0, #3]
 8006490:	1d03      	adds	r3, r0, #4
 8006492:	e7f1      	b.n	8006478 <__exponent+0x60>

08006494 <_printf_float>:
 8006494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006498:	ed2d 8b02 	vpush	{d8}
 800649c:	b08d      	sub	sp, #52	; 0x34
 800649e:	460c      	mov	r4, r1
 80064a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80064a4:	4616      	mov	r6, r2
 80064a6:	461f      	mov	r7, r3
 80064a8:	4605      	mov	r5, r0
 80064aa:	f001 fb6f 	bl	8007b8c <_localeconv_r>
 80064ae:	f8d0 a000 	ldr.w	sl, [r0]
 80064b2:	4650      	mov	r0, sl
 80064b4:	f7f9 fe8c 	bl	80001d0 <strlen>
 80064b8:	2300      	movs	r3, #0
 80064ba:	930a      	str	r3, [sp, #40]	; 0x28
 80064bc:	6823      	ldr	r3, [r4, #0]
 80064be:	9305      	str	r3, [sp, #20]
 80064c0:	f8d8 3000 	ldr.w	r3, [r8]
 80064c4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80064c8:	3307      	adds	r3, #7
 80064ca:	f023 0307 	bic.w	r3, r3, #7
 80064ce:	f103 0208 	add.w	r2, r3, #8
 80064d2:	f8c8 2000 	str.w	r2, [r8]
 80064d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064da:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80064de:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80064e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80064e6:	9307      	str	r3, [sp, #28]
 80064e8:	f8cd 8018 	str.w	r8, [sp, #24]
 80064ec:	ee08 0a10 	vmov	s16, r0
 80064f0:	4b9f      	ldr	r3, [pc, #636]	; (8006770 <_printf_float+0x2dc>)
 80064f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80064f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064fa:	f7fa fb17 	bl	8000b2c <__aeabi_dcmpun>
 80064fe:	bb88      	cbnz	r0, 8006564 <_printf_float+0xd0>
 8006500:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006504:	4b9a      	ldr	r3, [pc, #616]	; (8006770 <_printf_float+0x2dc>)
 8006506:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800650a:	f7fa faf1 	bl	8000af0 <__aeabi_dcmple>
 800650e:	bb48      	cbnz	r0, 8006564 <_printf_float+0xd0>
 8006510:	2200      	movs	r2, #0
 8006512:	2300      	movs	r3, #0
 8006514:	4640      	mov	r0, r8
 8006516:	4649      	mov	r1, r9
 8006518:	f7fa fae0 	bl	8000adc <__aeabi_dcmplt>
 800651c:	b110      	cbz	r0, 8006524 <_printf_float+0x90>
 800651e:	232d      	movs	r3, #45	; 0x2d
 8006520:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006524:	4b93      	ldr	r3, [pc, #588]	; (8006774 <_printf_float+0x2e0>)
 8006526:	4894      	ldr	r0, [pc, #592]	; (8006778 <_printf_float+0x2e4>)
 8006528:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800652c:	bf94      	ite	ls
 800652e:	4698      	movls	r8, r3
 8006530:	4680      	movhi	r8, r0
 8006532:	2303      	movs	r3, #3
 8006534:	6123      	str	r3, [r4, #16]
 8006536:	9b05      	ldr	r3, [sp, #20]
 8006538:	f023 0204 	bic.w	r2, r3, #4
 800653c:	6022      	str	r2, [r4, #0]
 800653e:	f04f 0900 	mov.w	r9, #0
 8006542:	9700      	str	r7, [sp, #0]
 8006544:	4633      	mov	r3, r6
 8006546:	aa0b      	add	r2, sp, #44	; 0x2c
 8006548:	4621      	mov	r1, r4
 800654a:	4628      	mov	r0, r5
 800654c:	f000 f9d8 	bl	8006900 <_printf_common>
 8006550:	3001      	adds	r0, #1
 8006552:	f040 8090 	bne.w	8006676 <_printf_float+0x1e2>
 8006556:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800655a:	b00d      	add	sp, #52	; 0x34
 800655c:	ecbd 8b02 	vpop	{d8}
 8006560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006564:	4642      	mov	r2, r8
 8006566:	464b      	mov	r3, r9
 8006568:	4640      	mov	r0, r8
 800656a:	4649      	mov	r1, r9
 800656c:	f7fa fade 	bl	8000b2c <__aeabi_dcmpun>
 8006570:	b140      	cbz	r0, 8006584 <_printf_float+0xf0>
 8006572:	464b      	mov	r3, r9
 8006574:	2b00      	cmp	r3, #0
 8006576:	bfbc      	itt	lt
 8006578:	232d      	movlt	r3, #45	; 0x2d
 800657a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800657e:	487f      	ldr	r0, [pc, #508]	; (800677c <_printf_float+0x2e8>)
 8006580:	4b7f      	ldr	r3, [pc, #508]	; (8006780 <_printf_float+0x2ec>)
 8006582:	e7d1      	b.n	8006528 <_printf_float+0x94>
 8006584:	6863      	ldr	r3, [r4, #4]
 8006586:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800658a:	9206      	str	r2, [sp, #24]
 800658c:	1c5a      	adds	r2, r3, #1
 800658e:	d13f      	bne.n	8006610 <_printf_float+0x17c>
 8006590:	2306      	movs	r3, #6
 8006592:	6063      	str	r3, [r4, #4]
 8006594:	9b05      	ldr	r3, [sp, #20]
 8006596:	6861      	ldr	r1, [r4, #4]
 8006598:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800659c:	2300      	movs	r3, #0
 800659e:	9303      	str	r3, [sp, #12]
 80065a0:	ab0a      	add	r3, sp, #40	; 0x28
 80065a2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80065a6:	ab09      	add	r3, sp, #36	; 0x24
 80065a8:	ec49 8b10 	vmov	d0, r8, r9
 80065ac:	9300      	str	r3, [sp, #0]
 80065ae:	6022      	str	r2, [r4, #0]
 80065b0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80065b4:	4628      	mov	r0, r5
 80065b6:	f7ff fecd 	bl	8006354 <__cvt>
 80065ba:	9b06      	ldr	r3, [sp, #24]
 80065bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065be:	2b47      	cmp	r3, #71	; 0x47
 80065c0:	4680      	mov	r8, r0
 80065c2:	d108      	bne.n	80065d6 <_printf_float+0x142>
 80065c4:	1cc8      	adds	r0, r1, #3
 80065c6:	db02      	blt.n	80065ce <_printf_float+0x13a>
 80065c8:	6863      	ldr	r3, [r4, #4]
 80065ca:	4299      	cmp	r1, r3
 80065cc:	dd41      	ble.n	8006652 <_printf_float+0x1be>
 80065ce:	f1ab 0b02 	sub.w	fp, fp, #2
 80065d2:	fa5f fb8b 	uxtb.w	fp, fp
 80065d6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80065da:	d820      	bhi.n	800661e <_printf_float+0x18a>
 80065dc:	3901      	subs	r1, #1
 80065de:	465a      	mov	r2, fp
 80065e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80065e4:	9109      	str	r1, [sp, #36]	; 0x24
 80065e6:	f7ff ff17 	bl	8006418 <__exponent>
 80065ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065ec:	1813      	adds	r3, r2, r0
 80065ee:	2a01      	cmp	r2, #1
 80065f0:	4681      	mov	r9, r0
 80065f2:	6123      	str	r3, [r4, #16]
 80065f4:	dc02      	bgt.n	80065fc <_printf_float+0x168>
 80065f6:	6822      	ldr	r2, [r4, #0]
 80065f8:	07d2      	lsls	r2, r2, #31
 80065fa:	d501      	bpl.n	8006600 <_printf_float+0x16c>
 80065fc:	3301      	adds	r3, #1
 80065fe:	6123      	str	r3, [r4, #16]
 8006600:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006604:	2b00      	cmp	r3, #0
 8006606:	d09c      	beq.n	8006542 <_printf_float+0xae>
 8006608:	232d      	movs	r3, #45	; 0x2d
 800660a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800660e:	e798      	b.n	8006542 <_printf_float+0xae>
 8006610:	9a06      	ldr	r2, [sp, #24]
 8006612:	2a47      	cmp	r2, #71	; 0x47
 8006614:	d1be      	bne.n	8006594 <_printf_float+0x100>
 8006616:	2b00      	cmp	r3, #0
 8006618:	d1bc      	bne.n	8006594 <_printf_float+0x100>
 800661a:	2301      	movs	r3, #1
 800661c:	e7b9      	b.n	8006592 <_printf_float+0xfe>
 800661e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006622:	d118      	bne.n	8006656 <_printf_float+0x1c2>
 8006624:	2900      	cmp	r1, #0
 8006626:	6863      	ldr	r3, [r4, #4]
 8006628:	dd0b      	ble.n	8006642 <_printf_float+0x1ae>
 800662a:	6121      	str	r1, [r4, #16]
 800662c:	b913      	cbnz	r3, 8006634 <_printf_float+0x1a0>
 800662e:	6822      	ldr	r2, [r4, #0]
 8006630:	07d0      	lsls	r0, r2, #31
 8006632:	d502      	bpl.n	800663a <_printf_float+0x1a6>
 8006634:	3301      	adds	r3, #1
 8006636:	440b      	add	r3, r1
 8006638:	6123      	str	r3, [r4, #16]
 800663a:	65a1      	str	r1, [r4, #88]	; 0x58
 800663c:	f04f 0900 	mov.w	r9, #0
 8006640:	e7de      	b.n	8006600 <_printf_float+0x16c>
 8006642:	b913      	cbnz	r3, 800664a <_printf_float+0x1b6>
 8006644:	6822      	ldr	r2, [r4, #0]
 8006646:	07d2      	lsls	r2, r2, #31
 8006648:	d501      	bpl.n	800664e <_printf_float+0x1ba>
 800664a:	3302      	adds	r3, #2
 800664c:	e7f4      	b.n	8006638 <_printf_float+0x1a4>
 800664e:	2301      	movs	r3, #1
 8006650:	e7f2      	b.n	8006638 <_printf_float+0x1a4>
 8006652:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006656:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006658:	4299      	cmp	r1, r3
 800665a:	db05      	blt.n	8006668 <_printf_float+0x1d4>
 800665c:	6823      	ldr	r3, [r4, #0]
 800665e:	6121      	str	r1, [r4, #16]
 8006660:	07d8      	lsls	r0, r3, #31
 8006662:	d5ea      	bpl.n	800663a <_printf_float+0x1a6>
 8006664:	1c4b      	adds	r3, r1, #1
 8006666:	e7e7      	b.n	8006638 <_printf_float+0x1a4>
 8006668:	2900      	cmp	r1, #0
 800666a:	bfd4      	ite	le
 800666c:	f1c1 0202 	rsble	r2, r1, #2
 8006670:	2201      	movgt	r2, #1
 8006672:	4413      	add	r3, r2
 8006674:	e7e0      	b.n	8006638 <_printf_float+0x1a4>
 8006676:	6823      	ldr	r3, [r4, #0]
 8006678:	055a      	lsls	r2, r3, #21
 800667a:	d407      	bmi.n	800668c <_printf_float+0x1f8>
 800667c:	6923      	ldr	r3, [r4, #16]
 800667e:	4642      	mov	r2, r8
 8006680:	4631      	mov	r1, r6
 8006682:	4628      	mov	r0, r5
 8006684:	47b8      	blx	r7
 8006686:	3001      	adds	r0, #1
 8006688:	d12c      	bne.n	80066e4 <_printf_float+0x250>
 800668a:	e764      	b.n	8006556 <_printf_float+0xc2>
 800668c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006690:	f240 80e0 	bls.w	8006854 <_printf_float+0x3c0>
 8006694:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006698:	2200      	movs	r2, #0
 800669a:	2300      	movs	r3, #0
 800669c:	f7fa fa14 	bl	8000ac8 <__aeabi_dcmpeq>
 80066a0:	2800      	cmp	r0, #0
 80066a2:	d034      	beq.n	800670e <_printf_float+0x27a>
 80066a4:	4a37      	ldr	r2, [pc, #220]	; (8006784 <_printf_float+0x2f0>)
 80066a6:	2301      	movs	r3, #1
 80066a8:	4631      	mov	r1, r6
 80066aa:	4628      	mov	r0, r5
 80066ac:	47b8      	blx	r7
 80066ae:	3001      	adds	r0, #1
 80066b0:	f43f af51 	beq.w	8006556 <_printf_float+0xc2>
 80066b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066b8:	429a      	cmp	r2, r3
 80066ba:	db02      	blt.n	80066c2 <_printf_float+0x22e>
 80066bc:	6823      	ldr	r3, [r4, #0]
 80066be:	07d8      	lsls	r0, r3, #31
 80066c0:	d510      	bpl.n	80066e4 <_printf_float+0x250>
 80066c2:	ee18 3a10 	vmov	r3, s16
 80066c6:	4652      	mov	r2, sl
 80066c8:	4631      	mov	r1, r6
 80066ca:	4628      	mov	r0, r5
 80066cc:	47b8      	blx	r7
 80066ce:	3001      	adds	r0, #1
 80066d0:	f43f af41 	beq.w	8006556 <_printf_float+0xc2>
 80066d4:	f04f 0800 	mov.w	r8, #0
 80066d8:	f104 091a 	add.w	r9, r4, #26
 80066dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066de:	3b01      	subs	r3, #1
 80066e0:	4543      	cmp	r3, r8
 80066e2:	dc09      	bgt.n	80066f8 <_printf_float+0x264>
 80066e4:	6823      	ldr	r3, [r4, #0]
 80066e6:	079b      	lsls	r3, r3, #30
 80066e8:	f100 8105 	bmi.w	80068f6 <_printf_float+0x462>
 80066ec:	68e0      	ldr	r0, [r4, #12]
 80066ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066f0:	4298      	cmp	r0, r3
 80066f2:	bfb8      	it	lt
 80066f4:	4618      	movlt	r0, r3
 80066f6:	e730      	b.n	800655a <_printf_float+0xc6>
 80066f8:	2301      	movs	r3, #1
 80066fa:	464a      	mov	r2, r9
 80066fc:	4631      	mov	r1, r6
 80066fe:	4628      	mov	r0, r5
 8006700:	47b8      	blx	r7
 8006702:	3001      	adds	r0, #1
 8006704:	f43f af27 	beq.w	8006556 <_printf_float+0xc2>
 8006708:	f108 0801 	add.w	r8, r8, #1
 800670c:	e7e6      	b.n	80066dc <_printf_float+0x248>
 800670e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006710:	2b00      	cmp	r3, #0
 8006712:	dc39      	bgt.n	8006788 <_printf_float+0x2f4>
 8006714:	4a1b      	ldr	r2, [pc, #108]	; (8006784 <_printf_float+0x2f0>)
 8006716:	2301      	movs	r3, #1
 8006718:	4631      	mov	r1, r6
 800671a:	4628      	mov	r0, r5
 800671c:	47b8      	blx	r7
 800671e:	3001      	adds	r0, #1
 8006720:	f43f af19 	beq.w	8006556 <_printf_float+0xc2>
 8006724:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006728:	4313      	orrs	r3, r2
 800672a:	d102      	bne.n	8006732 <_printf_float+0x29e>
 800672c:	6823      	ldr	r3, [r4, #0]
 800672e:	07d9      	lsls	r1, r3, #31
 8006730:	d5d8      	bpl.n	80066e4 <_printf_float+0x250>
 8006732:	ee18 3a10 	vmov	r3, s16
 8006736:	4652      	mov	r2, sl
 8006738:	4631      	mov	r1, r6
 800673a:	4628      	mov	r0, r5
 800673c:	47b8      	blx	r7
 800673e:	3001      	adds	r0, #1
 8006740:	f43f af09 	beq.w	8006556 <_printf_float+0xc2>
 8006744:	f04f 0900 	mov.w	r9, #0
 8006748:	f104 0a1a 	add.w	sl, r4, #26
 800674c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800674e:	425b      	negs	r3, r3
 8006750:	454b      	cmp	r3, r9
 8006752:	dc01      	bgt.n	8006758 <_printf_float+0x2c4>
 8006754:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006756:	e792      	b.n	800667e <_printf_float+0x1ea>
 8006758:	2301      	movs	r3, #1
 800675a:	4652      	mov	r2, sl
 800675c:	4631      	mov	r1, r6
 800675e:	4628      	mov	r0, r5
 8006760:	47b8      	blx	r7
 8006762:	3001      	adds	r0, #1
 8006764:	f43f aef7 	beq.w	8006556 <_printf_float+0xc2>
 8006768:	f109 0901 	add.w	r9, r9, #1
 800676c:	e7ee      	b.n	800674c <_printf_float+0x2b8>
 800676e:	bf00      	nop
 8006770:	7fefffff 	.word	0x7fefffff
 8006774:	0800964c 	.word	0x0800964c
 8006778:	08009650 	.word	0x08009650
 800677c:	08009658 	.word	0x08009658
 8006780:	08009654 	.word	0x08009654
 8006784:	0800965c 	.word	0x0800965c
 8006788:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800678a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800678c:	429a      	cmp	r2, r3
 800678e:	bfa8      	it	ge
 8006790:	461a      	movge	r2, r3
 8006792:	2a00      	cmp	r2, #0
 8006794:	4691      	mov	r9, r2
 8006796:	dc37      	bgt.n	8006808 <_printf_float+0x374>
 8006798:	f04f 0b00 	mov.w	fp, #0
 800679c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067a0:	f104 021a 	add.w	r2, r4, #26
 80067a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80067a6:	9305      	str	r3, [sp, #20]
 80067a8:	eba3 0309 	sub.w	r3, r3, r9
 80067ac:	455b      	cmp	r3, fp
 80067ae:	dc33      	bgt.n	8006818 <_printf_float+0x384>
 80067b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067b4:	429a      	cmp	r2, r3
 80067b6:	db3b      	blt.n	8006830 <_printf_float+0x39c>
 80067b8:	6823      	ldr	r3, [r4, #0]
 80067ba:	07da      	lsls	r2, r3, #31
 80067bc:	d438      	bmi.n	8006830 <_printf_float+0x39c>
 80067be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067c0:	9b05      	ldr	r3, [sp, #20]
 80067c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	eba2 0901 	sub.w	r9, r2, r1
 80067ca:	4599      	cmp	r9, r3
 80067cc:	bfa8      	it	ge
 80067ce:	4699      	movge	r9, r3
 80067d0:	f1b9 0f00 	cmp.w	r9, #0
 80067d4:	dc35      	bgt.n	8006842 <_printf_float+0x3ae>
 80067d6:	f04f 0800 	mov.w	r8, #0
 80067da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067de:	f104 0a1a 	add.w	sl, r4, #26
 80067e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067e6:	1a9b      	subs	r3, r3, r2
 80067e8:	eba3 0309 	sub.w	r3, r3, r9
 80067ec:	4543      	cmp	r3, r8
 80067ee:	f77f af79 	ble.w	80066e4 <_printf_float+0x250>
 80067f2:	2301      	movs	r3, #1
 80067f4:	4652      	mov	r2, sl
 80067f6:	4631      	mov	r1, r6
 80067f8:	4628      	mov	r0, r5
 80067fa:	47b8      	blx	r7
 80067fc:	3001      	adds	r0, #1
 80067fe:	f43f aeaa 	beq.w	8006556 <_printf_float+0xc2>
 8006802:	f108 0801 	add.w	r8, r8, #1
 8006806:	e7ec      	b.n	80067e2 <_printf_float+0x34e>
 8006808:	4613      	mov	r3, r2
 800680a:	4631      	mov	r1, r6
 800680c:	4642      	mov	r2, r8
 800680e:	4628      	mov	r0, r5
 8006810:	47b8      	blx	r7
 8006812:	3001      	adds	r0, #1
 8006814:	d1c0      	bne.n	8006798 <_printf_float+0x304>
 8006816:	e69e      	b.n	8006556 <_printf_float+0xc2>
 8006818:	2301      	movs	r3, #1
 800681a:	4631      	mov	r1, r6
 800681c:	4628      	mov	r0, r5
 800681e:	9205      	str	r2, [sp, #20]
 8006820:	47b8      	blx	r7
 8006822:	3001      	adds	r0, #1
 8006824:	f43f ae97 	beq.w	8006556 <_printf_float+0xc2>
 8006828:	9a05      	ldr	r2, [sp, #20]
 800682a:	f10b 0b01 	add.w	fp, fp, #1
 800682e:	e7b9      	b.n	80067a4 <_printf_float+0x310>
 8006830:	ee18 3a10 	vmov	r3, s16
 8006834:	4652      	mov	r2, sl
 8006836:	4631      	mov	r1, r6
 8006838:	4628      	mov	r0, r5
 800683a:	47b8      	blx	r7
 800683c:	3001      	adds	r0, #1
 800683e:	d1be      	bne.n	80067be <_printf_float+0x32a>
 8006840:	e689      	b.n	8006556 <_printf_float+0xc2>
 8006842:	9a05      	ldr	r2, [sp, #20]
 8006844:	464b      	mov	r3, r9
 8006846:	4442      	add	r2, r8
 8006848:	4631      	mov	r1, r6
 800684a:	4628      	mov	r0, r5
 800684c:	47b8      	blx	r7
 800684e:	3001      	adds	r0, #1
 8006850:	d1c1      	bne.n	80067d6 <_printf_float+0x342>
 8006852:	e680      	b.n	8006556 <_printf_float+0xc2>
 8006854:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006856:	2a01      	cmp	r2, #1
 8006858:	dc01      	bgt.n	800685e <_printf_float+0x3ca>
 800685a:	07db      	lsls	r3, r3, #31
 800685c:	d538      	bpl.n	80068d0 <_printf_float+0x43c>
 800685e:	2301      	movs	r3, #1
 8006860:	4642      	mov	r2, r8
 8006862:	4631      	mov	r1, r6
 8006864:	4628      	mov	r0, r5
 8006866:	47b8      	blx	r7
 8006868:	3001      	adds	r0, #1
 800686a:	f43f ae74 	beq.w	8006556 <_printf_float+0xc2>
 800686e:	ee18 3a10 	vmov	r3, s16
 8006872:	4652      	mov	r2, sl
 8006874:	4631      	mov	r1, r6
 8006876:	4628      	mov	r0, r5
 8006878:	47b8      	blx	r7
 800687a:	3001      	adds	r0, #1
 800687c:	f43f ae6b 	beq.w	8006556 <_printf_float+0xc2>
 8006880:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006884:	2200      	movs	r2, #0
 8006886:	2300      	movs	r3, #0
 8006888:	f7fa f91e 	bl	8000ac8 <__aeabi_dcmpeq>
 800688c:	b9d8      	cbnz	r0, 80068c6 <_printf_float+0x432>
 800688e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006890:	f108 0201 	add.w	r2, r8, #1
 8006894:	3b01      	subs	r3, #1
 8006896:	4631      	mov	r1, r6
 8006898:	4628      	mov	r0, r5
 800689a:	47b8      	blx	r7
 800689c:	3001      	adds	r0, #1
 800689e:	d10e      	bne.n	80068be <_printf_float+0x42a>
 80068a0:	e659      	b.n	8006556 <_printf_float+0xc2>
 80068a2:	2301      	movs	r3, #1
 80068a4:	4652      	mov	r2, sl
 80068a6:	4631      	mov	r1, r6
 80068a8:	4628      	mov	r0, r5
 80068aa:	47b8      	blx	r7
 80068ac:	3001      	adds	r0, #1
 80068ae:	f43f ae52 	beq.w	8006556 <_printf_float+0xc2>
 80068b2:	f108 0801 	add.w	r8, r8, #1
 80068b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068b8:	3b01      	subs	r3, #1
 80068ba:	4543      	cmp	r3, r8
 80068bc:	dcf1      	bgt.n	80068a2 <_printf_float+0x40e>
 80068be:	464b      	mov	r3, r9
 80068c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80068c4:	e6dc      	b.n	8006680 <_printf_float+0x1ec>
 80068c6:	f04f 0800 	mov.w	r8, #0
 80068ca:	f104 0a1a 	add.w	sl, r4, #26
 80068ce:	e7f2      	b.n	80068b6 <_printf_float+0x422>
 80068d0:	2301      	movs	r3, #1
 80068d2:	4642      	mov	r2, r8
 80068d4:	e7df      	b.n	8006896 <_printf_float+0x402>
 80068d6:	2301      	movs	r3, #1
 80068d8:	464a      	mov	r2, r9
 80068da:	4631      	mov	r1, r6
 80068dc:	4628      	mov	r0, r5
 80068de:	47b8      	blx	r7
 80068e0:	3001      	adds	r0, #1
 80068e2:	f43f ae38 	beq.w	8006556 <_printf_float+0xc2>
 80068e6:	f108 0801 	add.w	r8, r8, #1
 80068ea:	68e3      	ldr	r3, [r4, #12]
 80068ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80068ee:	1a5b      	subs	r3, r3, r1
 80068f0:	4543      	cmp	r3, r8
 80068f2:	dcf0      	bgt.n	80068d6 <_printf_float+0x442>
 80068f4:	e6fa      	b.n	80066ec <_printf_float+0x258>
 80068f6:	f04f 0800 	mov.w	r8, #0
 80068fa:	f104 0919 	add.w	r9, r4, #25
 80068fe:	e7f4      	b.n	80068ea <_printf_float+0x456>

08006900 <_printf_common>:
 8006900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006904:	4616      	mov	r6, r2
 8006906:	4699      	mov	r9, r3
 8006908:	688a      	ldr	r2, [r1, #8]
 800690a:	690b      	ldr	r3, [r1, #16]
 800690c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006910:	4293      	cmp	r3, r2
 8006912:	bfb8      	it	lt
 8006914:	4613      	movlt	r3, r2
 8006916:	6033      	str	r3, [r6, #0]
 8006918:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800691c:	4607      	mov	r7, r0
 800691e:	460c      	mov	r4, r1
 8006920:	b10a      	cbz	r2, 8006926 <_printf_common+0x26>
 8006922:	3301      	adds	r3, #1
 8006924:	6033      	str	r3, [r6, #0]
 8006926:	6823      	ldr	r3, [r4, #0]
 8006928:	0699      	lsls	r1, r3, #26
 800692a:	bf42      	ittt	mi
 800692c:	6833      	ldrmi	r3, [r6, #0]
 800692e:	3302      	addmi	r3, #2
 8006930:	6033      	strmi	r3, [r6, #0]
 8006932:	6825      	ldr	r5, [r4, #0]
 8006934:	f015 0506 	ands.w	r5, r5, #6
 8006938:	d106      	bne.n	8006948 <_printf_common+0x48>
 800693a:	f104 0a19 	add.w	sl, r4, #25
 800693e:	68e3      	ldr	r3, [r4, #12]
 8006940:	6832      	ldr	r2, [r6, #0]
 8006942:	1a9b      	subs	r3, r3, r2
 8006944:	42ab      	cmp	r3, r5
 8006946:	dc26      	bgt.n	8006996 <_printf_common+0x96>
 8006948:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800694c:	1e13      	subs	r3, r2, #0
 800694e:	6822      	ldr	r2, [r4, #0]
 8006950:	bf18      	it	ne
 8006952:	2301      	movne	r3, #1
 8006954:	0692      	lsls	r2, r2, #26
 8006956:	d42b      	bmi.n	80069b0 <_printf_common+0xb0>
 8006958:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800695c:	4649      	mov	r1, r9
 800695e:	4638      	mov	r0, r7
 8006960:	47c0      	blx	r8
 8006962:	3001      	adds	r0, #1
 8006964:	d01e      	beq.n	80069a4 <_printf_common+0xa4>
 8006966:	6823      	ldr	r3, [r4, #0]
 8006968:	68e5      	ldr	r5, [r4, #12]
 800696a:	6832      	ldr	r2, [r6, #0]
 800696c:	f003 0306 	and.w	r3, r3, #6
 8006970:	2b04      	cmp	r3, #4
 8006972:	bf08      	it	eq
 8006974:	1aad      	subeq	r5, r5, r2
 8006976:	68a3      	ldr	r3, [r4, #8]
 8006978:	6922      	ldr	r2, [r4, #16]
 800697a:	bf0c      	ite	eq
 800697c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006980:	2500      	movne	r5, #0
 8006982:	4293      	cmp	r3, r2
 8006984:	bfc4      	itt	gt
 8006986:	1a9b      	subgt	r3, r3, r2
 8006988:	18ed      	addgt	r5, r5, r3
 800698a:	2600      	movs	r6, #0
 800698c:	341a      	adds	r4, #26
 800698e:	42b5      	cmp	r5, r6
 8006990:	d11a      	bne.n	80069c8 <_printf_common+0xc8>
 8006992:	2000      	movs	r0, #0
 8006994:	e008      	b.n	80069a8 <_printf_common+0xa8>
 8006996:	2301      	movs	r3, #1
 8006998:	4652      	mov	r2, sl
 800699a:	4649      	mov	r1, r9
 800699c:	4638      	mov	r0, r7
 800699e:	47c0      	blx	r8
 80069a0:	3001      	adds	r0, #1
 80069a2:	d103      	bne.n	80069ac <_printf_common+0xac>
 80069a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069ac:	3501      	adds	r5, #1
 80069ae:	e7c6      	b.n	800693e <_printf_common+0x3e>
 80069b0:	18e1      	adds	r1, r4, r3
 80069b2:	1c5a      	adds	r2, r3, #1
 80069b4:	2030      	movs	r0, #48	; 0x30
 80069b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80069ba:	4422      	add	r2, r4
 80069bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80069c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80069c4:	3302      	adds	r3, #2
 80069c6:	e7c7      	b.n	8006958 <_printf_common+0x58>
 80069c8:	2301      	movs	r3, #1
 80069ca:	4622      	mov	r2, r4
 80069cc:	4649      	mov	r1, r9
 80069ce:	4638      	mov	r0, r7
 80069d0:	47c0      	blx	r8
 80069d2:	3001      	adds	r0, #1
 80069d4:	d0e6      	beq.n	80069a4 <_printf_common+0xa4>
 80069d6:	3601      	adds	r6, #1
 80069d8:	e7d9      	b.n	800698e <_printf_common+0x8e>
	...

080069dc <_printf_i>:
 80069dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069e0:	460c      	mov	r4, r1
 80069e2:	4691      	mov	r9, r2
 80069e4:	7e27      	ldrb	r7, [r4, #24]
 80069e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80069e8:	2f78      	cmp	r7, #120	; 0x78
 80069ea:	4680      	mov	r8, r0
 80069ec:	469a      	mov	sl, r3
 80069ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80069f2:	d807      	bhi.n	8006a04 <_printf_i+0x28>
 80069f4:	2f62      	cmp	r7, #98	; 0x62
 80069f6:	d80a      	bhi.n	8006a0e <_printf_i+0x32>
 80069f8:	2f00      	cmp	r7, #0
 80069fa:	f000 80d8 	beq.w	8006bae <_printf_i+0x1d2>
 80069fe:	2f58      	cmp	r7, #88	; 0x58
 8006a00:	f000 80a3 	beq.w	8006b4a <_printf_i+0x16e>
 8006a04:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006a08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a0c:	e03a      	b.n	8006a84 <_printf_i+0xa8>
 8006a0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a12:	2b15      	cmp	r3, #21
 8006a14:	d8f6      	bhi.n	8006a04 <_printf_i+0x28>
 8006a16:	a001      	add	r0, pc, #4	; (adr r0, 8006a1c <_printf_i+0x40>)
 8006a18:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006a1c:	08006a75 	.word	0x08006a75
 8006a20:	08006a89 	.word	0x08006a89
 8006a24:	08006a05 	.word	0x08006a05
 8006a28:	08006a05 	.word	0x08006a05
 8006a2c:	08006a05 	.word	0x08006a05
 8006a30:	08006a05 	.word	0x08006a05
 8006a34:	08006a89 	.word	0x08006a89
 8006a38:	08006a05 	.word	0x08006a05
 8006a3c:	08006a05 	.word	0x08006a05
 8006a40:	08006a05 	.word	0x08006a05
 8006a44:	08006a05 	.word	0x08006a05
 8006a48:	08006b95 	.word	0x08006b95
 8006a4c:	08006ab9 	.word	0x08006ab9
 8006a50:	08006b77 	.word	0x08006b77
 8006a54:	08006a05 	.word	0x08006a05
 8006a58:	08006a05 	.word	0x08006a05
 8006a5c:	08006bb7 	.word	0x08006bb7
 8006a60:	08006a05 	.word	0x08006a05
 8006a64:	08006ab9 	.word	0x08006ab9
 8006a68:	08006a05 	.word	0x08006a05
 8006a6c:	08006a05 	.word	0x08006a05
 8006a70:	08006b7f 	.word	0x08006b7f
 8006a74:	680b      	ldr	r3, [r1, #0]
 8006a76:	1d1a      	adds	r2, r3, #4
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	600a      	str	r2, [r1, #0]
 8006a7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006a80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a84:	2301      	movs	r3, #1
 8006a86:	e0a3      	b.n	8006bd0 <_printf_i+0x1f4>
 8006a88:	6825      	ldr	r5, [r4, #0]
 8006a8a:	6808      	ldr	r0, [r1, #0]
 8006a8c:	062e      	lsls	r6, r5, #24
 8006a8e:	f100 0304 	add.w	r3, r0, #4
 8006a92:	d50a      	bpl.n	8006aaa <_printf_i+0xce>
 8006a94:	6805      	ldr	r5, [r0, #0]
 8006a96:	600b      	str	r3, [r1, #0]
 8006a98:	2d00      	cmp	r5, #0
 8006a9a:	da03      	bge.n	8006aa4 <_printf_i+0xc8>
 8006a9c:	232d      	movs	r3, #45	; 0x2d
 8006a9e:	426d      	negs	r5, r5
 8006aa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006aa4:	485e      	ldr	r0, [pc, #376]	; (8006c20 <_printf_i+0x244>)
 8006aa6:	230a      	movs	r3, #10
 8006aa8:	e019      	b.n	8006ade <_printf_i+0x102>
 8006aaa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006aae:	6805      	ldr	r5, [r0, #0]
 8006ab0:	600b      	str	r3, [r1, #0]
 8006ab2:	bf18      	it	ne
 8006ab4:	b22d      	sxthne	r5, r5
 8006ab6:	e7ef      	b.n	8006a98 <_printf_i+0xbc>
 8006ab8:	680b      	ldr	r3, [r1, #0]
 8006aba:	6825      	ldr	r5, [r4, #0]
 8006abc:	1d18      	adds	r0, r3, #4
 8006abe:	6008      	str	r0, [r1, #0]
 8006ac0:	0628      	lsls	r0, r5, #24
 8006ac2:	d501      	bpl.n	8006ac8 <_printf_i+0xec>
 8006ac4:	681d      	ldr	r5, [r3, #0]
 8006ac6:	e002      	b.n	8006ace <_printf_i+0xf2>
 8006ac8:	0669      	lsls	r1, r5, #25
 8006aca:	d5fb      	bpl.n	8006ac4 <_printf_i+0xe8>
 8006acc:	881d      	ldrh	r5, [r3, #0]
 8006ace:	4854      	ldr	r0, [pc, #336]	; (8006c20 <_printf_i+0x244>)
 8006ad0:	2f6f      	cmp	r7, #111	; 0x6f
 8006ad2:	bf0c      	ite	eq
 8006ad4:	2308      	moveq	r3, #8
 8006ad6:	230a      	movne	r3, #10
 8006ad8:	2100      	movs	r1, #0
 8006ada:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ade:	6866      	ldr	r6, [r4, #4]
 8006ae0:	60a6      	str	r6, [r4, #8]
 8006ae2:	2e00      	cmp	r6, #0
 8006ae4:	bfa2      	ittt	ge
 8006ae6:	6821      	ldrge	r1, [r4, #0]
 8006ae8:	f021 0104 	bicge.w	r1, r1, #4
 8006aec:	6021      	strge	r1, [r4, #0]
 8006aee:	b90d      	cbnz	r5, 8006af4 <_printf_i+0x118>
 8006af0:	2e00      	cmp	r6, #0
 8006af2:	d04d      	beq.n	8006b90 <_printf_i+0x1b4>
 8006af4:	4616      	mov	r6, r2
 8006af6:	fbb5 f1f3 	udiv	r1, r5, r3
 8006afa:	fb03 5711 	mls	r7, r3, r1, r5
 8006afe:	5dc7      	ldrb	r7, [r0, r7]
 8006b00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b04:	462f      	mov	r7, r5
 8006b06:	42bb      	cmp	r3, r7
 8006b08:	460d      	mov	r5, r1
 8006b0a:	d9f4      	bls.n	8006af6 <_printf_i+0x11a>
 8006b0c:	2b08      	cmp	r3, #8
 8006b0e:	d10b      	bne.n	8006b28 <_printf_i+0x14c>
 8006b10:	6823      	ldr	r3, [r4, #0]
 8006b12:	07df      	lsls	r7, r3, #31
 8006b14:	d508      	bpl.n	8006b28 <_printf_i+0x14c>
 8006b16:	6923      	ldr	r3, [r4, #16]
 8006b18:	6861      	ldr	r1, [r4, #4]
 8006b1a:	4299      	cmp	r1, r3
 8006b1c:	bfde      	ittt	le
 8006b1e:	2330      	movle	r3, #48	; 0x30
 8006b20:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b24:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006b28:	1b92      	subs	r2, r2, r6
 8006b2a:	6122      	str	r2, [r4, #16]
 8006b2c:	f8cd a000 	str.w	sl, [sp]
 8006b30:	464b      	mov	r3, r9
 8006b32:	aa03      	add	r2, sp, #12
 8006b34:	4621      	mov	r1, r4
 8006b36:	4640      	mov	r0, r8
 8006b38:	f7ff fee2 	bl	8006900 <_printf_common>
 8006b3c:	3001      	adds	r0, #1
 8006b3e:	d14c      	bne.n	8006bda <_printf_i+0x1fe>
 8006b40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b44:	b004      	add	sp, #16
 8006b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b4a:	4835      	ldr	r0, [pc, #212]	; (8006c20 <_printf_i+0x244>)
 8006b4c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006b50:	6823      	ldr	r3, [r4, #0]
 8006b52:	680e      	ldr	r6, [r1, #0]
 8006b54:	061f      	lsls	r7, r3, #24
 8006b56:	f856 5b04 	ldr.w	r5, [r6], #4
 8006b5a:	600e      	str	r6, [r1, #0]
 8006b5c:	d514      	bpl.n	8006b88 <_printf_i+0x1ac>
 8006b5e:	07d9      	lsls	r1, r3, #31
 8006b60:	bf44      	itt	mi
 8006b62:	f043 0320 	orrmi.w	r3, r3, #32
 8006b66:	6023      	strmi	r3, [r4, #0]
 8006b68:	b91d      	cbnz	r5, 8006b72 <_printf_i+0x196>
 8006b6a:	6823      	ldr	r3, [r4, #0]
 8006b6c:	f023 0320 	bic.w	r3, r3, #32
 8006b70:	6023      	str	r3, [r4, #0]
 8006b72:	2310      	movs	r3, #16
 8006b74:	e7b0      	b.n	8006ad8 <_printf_i+0xfc>
 8006b76:	6823      	ldr	r3, [r4, #0]
 8006b78:	f043 0320 	orr.w	r3, r3, #32
 8006b7c:	6023      	str	r3, [r4, #0]
 8006b7e:	2378      	movs	r3, #120	; 0x78
 8006b80:	4828      	ldr	r0, [pc, #160]	; (8006c24 <_printf_i+0x248>)
 8006b82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b86:	e7e3      	b.n	8006b50 <_printf_i+0x174>
 8006b88:	065e      	lsls	r6, r3, #25
 8006b8a:	bf48      	it	mi
 8006b8c:	b2ad      	uxthmi	r5, r5
 8006b8e:	e7e6      	b.n	8006b5e <_printf_i+0x182>
 8006b90:	4616      	mov	r6, r2
 8006b92:	e7bb      	b.n	8006b0c <_printf_i+0x130>
 8006b94:	680b      	ldr	r3, [r1, #0]
 8006b96:	6826      	ldr	r6, [r4, #0]
 8006b98:	6960      	ldr	r0, [r4, #20]
 8006b9a:	1d1d      	adds	r5, r3, #4
 8006b9c:	600d      	str	r5, [r1, #0]
 8006b9e:	0635      	lsls	r5, r6, #24
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	d501      	bpl.n	8006ba8 <_printf_i+0x1cc>
 8006ba4:	6018      	str	r0, [r3, #0]
 8006ba6:	e002      	b.n	8006bae <_printf_i+0x1d2>
 8006ba8:	0671      	lsls	r1, r6, #25
 8006baa:	d5fb      	bpl.n	8006ba4 <_printf_i+0x1c8>
 8006bac:	8018      	strh	r0, [r3, #0]
 8006bae:	2300      	movs	r3, #0
 8006bb0:	6123      	str	r3, [r4, #16]
 8006bb2:	4616      	mov	r6, r2
 8006bb4:	e7ba      	b.n	8006b2c <_printf_i+0x150>
 8006bb6:	680b      	ldr	r3, [r1, #0]
 8006bb8:	1d1a      	adds	r2, r3, #4
 8006bba:	600a      	str	r2, [r1, #0]
 8006bbc:	681e      	ldr	r6, [r3, #0]
 8006bbe:	6862      	ldr	r2, [r4, #4]
 8006bc0:	2100      	movs	r1, #0
 8006bc2:	4630      	mov	r0, r6
 8006bc4:	f7f9 fb0c 	bl	80001e0 <memchr>
 8006bc8:	b108      	cbz	r0, 8006bce <_printf_i+0x1f2>
 8006bca:	1b80      	subs	r0, r0, r6
 8006bcc:	6060      	str	r0, [r4, #4]
 8006bce:	6863      	ldr	r3, [r4, #4]
 8006bd0:	6123      	str	r3, [r4, #16]
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bd8:	e7a8      	b.n	8006b2c <_printf_i+0x150>
 8006bda:	6923      	ldr	r3, [r4, #16]
 8006bdc:	4632      	mov	r2, r6
 8006bde:	4649      	mov	r1, r9
 8006be0:	4640      	mov	r0, r8
 8006be2:	47d0      	blx	sl
 8006be4:	3001      	adds	r0, #1
 8006be6:	d0ab      	beq.n	8006b40 <_printf_i+0x164>
 8006be8:	6823      	ldr	r3, [r4, #0]
 8006bea:	079b      	lsls	r3, r3, #30
 8006bec:	d413      	bmi.n	8006c16 <_printf_i+0x23a>
 8006bee:	68e0      	ldr	r0, [r4, #12]
 8006bf0:	9b03      	ldr	r3, [sp, #12]
 8006bf2:	4298      	cmp	r0, r3
 8006bf4:	bfb8      	it	lt
 8006bf6:	4618      	movlt	r0, r3
 8006bf8:	e7a4      	b.n	8006b44 <_printf_i+0x168>
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	4632      	mov	r2, r6
 8006bfe:	4649      	mov	r1, r9
 8006c00:	4640      	mov	r0, r8
 8006c02:	47d0      	blx	sl
 8006c04:	3001      	adds	r0, #1
 8006c06:	d09b      	beq.n	8006b40 <_printf_i+0x164>
 8006c08:	3501      	adds	r5, #1
 8006c0a:	68e3      	ldr	r3, [r4, #12]
 8006c0c:	9903      	ldr	r1, [sp, #12]
 8006c0e:	1a5b      	subs	r3, r3, r1
 8006c10:	42ab      	cmp	r3, r5
 8006c12:	dcf2      	bgt.n	8006bfa <_printf_i+0x21e>
 8006c14:	e7eb      	b.n	8006bee <_printf_i+0x212>
 8006c16:	2500      	movs	r5, #0
 8006c18:	f104 0619 	add.w	r6, r4, #25
 8006c1c:	e7f5      	b.n	8006c0a <_printf_i+0x22e>
 8006c1e:	bf00      	nop
 8006c20:	0800965e 	.word	0x0800965e
 8006c24:	0800966f 	.word	0x0800966f

08006c28 <siprintf>:
 8006c28:	b40e      	push	{r1, r2, r3}
 8006c2a:	b500      	push	{lr}
 8006c2c:	b09c      	sub	sp, #112	; 0x70
 8006c2e:	ab1d      	add	r3, sp, #116	; 0x74
 8006c30:	9002      	str	r0, [sp, #8]
 8006c32:	9006      	str	r0, [sp, #24]
 8006c34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c38:	4809      	ldr	r0, [pc, #36]	; (8006c60 <siprintf+0x38>)
 8006c3a:	9107      	str	r1, [sp, #28]
 8006c3c:	9104      	str	r1, [sp, #16]
 8006c3e:	4909      	ldr	r1, [pc, #36]	; (8006c64 <siprintf+0x3c>)
 8006c40:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c44:	9105      	str	r1, [sp, #20]
 8006c46:	6800      	ldr	r0, [r0, #0]
 8006c48:	9301      	str	r3, [sp, #4]
 8006c4a:	a902      	add	r1, sp, #8
 8006c4c:	f001 fc4c 	bl	80084e8 <_svfiprintf_r>
 8006c50:	9b02      	ldr	r3, [sp, #8]
 8006c52:	2200      	movs	r2, #0
 8006c54:	701a      	strb	r2, [r3, #0]
 8006c56:	b01c      	add	sp, #112	; 0x70
 8006c58:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c5c:	b003      	add	sp, #12
 8006c5e:	4770      	bx	lr
 8006c60:	20000014 	.word	0x20000014
 8006c64:	ffff0208 	.word	0xffff0208

08006c68 <strtok>:
 8006c68:	4b16      	ldr	r3, [pc, #88]	; (8006cc4 <strtok+0x5c>)
 8006c6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006c6c:	681e      	ldr	r6, [r3, #0]
 8006c6e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8006c70:	4605      	mov	r5, r0
 8006c72:	b9fc      	cbnz	r4, 8006cb4 <strtok+0x4c>
 8006c74:	2050      	movs	r0, #80	; 0x50
 8006c76:	9101      	str	r1, [sp, #4]
 8006c78:	f000 ff8c 	bl	8007b94 <malloc>
 8006c7c:	9901      	ldr	r1, [sp, #4]
 8006c7e:	65b0      	str	r0, [r6, #88]	; 0x58
 8006c80:	4602      	mov	r2, r0
 8006c82:	b920      	cbnz	r0, 8006c8e <strtok+0x26>
 8006c84:	4b10      	ldr	r3, [pc, #64]	; (8006cc8 <strtok+0x60>)
 8006c86:	4811      	ldr	r0, [pc, #68]	; (8006ccc <strtok+0x64>)
 8006c88:	2157      	movs	r1, #87	; 0x57
 8006c8a:	f000 f8d7 	bl	8006e3c <__assert_func>
 8006c8e:	e9c0 4400 	strd	r4, r4, [r0]
 8006c92:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006c96:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006c9a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8006c9e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006ca2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006ca6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006caa:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8006cae:	6184      	str	r4, [r0, #24]
 8006cb0:	7704      	strb	r4, [r0, #28]
 8006cb2:	6244      	str	r4, [r0, #36]	; 0x24
 8006cb4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	4628      	mov	r0, r5
 8006cba:	b002      	add	sp, #8
 8006cbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006cc0:	f000 b806 	b.w	8006cd0 <__strtok_r>
 8006cc4:	20000014 	.word	0x20000014
 8006cc8:	08009680 	.word	0x08009680
 8006ccc:	08009697 	.word	0x08009697

08006cd0 <__strtok_r>:
 8006cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cd2:	b908      	cbnz	r0, 8006cd8 <__strtok_r+0x8>
 8006cd4:	6810      	ldr	r0, [r2, #0]
 8006cd6:	b188      	cbz	r0, 8006cfc <__strtok_r+0x2c>
 8006cd8:	4604      	mov	r4, r0
 8006cda:	4620      	mov	r0, r4
 8006cdc:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006ce0:	460f      	mov	r7, r1
 8006ce2:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006ce6:	b91e      	cbnz	r6, 8006cf0 <__strtok_r+0x20>
 8006ce8:	b965      	cbnz	r5, 8006d04 <__strtok_r+0x34>
 8006cea:	6015      	str	r5, [r2, #0]
 8006cec:	4628      	mov	r0, r5
 8006cee:	e005      	b.n	8006cfc <__strtok_r+0x2c>
 8006cf0:	42b5      	cmp	r5, r6
 8006cf2:	d1f6      	bne.n	8006ce2 <__strtok_r+0x12>
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d1f0      	bne.n	8006cda <__strtok_r+0xa>
 8006cf8:	6014      	str	r4, [r2, #0]
 8006cfa:	7003      	strb	r3, [r0, #0]
 8006cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cfe:	461c      	mov	r4, r3
 8006d00:	e00c      	b.n	8006d1c <__strtok_r+0x4c>
 8006d02:	b915      	cbnz	r5, 8006d0a <__strtok_r+0x3a>
 8006d04:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006d08:	460e      	mov	r6, r1
 8006d0a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006d0e:	42ab      	cmp	r3, r5
 8006d10:	d1f7      	bne.n	8006d02 <__strtok_r+0x32>
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d0f3      	beq.n	8006cfe <__strtok_r+0x2e>
 8006d16:	2300      	movs	r3, #0
 8006d18:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006d1c:	6014      	str	r4, [r2, #0]
 8006d1e:	e7ed      	b.n	8006cfc <__strtok_r+0x2c>

08006d20 <_strtol_l.isra.0>:
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d26:	d001      	beq.n	8006d2c <_strtol_l.isra.0+0xc>
 8006d28:	2b24      	cmp	r3, #36	; 0x24
 8006d2a:	d906      	bls.n	8006d3a <_strtol_l.isra.0+0x1a>
 8006d2c:	f7ff fae0 	bl	80062f0 <__errno>
 8006d30:	2316      	movs	r3, #22
 8006d32:	6003      	str	r3, [r0, #0]
 8006d34:	2000      	movs	r0, #0
 8006d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d3a:	4f3a      	ldr	r7, [pc, #232]	; (8006e24 <_strtol_l.isra.0+0x104>)
 8006d3c:	468e      	mov	lr, r1
 8006d3e:	4676      	mov	r6, lr
 8006d40:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006d44:	5de5      	ldrb	r5, [r4, r7]
 8006d46:	f015 0508 	ands.w	r5, r5, #8
 8006d4a:	d1f8      	bne.n	8006d3e <_strtol_l.isra.0+0x1e>
 8006d4c:	2c2d      	cmp	r4, #45	; 0x2d
 8006d4e:	d134      	bne.n	8006dba <_strtol_l.isra.0+0x9a>
 8006d50:	f89e 4000 	ldrb.w	r4, [lr]
 8006d54:	f04f 0801 	mov.w	r8, #1
 8006d58:	f106 0e02 	add.w	lr, r6, #2
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d05c      	beq.n	8006e1a <_strtol_l.isra.0+0xfa>
 8006d60:	2b10      	cmp	r3, #16
 8006d62:	d10c      	bne.n	8006d7e <_strtol_l.isra.0+0x5e>
 8006d64:	2c30      	cmp	r4, #48	; 0x30
 8006d66:	d10a      	bne.n	8006d7e <_strtol_l.isra.0+0x5e>
 8006d68:	f89e 4000 	ldrb.w	r4, [lr]
 8006d6c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006d70:	2c58      	cmp	r4, #88	; 0x58
 8006d72:	d14d      	bne.n	8006e10 <_strtol_l.isra.0+0xf0>
 8006d74:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8006d78:	2310      	movs	r3, #16
 8006d7a:	f10e 0e02 	add.w	lr, lr, #2
 8006d7e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8006d82:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8006d86:	2600      	movs	r6, #0
 8006d88:	fbbc f9f3 	udiv	r9, ip, r3
 8006d8c:	4635      	mov	r5, r6
 8006d8e:	fb03 ca19 	mls	sl, r3, r9, ip
 8006d92:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006d96:	2f09      	cmp	r7, #9
 8006d98:	d818      	bhi.n	8006dcc <_strtol_l.isra.0+0xac>
 8006d9a:	463c      	mov	r4, r7
 8006d9c:	42a3      	cmp	r3, r4
 8006d9e:	dd24      	ble.n	8006dea <_strtol_l.isra.0+0xca>
 8006da0:	2e00      	cmp	r6, #0
 8006da2:	db1f      	blt.n	8006de4 <_strtol_l.isra.0+0xc4>
 8006da4:	45a9      	cmp	r9, r5
 8006da6:	d31d      	bcc.n	8006de4 <_strtol_l.isra.0+0xc4>
 8006da8:	d101      	bne.n	8006dae <_strtol_l.isra.0+0x8e>
 8006daa:	45a2      	cmp	sl, r4
 8006dac:	db1a      	blt.n	8006de4 <_strtol_l.isra.0+0xc4>
 8006dae:	fb05 4503 	mla	r5, r5, r3, r4
 8006db2:	2601      	movs	r6, #1
 8006db4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006db8:	e7eb      	b.n	8006d92 <_strtol_l.isra.0+0x72>
 8006dba:	2c2b      	cmp	r4, #43	; 0x2b
 8006dbc:	bf08      	it	eq
 8006dbe:	f89e 4000 	ldrbeq.w	r4, [lr]
 8006dc2:	46a8      	mov	r8, r5
 8006dc4:	bf08      	it	eq
 8006dc6:	f106 0e02 	addeq.w	lr, r6, #2
 8006dca:	e7c7      	b.n	8006d5c <_strtol_l.isra.0+0x3c>
 8006dcc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006dd0:	2f19      	cmp	r7, #25
 8006dd2:	d801      	bhi.n	8006dd8 <_strtol_l.isra.0+0xb8>
 8006dd4:	3c37      	subs	r4, #55	; 0x37
 8006dd6:	e7e1      	b.n	8006d9c <_strtol_l.isra.0+0x7c>
 8006dd8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006ddc:	2f19      	cmp	r7, #25
 8006dde:	d804      	bhi.n	8006dea <_strtol_l.isra.0+0xca>
 8006de0:	3c57      	subs	r4, #87	; 0x57
 8006de2:	e7db      	b.n	8006d9c <_strtol_l.isra.0+0x7c>
 8006de4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8006de8:	e7e4      	b.n	8006db4 <_strtol_l.isra.0+0x94>
 8006dea:	2e00      	cmp	r6, #0
 8006dec:	da05      	bge.n	8006dfa <_strtol_l.isra.0+0xda>
 8006dee:	2322      	movs	r3, #34	; 0x22
 8006df0:	6003      	str	r3, [r0, #0]
 8006df2:	4665      	mov	r5, ip
 8006df4:	b942      	cbnz	r2, 8006e08 <_strtol_l.isra.0+0xe8>
 8006df6:	4628      	mov	r0, r5
 8006df8:	e79d      	b.n	8006d36 <_strtol_l.isra.0+0x16>
 8006dfa:	f1b8 0f00 	cmp.w	r8, #0
 8006dfe:	d000      	beq.n	8006e02 <_strtol_l.isra.0+0xe2>
 8006e00:	426d      	negs	r5, r5
 8006e02:	2a00      	cmp	r2, #0
 8006e04:	d0f7      	beq.n	8006df6 <_strtol_l.isra.0+0xd6>
 8006e06:	b10e      	cbz	r6, 8006e0c <_strtol_l.isra.0+0xec>
 8006e08:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8006e0c:	6011      	str	r1, [r2, #0]
 8006e0e:	e7f2      	b.n	8006df6 <_strtol_l.isra.0+0xd6>
 8006e10:	2430      	movs	r4, #48	; 0x30
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d1b3      	bne.n	8006d7e <_strtol_l.isra.0+0x5e>
 8006e16:	2308      	movs	r3, #8
 8006e18:	e7b1      	b.n	8006d7e <_strtol_l.isra.0+0x5e>
 8006e1a:	2c30      	cmp	r4, #48	; 0x30
 8006e1c:	d0a4      	beq.n	8006d68 <_strtol_l.isra.0+0x48>
 8006e1e:	230a      	movs	r3, #10
 8006e20:	e7ad      	b.n	8006d7e <_strtol_l.isra.0+0x5e>
 8006e22:	bf00      	nop
 8006e24:	08009735 	.word	0x08009735

08006e28 <strtol>:
 8006e28:	4613      	mov	r3, r2
 8006e2a:	460a      	mov	r2, r1
 8006e2c:	4601      	mov	r1, r0
 8006e2e:	4802      	ldr	r0, [pc, #8]	; (8006e38 <strtol+0x10>)
 8006e30:	6800      	ldr	r0, [r0, #0]
 8006e32:	f7ff bf75 	b.w	8006d20 <_strtol_l.isra.0>
 8006e36:	bf00      	nop
 8006e38:	20000014 	.word	0x20000014

08006e3c <__assert_func>:
 8006e3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006e3e:	4614      	mov	r4, r2
 8006e40:	461a      	mov	r2, r3
 8006e42:	4b09      	ldr	r3, [pc, #36]	; (8006e68 <__assert_func+0x2c>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4605      	mov	r5, r0
 8006e48:	68d8      	ldr	r0, [r3, #12]
 8006e4a:	b14c      	cbz	r4, 8006e60 <__assert_func+0x24>
 8006e4c:	4b07      	ldr	r3, [pc, #28]	; (8006e6c <__assert_func+0x30>)
 8006e4e:	9100      	str	r1, [sp, #0]
 8006e50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006e54:	4906      	ldr	r1, [pc, #24]	; (8006e70 <__assert_func+0x34>)
 8006e56:	462b      	mov	r3, r5
 8006e58:	f000 fe86 	bl	8007b68 <fiprintf>
 8006e5c:	f001 fe6e 	bl	8008b3c <abort>
 8006e60:	4b04      	ldr	r3, [pc, #16]	; (8006e74 <__assert_func+0x38>)
 8006e62:	461c      	mov	r4, r3
 8006e64:	e7f3      	b.n	8006e4e <__assert_func+0x12>
 8006e66:	bf00      	nop
 8006e68:	20000014 	.word	0x20000014
 8006e6c:	080096f8 	.word	0x080096f8
 8006e70:	08009705 	.word	0x08009705
 8006e74:	08009733 	.word	0x08009733

08006e78 <quorem>:
 8006e78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e7c:	6903      	ldr	r3, [r0, #16]
 8006e7e:	690c      	ldr	r4, [r1, #16]
 8006e80:	42a3      	cmp	r3, r4
 8006e82:	4607      	mov	r7, r0
 8006e84:	f2c0 8081 	blt.w	8006f8a <quorem+0x112>
 8006e88:	3c01      	subs	r4, #1
 8006e8a:	f101 0814 	add.w	r8, r1, #20
 8006e8e:	f100 0514 	add.w	r5, r0, #20
 8006e92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e96:	9301      	str	r3, [sp, #4]
 8006e98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006e9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006ea8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006eac:	fbb2 f6f3 	udiv	r6, r2, r3
 8006eb0:	d331      	bcc.n	8006f16 <quorem+0x9e>
 8006eb2:	f04f 0e00 	mov.w	lr, #0
 8006eb6:	4640      	mov	r0, r8
 8006eb8:	46ac      	mov	ip, r5
 8006eba:	46f2      	mov	sl, lr
 8006ebc:	f850 2b04 	ldr.w	r2, [r0], #4
 8006ec0:	b293      	uxth	r3, r2
 8006ec2:	fb06 e303 	mla	r3, r6, r3, lr
 8006ec6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	ebaa 0303 	sub.w	r3, sl, r3
 8006ed0:	0c12      	lsrs	r2, r2, #16
 8006ed2:	f8dc a000 	ldr.w	sl, [ip]
 8006ed6:	fb06 e202 	mla	r2, r6, r2, lr
 8006eda:	fa13 f38a 	uxtah	r3, r3, sl
 8006ede:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006ee2:	fa1f fa82 	uxth.w	sl, r2
 8006ee6:	f8dc 2000 	ldr.w	r2, [ip]
 8006eea:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006eee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ef8:	4581      	cmp	r9, r0
 8006efa:	f84c 3b04 	str.w	r3, [ip], #4
 8006efe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006f02:	d2db      	bcs.n	8006ebc <quorem+0x44>
 8006f04:	f855 300b 	ldr.w	r3, [r5, fp]
 8006f08:	b92b      	cbnz	r3, 8006f16 <quorem+0x9e>
 8006f0a:	9b01      	ldr	r3, [sp, #4]
 8006f0c:	3b04      	subs	r3, #4
 8006f0e:	429d      	cmp	r5, r3
 8006f10:	461a      	mov	r2, r3
 8006f12:	d32e      	bcc.n	8006f72 <quorem+0xfa>
 8006f14:	613c      	str	r4, [r7, #16]
 8006f16:	4638      	mov	r0, r7
 8006f18:	f001 f8d0 	bl	80080bc <__mcmp>
 8006f1c:	2800      	cmp	r0, #0
 8006f1e:	db24      	blt.n	8006f6a <quorem+0xf2>
 8006f20:	3601      	adds	r6, #1
 8006f22:	4628      	mov	r0, r5
 8006f24:	f04f 0c00 	mov.w	ip, #0
 8006f28:	f858 2b04 	ldr.w	r2, [r8], #4
 8006f2c:	f8d0 e000 	ldr.w	lr, [r0]
 8006f30:	b293      	uxth	r3, r2
 8006f32:	ebac 0303 	sub.w	r3, ip, r3
 8006f36:	0c12      	lsrs	r2, r2, #16
 8006f38:	fa13 f38e 	uxtah	r3, r3, lr
 8006f3c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006f40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f4a:	45c1      	cmp	r9, r8
 8006f4c:	f840 3b04 	str.w	r3, [r0], #4
 8006f50:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006f54:	d2e8      	bcs.n	8006f28 <quorem+0xb0>
 8006f56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f5e:	b922      	cbnz	r2, 8006f6a <quorem+0xf2>
 8006f60:	3b04      	subs	r3, #4
 8006f62:	429d      	cmp	r5, r3
 8006f64:	461a      	mov	r2, r3
 8006f66:	d30a      	bcc.n	8006f7e <quorem+0x106>
 8006f68:	613c      	str	r4, [r7, #16]
 8006f6a:	4630      	mov	r0, r6
 8006f6c:	b003      	add	sp, #12
 8006f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f72:	6812      	ldr	r2, [r2, #0]
 8006f74:	3b04      	subs	r3, #4
 8006f76:	2a00      	cmp	r2, #0
 8006f78:	d1cc      	bne.n	8006f14 <quorem+0x9c>
 8006f7a:	3c01      	subs	r4, #1
 8006f7c:	e7c7      	b.n	8006f0e <quorem+0x96>
 8006f7e:	6812      	ldr	r2, [r2, #0]
 8006f80:	3b04      	subs	r3, #4
 8006f82:	2a00      	cmp	r2, #0
 8006f84:	d1f0      	bne.n	8006f68 <quorem+0xf0>
 8006f86:	3c01      	subs	r4, #1
 8006f88:	e7eb      	b.n	8006f62 <quorem+0xea>
 8006f8a:	2000      	movs	r0, #0
 8006f8c:	e7ee      	b.n	8006f6c <quorem+0xf4>
	...

08006f90 <_dtoa_r>:
 8006f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f94:	ed2d 8b02 	vpush	{d8}
 8006f98:	ec57 6b10 	vmov	r6, r7, d0
 8006f9c:	b095      	sub	sp, #84	; 0x54
 8006f9e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006fa0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006fa4:	9105      	str	r1, [sp, #20]
 8006fa6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006faa:	4604      	mov	r4, r0
 8006fac:	9209      	str	r2, [sp, #36]	; 0x24
 8006fae:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fb0:	b975      	cbnz	r5, 8006fd0 <_dtoa_r+0x40>
 8006fb2:	2010      	movs	r0, #16
 8006fb4:	f000 fdee 	bl	8007b94 <malloc>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	6260      	str	r0, [r4, #36]	; 0x24
 8006fbc:	b920      	cbnz	r0, 8006fc8 <_dtoa_r+0x38>
 8006fbe:	4bb2      	ldr	r3, [pc, #712]	; (8007288 <_dtoa_r+0x2f8>)
 8006fc0:	21ea      	movs	r1, #234	; 0xea
 8006fc2:	48b2      	ldr	r0, [pc, #712]	; (800728c <_dtoa_r+0x2fc>)
 8006fc4:	f7ff ff3a 	bl	8006e3c <__assert_func>
 8006fc8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006fcc:	6005      	str	r5, [r0, #0]
 8006fce:	60c5      	str	r5, [r0, #12]
 8006fd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fd2:	6819      	ldr	r1, [r3, #0]
 8006fd4:	b151      	cbz	r1, 8006fec <_dtoa_r+0x5c>
 8006fd6:	685a      	ldr	r2, [r3, #4]
 8006fd8:	604a      	str	r2, [r1, #4]
 8006fda:	2301      	movs	r3, #1
 8006fdc:	4093      	lsls	r3, r2
 8006fde:	608b      	str	r3, [r1, #8]
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	f000 fe2d 	bl	8007c40 <_Bfree>
 8006fe6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fe8:	2200      	movs	r2, #0
 8006fea:	601a      	str	r2, [r3, #0]
 8006fec:	1e3b      	subs	r3, r7, #0
 8006fee:	bfb9      	ittee	lt
 8006ff0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006ff4:	9303      	strlt	r3, [sp, #12]
 8006ff6:	2300      	movge	r3, #0
 8006ff8:	f8c8 3000 	strge.w	r3, [r8]
 8006ffc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007000:	4ba3      	ldr	r3, [pc, #652]	; (8007290 <_dtoa_r+0x300>)
 8007002:	bfbc      	itt	lt
 8007004:	2201      	movlt	r2, #1
 8007006:	f8c8 2000 	strlt.w	r2, [r8]
 800700a:	ea33 0309 	bics.w	r3, r3, r9
 800700e:	d11b      	bne.n	8007048 <_dtoa_r+0xb8>
 8007010:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007012:	f242 730f 	movw	r3, #9999	; 0x270f
 8007016:	6013      	str	r3, [r2, #0]
 8007018:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800701c:	4333      	orrs	r3, r6
 800701e:	f000 857a 	beq.w	8007b16 <_dtoa_r+0xb86>
 8007022:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007024:	b963      	cbnz	r3, 8007040 <_dtoa_r+0xb0>
 8007026:	4b9b      	ldr	r3, [pc, #620]	; (8007294 <_dtoa_r+0x304>)
 8007028:	e024      	b.n	8007074 <_dtoa_r+0xe4>
 800702a:	4b9b      	ldr	r3, [pc, #620]	; (8007298 <_dtoa_r+0x308>)
 800702c:	9300      	str	r3, [sp, #0]
 800702e:	3308      	adds	r3, #8
 8007030:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007032:	6013      	str	r3, [r2, #0]
 8007034:	9800      	ldr	r0, [sp, #0]
 8007036:	b015      	add	sp, #84	; 0x54
 8007038:	ecbd 8b02 	vpop	{d8}
 800703c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007040:	4b94      	ldr	r3, [pc, #592]	; (8007294 <_dtoa_r+0x304>)
 8007042:	9300      	str	r3, [sp, #0]
 8007044:	3303      	adds	r3, #3
 8007046:	e7f3      	b.n	8007030 <_dtoa_r+0xa0>
 8007048:	ed9d 7b02 	vldr	d7, [sp, #8]
 800704c:	2200      	movs	r2, #0
 800704e:	ec51 0b17 	vmov	r0, r1, d7
 8007052:	2300      	movs	r3, #0
 8007054:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007058:	f7f9 fd36 	bl	8000ac8 <__aeabi_dcmpeq>
 800705c:	4680      	mov	r8, r0
 800705e:	b158      	cbz	r0, 8007078 <_dtoa_r+0xe8>
 8007060:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007062:	2301      	movs	r3, #1
 8007064:	6013      	str	r3, [r2, #0]
 8007066:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007068:	2b00      	cmp	r3, #0
 800706a:	f000 8551 	beq.w	8007b10 <_dtoa_r+0xb80>
 800706e:	488b      	ldr	r0, [pc, #556]	; (800729c <_dtoa_r+0x30c>)
 8007070:	6018      	str	r0, [r3, #0]
 8007072:	1e43      	subs	r3, r0, #1
 8007074:	9300      	str	r3, [sp, #0]
 8007076:	e7dd      	b.n	8007034 <_dtoa_r+0xa4>
 8007078:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800707c:	aa12      	add	r2, sp, #72	; 0x48
 800707e:	a913      	add	r1, sp, #76	; 0x4c
 8007080:	4620      	mov	r0, r4
 8007082:	f001 f8bf 	bl	8008204 <__d2b>
 8007086:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800708a:	4683      	mov	fp, r0
 800708c:	2d00      	cmp	r5, #0
 800708e:	d07c      	beq.n	800718a <_dtoa_r+0x1fa>
 8007090:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007092:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007096:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800709a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800709e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80070a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80070a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80070aa:	4b7d      	ldr	r3, [pc, #500]	; (80072a0 <_dtoa_r+0x310>)
 80070ac:	2200      	movs	r2, #0
 80070ae:	4630      	mov	r0, r6
 80070b0:	4639      	mov	r1, r7
 80070b2:	f7f9 f8e9 	bl	8000288 <__aeabi_dsub>
 80070b6:	a36e      	add	r3, pc, #440	; (adr r3, 8007270 <_dtoa_r+0x2e0>)
 80070b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070bc:	f7f9 fa9c 	bl	80005f8 <__aeabi_dmul>
 80070c0:	a36d      	add	r3, pc, #436	; (adr r3, 8007278 <_dtoa_r+0x2e8>)
 80070c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c6:	f7f9 f8e1 	bl	800028c <__adddf3>
 80070ca:	4606      	mov	r6, r0
 80070cc:	4628      	mov	r0, r5
 80070ce:	460f      	mov	r7, r1
 80070d0:	f7f9 fa28 	bl	8000524 <__aeabi_i2d>
 80070d4:	a36a      	add	r3, pc, #424	; (adr r3, 8007280 <_dtoa_r+0x2f0>)
 80070d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070da:	f7f9 fa8d 	bl	80005f8 <__aeabi_dmul>
 80070de:	4602      	mov	r2, r0
 80070e0:	460b      	mov	r3, r1
 80070e2:	4630      	mov	r0, r6
 80070e4:	4639      	mov	r1, r7
 80070e6:	f7f9 f8d1 	bl	800028c <__adddf3>
 80070ea:	4606      	mov	r6, r0
 80070ec:	460f      	mov	r7, r1
 80070ee:	f7f9 fd33 	bl	8000b58 <__aeabi_d2iz>
 80070f2:	2200      	movs	r2, #0
 80070f4:	4682      	mov	sl, r0
 80070f6:	2300      	movs	r3, #0
 80070f8:	4630      	mov	r0, r6
 80070fa:	4639      	mov	r1, r7
 80070fc:	f7f9 fcee 	bl	8000adc <__aeabi_dcmplt>
 8007100:	b148      	cbz	r0, 8007116 <_dtoa_r+0x186>
 8007102:	4650      	mov	r0, sl
 8007104:	f7f9 fa0e 	bl	8000524 <__aeabi_i2d>
 8007108:	4632      	mov	r2, r6
 800710a:	463b      	mov	r3, r7
 800710c:	f7f9 fcdc 	bl	8000ac8 <__aeabi_dcmpeq>
 8007110:	b908      	cbnz	r0, 8007116 <_dtoa_r+0x186>
 8007112:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007116:	f1ba 0f16 	cmp.w	sl, #22
 800711a:	d854      	bhi.n	80071c6 <_dtoa_r+0x236>
 800711c:	4b61      	ldr	r3, [pc, #388]	; (80072a4 <_dtoa_r+0x314>)
 800711e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007126:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800712a:	f7f9 fcd7 	bl	8000adc <__aeabi_dcmplt>
 800712e:	2800      	cmp	r0, #0
 8007130:	d04b      	beq.n	80071ca <_dtoa_r+0x23a>
 8007132:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007136:	2300      	movs	r3, #0
 8007138:	930e      	str	r3, [sp, #56]	; 0x38
 800713a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800713c:	1b5d      	subs	r5, r3, r5
 800713e:	1e6b      	subs	r3, r5, #1
 8007140:	9304      	str	r3, [sp, #16]
 8007142:	bf43      	ittte	mi
 8007144:	2300      	movmi	r3, #0
 8007146:	f1c5 0801 	rsbmi	r8, r5, #1
 800714a:	9304      	strmi	r3, [sp, #16]
 800714c:	f04f 0800 	movpl.w	r8, #0
 8007150:	f1ba 0f00 	cmp.w	sl, #0
 8007154:	db3b      	blt.n	80071ce <_dtoa_r+0x23e>
 8007156:	9b04      	ldr	r3, [sp, #16]
 8007158:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800715c:	4453      	add	r3, sl
 800715e:	9304      	str	r3, [sp, #16]
 8007160:	2300      	movs	r3, #0
 8007162:	9306      	str	r3, [sp, #24]
 8007164:	9b05      	ldr	r3, [sp, #20]
 8007166:	2b09      	cmp	r3, #9
 8007168:	d869      	bhi.n	800723e <_dtoa_r+0x2ae>
 800716a:	2b05      	cmp	r3, #5
 800716c:	bfc4      	itt	gt
 800716e:	3b04      	subgt	r3, #4
 8007170:	9305      	strgt	r3, [sp, #20]
 8007172:	9b05      	ldr	r3, [sp, #20]
 8007174:	f1a3 0302 	sub.w	r3, r3, #2
 8007178:	bfcc      	ite	gt
 800717a:	2500      	movgt	r5, #0
 800717c:	2501      	movle	r5, #1
 800717e:	2b03      	cmp	r3, #3
 8007180:	d869      	bhi.n	8007256 <_dtoa_r+0x2c6>
 8007182:	e8df f003 	tbb	[pc, r3]
 8007186:	4e2c      	.short	0x4e2c
 8007188:	5a4c      	.short	0x5a4c
 800718a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800718e:	441d      	add	r5, r3
 8007190:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007194:	2b20      	cmp	r3, #32
 8007196:	bfc1      	itttt	gt
 8007198:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800719c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80071a0:	fa09 f303 	lslgt.w	r3, r9, r3
 80071a4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80071a8:	bfda      	itte	le
 80071aa:	f1c3 0320 	rsble	r3, r3, #32
 80071ae:	fa06 f003 	lslle.w	r0, r6, r3
 80071b2:	4318      	orrgt	r0, r3
 80071b4:	f7f9 f9a6 	bl	8000504 <__aeabi_ui2d>
 80071b8:	2301      	movs	r3, #1
 80071ba:	4606      	mov	r6, r0
 80071bc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80071c0:	3d01      	subs	r5, #1
 80071c2:	9310      	str	r3, [sp, #64]	; 0x40
 80071c4:	e771      	b.n	80070aa <_dtoa_r+0x11a>
 80071c6:	2301      	movs	r3, #1
 80071c8:	e7b6      	b.n	8007138 <_dtoa_r+0x1a8>
 80071ca:	900e      	str	r0, [sp, #56]	; 0x38
 80071cc:	e7b5      	b.n	800713a <_dtoa_r+0x1aa>
 80071ce:	f1ca 0300 	rsb	r3, sl, #0
 80071d2:	9306      	str	r3, [sp, #24]
 80071d4:	2300      	movs	r3, #0
 80071d6:	eba8 080a 	sub.w	r8, r8, sl
 80071da:	930d      	str	r3, [sp, #52]	; 0x34
 80071dc:	e7c2      	b.n	8007164 <_dtoa_r+0x1d4>
 80071de:	2300      	movs	r3, #0
 80071e0:	9308      	str	r3, [sp, #32]
 80071e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	dc39      	bgt.n	800725c <_dtoa_r+0x2cc>
 80071e8:	f04f 0901 	mov.w	r9, #1
 80071ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80071f0:	464b      	mov	r3, r9
 80071f2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80071f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80071f8:	2200      	movs	r2, #0
 80071fa:	6042      	str	r2, [r0, #4]
 80071fc:	2204      	movs	r2, #4
 80071fe:	f102 0614 	add.w	r6, r2, #20
 8007202:	429e      	cmp	r6, r3
 8007204:	6841      	ldr	r1, [r0, #4]
 8007206:	d92f      	bls.n	8007268 <_dtoa_r+0x2d8>
 8007208:	4620      	mov	r0, r4
 800720a:	f000 fcd9 	bl	8007bc0 <_Balloc>
 800720e:	9000      	str	r0, [sp, #0]
 8007210:	2800      	cmp	r0, #0
 8007212:	d14b      	bne.n	80072ac <_dtoa_r+0x31c>
 8007214:	4b24      	ldr	r3, [pc, #144]	; (80072a8 <_dtoa_r+0x318>)
 8007216:	4602      	mov	r2, r0
 8007218:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800721c:	e6d1      	b.n	8006fc2 <_dtoa_r+0x32>
 800721e:	2301      	movs	r3, #1
 8007220:	e7de      	b.n	80071e0 <_dtoa_r+0x250>
 8007222:	2300      	movs	r3, #0
 8007224:	9308      	str	r3, [sp, #32]
 8007226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007228:	eb0a 0903 	add.w	r9, sl, r3
 800722c:	f109 0301 	add.w	r3, r9, #1
 8007230:	2b01      	cmp	r3, #1
 8007232:	9301      	str	r3, [sp, #4]
 8007234:	bfb8      	it	lt
 8007236:	2301      	movlt	r3, #1
 8007238:	e7dd      	b.n	80071f6 <_dtoa_r+0x266>
 800723a:	2301      	movs	r3, #1
 800723c:	e7f2      	b.n	8007224 <_dtoa_r+0x294>
 800723e:	2501      	movs	r5, #1
 8007240:	2300      	movs	r3, #0
 8007242:	9305      	str	r3, [sp, #20]
 8007244:	9508      	str	r5, [sp, #32]
 8007246:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800724a:	2200      	movs	r2, #0
 800724c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007250:	2312      	movs	r3, #18
 8007252:	9209      	str	r2, [sp, #36]	; 0x24
 8007254:	e7cf      	b.n	80071f6 <_dtoa_r+0x266>
 8007256:	2301      	movs	r3, #1
 8007258:	9308      	str	r3, [sp, #32]
 800725a:	e7f4      	b.n	8007246 <_dtoa_r+0x2b6>
 800725c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007260:	f8cd 9004 	str.w	r9, [sp, #4]
 8007264:	464b      	mov	r3, r9
 8007266:	e7c6      	b.n	80071f6 <_dtoa_r+0x266>
 8007268:	3101      	adds	r1, #1
 800726a:	6041      	str	r1, [r0, #4]
 800726c:	0052      	lsls	r2, r2, #1
 800726e:	e7c6      	b.n	80071fe <_dtoa_r+0x26e>
 8007270:	636f4361 	.word	0x636f4361
 8007274:	3fd287a7 	.word	0x3fd287a7
 8007278:	8b60c8b3 	.word	0x8b60c8b3
 800727c:	3fc68a28 	.word	0x3fc68a28
 8007280:	509f79fb 	.word	0x509f79fb
 8007284:	3fd34413 	.word	0x3fd34413
 8007288:	08009680 	.word	0x08009680
 800728c:	08009842 	.word	0x08009842
 8007290:	7ff00000 	.word	0x7ff00000
 8007294:	0800983e 	.word	0x0800983e
 8007298:	08009835 	.word	0x08009835
 800729c:	0800965d 	.word	0x0800965d
 80072a0:	3ff80000 	.word	0x3ff80000
 80072a4:	08009940 	.word	0x08009940
 80072a8:	080098a1 	.word	0x080098a1
 80072ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072ae:	9a00      	ldr	r2, [sp, #0]
 80072b0:	601a      	str	r2, [r3, #0]
 80072b2:	9b01      	ldr	r3, [sp, #4]
 80072b4:	2b0e      	cmp	r3, #14
 80072b6:	f200 80ad 	bhi.w	8007414 <_dtoa_r+0x484>
 80072ba:	2d00      	cmp	r5, #0
 80072bc:	f000 80aa 	beq.w	8007414 <_dtoa_r+0x484>
 80072c0:	f1ba 0f00 	cmp.w	sl, #0
 80072c4:	dd36      	ble.n	8007334 <_dtoa_r+0x3a4>
 80072c6:	4ac3      	ldr	r2, [pc, #780]	; (80075d4 <_dtoa_r+0x644>)
 80072c8:	f00a 030f 	and.w	r3, sl, #15
 80072cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80072d0:	ed93 7b00 	vldr	d7, [r3]
 80072d4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80072d8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80072dc:	eeb0 8a47 	vmov.f32	s16, s14
 80072e0:	eef0 8a67 	vmov.f32	s17, s15
 80072e4:	d016      	beq.n	8007314 <_dtoa_r+0x384>
 80072e6:	4bbc      	ldr	r3, [pc, #752]	; (80075d8 <_dtoa_r+0x648>)
 80072e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80072ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80072f0:	f7f9 faac 	bl	800084c <__aeabi_ddiv>
 80072f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072f8:	f007 070f 	and.w	r7, r7, #15
 80072fc:	2503      	movs	r5, #3
 80072fe:	4eb6      	ldr	r6, [pc, #728]	; (80075d8 <_dtoa_r+0x648>)
 8007300:	b957      	cbnz	r7, 8007318 <_dtoa_r+0x388>
 8007302:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007306:	ec53 2b18 	vmov	r2, r3, d8
 800730a:	f7f9 fa9f 	bl	800084c <__aeabi_ddiv>
 800730e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007312:	e029      	b.n	8007368 <_dtoa_r+0x3d8>
 8007314:	2502      	movs	r5, #2
 8007316:	e7f2      	b.n	80072fe <_dtoa_r+0x36e>
 8007318:	07f9      	lsls	r1, r7, #31
 800731a:	d508      	bpl.n	800732e <_dtoa_r+0x39e>
 800731c:	ec51 0b18 	vmov	r0, r1, d8
 8007320:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007324:	f7f9 f968 	bl	80005f8 <__aeabi_dmul>
 8007328:	ec41 0b18 	vmov	d8, r0, r1
 800732c:	3501      	adds	r5, #1
 800732e:	107f      	asrs	r7, r7, #1
 8007330:	3608      	adds	r6, #8
 8007332:	e7e5      	b.n	8007300 <_dtoa_r+0x370>
 8007334:	f000 80a6 	beq.w	8007484 <_dtoa_r+0x4f4>
 8007338:	f1ca 0600 	rsb	r6, sl, #0
 800733c:	4ba5      	ldr	r3, [pc, #660]	; (80075d4 <_dtoa_r+0x644>)
 800733e:	4fa6      	ldr	r7, [pc, #664]	; (80075d8 <_dtoa_r+0x648>)
 8007340:	f006 020f 	and.w	r2, r6, #15
 8007344:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007350:	f7f9 f952 	bl	80005f8 <__aeabi_dmul>
 8007354:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007358:	1136      	asrs	r6, r6, #4
 800735a:	2300      	movs	r3, #0
 800735c:	2502      	movs	r5, #2
 800735e:	2e00      	cmp	r6, #0
 8007360:	f040 8085 	bne.w	800746e <_dtoa_r+0x4de>
 8007364:	2b00      	cmp	r3, #0
 8007366:	d1d2      	bne.n	800730e <_dtoa_r+0x37e>
 8007368:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800736a:	2b00      	cmp	r3, #0
 800736c:	f000 808c 	beq.w	8007488 <_dtoa_r+0x4f8>
 8007370:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007374:	4b99      	ldr	r3, [pc, #612]	; (80075dc <_dtoa_r+0x64c>)
 8007376:	2200      	movs	r2, #0
 8007378:	4630      	mov	r0, r6
 800737a:	4639      	mov	r1, r7
 800737c:	f7f9 fbae 	bl	8000adc <__aeabi_dcmplt>
 8007380:	2800      	cmp	r0, #0
 8007382:	f000 8081 	beq.w	8007488 <_dtoa_r+0x4f8>
 8007386:	9b01      	ldr	r3, [sp, #4]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d07d      	beq.n	8007488 <_dtoa_r+0x4f8>
 800738c:	f1b9 0f00 	cmp.w	r9, #0
 8007390:	dd3c      	ble.n	800740c <_dtoa_r+0x47c>
 8007392:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8007396:	9307      	str	r3, [sp, #28]
 8007398:	2200      	movs	r2, #0
 800739a:	4b91      	ldr	r3, [pc, #580]	; (80075e0 <_dtoa_r+0x650>)
 800739c:	4630      	mov	r0, r6
 800739e:	4639      	mov	r1, r7
 80073a0:	f7f9 f92a 	bl	80005f8 <__aeabi_dmul>
 80073a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073a8:	3501      	adds	r5, #1
 80073aa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80073ae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80073b2:	4628      	mov	r0, r5
 80073b4:	f7f9 f8b6 	bl	8000524 <__aeabi_i2d>
 80073b8:	4632      	mov	r2, r6
 80073ba:	463b      	mov	r3, r7
 80073bc:	f7f9 f91c 	bl	80005f8 <__aeabi_dmul>
 80073c0:	4b88      	ldr	r3, [pc, #544]	; (80075e4 <_dtoa_r+0x654>)
 80073c2:	2200      	movs	r2, #0
 80073c4:	f7f8 ff62 	bl	800028c <__adddf3>
 80073c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80073cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073d0:	9303      	str	r3, [sp, #12]
 80073d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d15c      	bne.n	8007492 <_dtoa_r+0x502>
 80073d8:	4b83      	ldr	r3, [pc, #524]	; (80075e8 <_dtoa_r+0x658>)
 80073da:	2200      	movs	r2, #0
 80073dc:	4630      	mov	r0, r6
 80073de:	4639      	mov	r1, r7
 80073e0:	f7f8 ff52 	bl	8000288 <__aeabi_dsub>
 80073e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80073e8:	4606      	mov	r6, r0
 80073ea:	460f      	mov	r7, r1
 80073ec:	f7f9 fb94 	bl	8000b18 <__aeabi_dcmpgt>
 80073f0:	2800      	cmp	r0, #0
 80073f2:	f040 8296 	bne.w	8007922 <_dtoa_r+0x992>
 80073f6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80073fa:	4630      	mov	r0, r6
 80073fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007400:	4639      	mov	r1, r7
 8007402:	f7f9 fb6b 	bl	8000adc <__aeabi_dcmplt>
 8007406:	2800      	cmp	r0, #0
 8007408:	f040 8288 	bne.w	800791c <_dtoa_r+0x98c>
 800740c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007410:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007414:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007416:	2b00      	cmp	r3, #0
 8007418:	f2c0 8158 	blt.w	80076cc <_dtoa_r+0x73c>
 800741c:	f1ba 0f0e 	cmp.w	sl, #14
 8007420:	f300 8154 	bgt.w	80076cc <_dtoa_r+0x73c>
 8007424:	4b6b      	ldr	r3, [pc, #428]	; (80075d4 <_dtoa_r+0x644>)
 8007426:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800742a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800742e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007430:	2b00      	cmp	r3, #0
 8007432:	f280 80e3 	bge.w	80075fc <_dtoa_r+0x66c>
 8007436:	9b01      	ldr	r3, [sp, #4]
 8007438:	2b00      	cmp	r3, #0
 800743a:	f300 80df 	bgt.w	80075fc <_dtoa_r+0x66c>
 800743e:	f040 826d 	bne.w	800791c <_dtoa_r+0x98c>
 8007442:	4b69      	ldr	r3, [pc, #420]	; (80075e8 <_dtoa_r+0x658>)
 8007444:	2200      	movs	r2, #0
 8007446:	4640      	mov	r0, r8
 8007448:	4649      	mov	r1, r9
 800744a:	f7f9 f8d5 	bl	80005f8 <__aeabi_dmul>
 800744e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007452:	f7f9 fb57 	bl	8000b04 <__aeabi_dcmpge>
 8007456:	9e01      	ldr	r6, [sp, #4]
 8007458:	4637      	mov	r7, r6
 800745a:	2800      	cmp	r0, #0
 800745c:	f040 8243 	bne.w	80078e6 <_dtoa_r+0x956>
 8007460:	9d00      	ldr	r5, [sp, #0]
 8007462:	2331      	movs	r3, #49	; 0x31
 8007464:	f805 3b01 	strb.w	r3, [r5], #1
 8007468:	f10a 0a01 	add.w	sl, sl, #1
 800746c:	e23f      	b.n	80078ee <_dtoa_r+0x95e>
 800746e:	07f2      	lsls	r2, r6, #31
 8007470:	d505      	bpl.n	800747e <_dtoa_r+0x4ee>
 8007472:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007476:	f7f9 f8bf 	bl	80005f8 <__aeabi_dmul>
 800747a:	3501      	adds	r5, #1
 800747c:	2301      	movs	r3, #1
 800747e:	1076      	asrs	r6, r6, #1
 8007480:	3708      	adds	r7, #8
 8007482:	e76c      	b.n	800735e <_dtoa_r+0x3ce>
 8007484:	2502      	movs	r5, #2
 8007486:	e76f      	b.n	8007368 <_dtoa_r+0x3d8>
 8007488:	9b01      	ldr	r3, [sp, #4]
 800748a:	f8cd a01c 	str.w	sl, [sp, #28]
 800748e:	930c      	str	r3, [sp, #48]	; 0x30
 8007490:	e78d      	b.n	80073ae <_dtoa_r+0x41e>
 8007492:	9900      	ldr	r1, [sp, #0]
 8007494:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007496:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007498:	4b4e      	ldr	r3, [pc, #312]	; (80075d4 <_dtoa_r+0x644>)
 800749a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800749e:	4401      	add	r1, r0
 80074a0:	9102      	str	r1, [sp, #8]
 80074a2:	9908      	ldr	r1, [sp, #32]
 80074a4:	eeb0 8a47 	vmov.f32	s16, s14
 80074a8:	eef0 8a67 	vmov.f32	s17, s15
 80074ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80074b4:	2900      	cmp	r1, #0
 80074b6:	d045      	beq.n	8007544 <_dtoa_r+0x5b4>
 80074b8:	494c      	ldr	r1, [pc, #304]	; (80075ec <_dtoa_r+0x65c>)
 80074ba:	2000      	movs	r0, #0
 80074bc:	f7f9 f9c6 	bl	800084c <__aeabi_ddiv>
 80074c0:	ec53 2b18 	vmov	r2, r3, d8
 80074c4:	f7f8 fee0 	bl	8000288 <__aeabi_dsub>
 80074c8:	9d00      	ldr	r5, [sp, #0]
 80074ca:	ec41 0b18 	vmov	d8, r0, r1
 80074ce:	4639      	mov	r1, r7
 80074d0:	4630      	mov	r0, r6
 80074d2:	f7f9 fb41 	bl	8000b58 <__aeabi_d2iz>
 80074d6:	900c      	str	r0, [sp, #48]	; 0x30
 80074d8:	f7f9 f824 	bl	8000524 <__aeabi_i2d>
 80074dc:	4602      	mov	r2, r0
 80074de:	460b      	mov	r3, r1
 80074e0:	4630      	mov	r0, r6
 80074e2:	4639      	mov	r1, r7
 80074e4:	f7f8 fed0 	bl	8000288 <__aeabi_dsub>
 80074e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80074ea:	3330      	adds	r3, #48	; 0x30
 80074ec:	f805 3b01 	strb.w	r3, [r5], #1
 80074f0:	ec53 2b18 	vmov	r2, r3, d8
 80074f4:	4606      	mov	r6, r0
 80074f6:	460f      	mov	r7, r1
 80074f8:	f7f9 faf0 	bl	8000adc <__aeabi_dcmplt>
 80074fc:	2800      	cmp	r0, #0
 80074fe:	d165      	bne.n	80075cc <_dtoa_r+0x63c>
 8007500:	4632      	mov	r2, r6
 8007502:	463b      	mov	r3, r7
 8007504:	4935      	ldr	r1, [pc, #212]	; (80075dc <_dtoa_r+0x64c>)
 8007506:	2000      	movs	r0, #0
 8007508:	f7f8 febe 	bl	8000288 <__aeabi_dsub>
 800750c:	ec53 2b18 	vmov	r2, r3, d8
 8007510:	f7f9 fae4 	bl	8000adc <__aeabi_dcmplt>
 8007514:	2800      	cmp	r0, #0
 8007516:	f040 80b9 	bne.w	800768c <_dtoa_r+0x6fc>
 800751a:	9b02      	ldr	r3, [sp, #8]
 800751c:	429d      	cmp	r5, r3
 800751e:	f43f af75 	beq.w	800740c <_dtoa_r+0x47c>
 8007522:	4b2f      	ldr	r3, [pc, #188]	; (80075e0 <_dtoa_r+0x650>)
 8007524:	ec51 0b18 	vmov	r0, r1, d8
 8007528:	2200      	movs	r2, #0
 800752a:	f7f9 f865 	bl	80005f8 <__aeabi_dmul>
 800752e:	4b2c      	ldr	r3, [pc, #176]	; (80075e0 <_dtoa_r+0x650>)
 8007530:	ec41 0b18 	vmov	d8, r0, r1
 8007534:	2200      	movs	r2, #0
 8007536:	4630      	mov	r0, r6
 8007538:	4639      	mov	r1, r7
 800753a:	f7f9 f85d 	bl	80005f8 <__aeabi_dmul>
 800753e:	4606      	mov	r6, r0
 8007540:	460f      	mov	r7, r1
 8007542:	e7c4      	b.n	80074ce <_dtoa_r+0x53e>
 8007544:	ec51 0b17 	vmov	r0, r1, d7
 8007548:	f7f9 f856 	bl	80005f8 <__aeabi_dmul>
 800754c:	9b02      	ldr	r3, [sp, #8]
 800754e:	9d00      	ldr	r5, [sp, #0]
 8007550:	930c      	str	r3, [sp, #48]	; 0x30
 8007552:	ec41 0b18 	vmov	d8, r0, r1
 8007556:	4639      	mov	r1, r7
 8007558:	4630      	mov	r0, r6
 800755a:	f7f9 fafd 	bl	8000b58 <__aeabi_d2iz>
 800755e:	9011      	str	r0, [sp, #68]	; 0x44
 8007560:	f7f8 ffe0 	bl	8000524 <__aeabi_i2d>
 8007564:	4602      	mov	r2, r0
 8007566:	460b      	mov	r3, r1
 8007568:	4630      	mov	r0, r6
 800756a:	4639      	mov	r1, r7
 800756c:	f7f8 fe8c 	bl	8000288 <__aeabi_dsub>
 8007570:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007572:	3330      	adds	r3, #48	; 0x30
 8007574:	f805 3b01 	strb.w	r3, [r5], #1
 8007578:	9b02      	ldr	r3, [sp, #8]
 800757a:	429d      	cmp	r5, r3
 800757c:	4606      	mov	r6, r0
 800757e:	460f      	mov	r7, r1
 8007580:	f04f 0200 	mov.w	r2, #0
 8007584:	d134      	bne.n	80075f0 <_dtoa_r+0x660>
 8007586:	4b19      	ldr	r3, [pc, #100]	; (80075ec <_dtoa_r+0x65c>)
 8007588:	ec51 0b18 	vmov	r0, r1, d8
 800758c:	f7f8 fe7e 	bl	800028c <__adddf3>
 8007590:	4602      	mov	r2, r0
 8007592:	460b      	mov	r3, r1
 8007594:	4630      	mov	r0, r6
 8007596:	4639      	mov	r1, r7
 8007598:	f7f9 fabe 	bl	8000b18 <__aeabi_dcmpgt>
 800759c:	2800      	cmp	r0, #0
 800759e:	d175      	bne.n	800768c <_dtoa_r+0x6fc>
 80075a0:	ec53 2b18 	vmov	r2, r3, d8
 80075a4:	4911      	ldr	r1, [pc, #68]	; (80075ec <_dtoa_r+0x65c>)
 80075a6:	2000      	movs	r0, #0
 80075a8:	f7f8 fe6e 	bl	8000288 <__aeabi_dsub>
 80075ac:	4602      	mov	r2, r0
 80075ae:	460b      	mov	r3, r1
 80075b0:	4630      	mov	r0, r6
 80075b2:	4639      	mov	r1, r7
 80075b4:	f7f9 fa92 	bl	8000adc <__aeabi_dcmplt>
 80075b8:	2800      	cmp	r0, #0
 80075ba:	f43f af27 	beq.w	800740c <_dtoa_r+0x47c>
 80075be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80075c0:	1e6b      	subs	r3, r5, #1
 80075c2:	930c      	str	r3, [sp, #48]	; 0x30
 80075c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80075c8:	2b30      	cmp	r3, #48	; 0x30
 80075ca:	d0f8      	beq.n	80075be <_dtoa_r+0x62e>
 80075cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80075d0:	e04a      	b.n	8007668 <_dtoa_r+0x6d8>
 80075d2:	bf00      	nop
 80075d4:	08009940 	.word	0x08009940
 80075d8:	08009918 	.word	0x08009918
 80075dc:	3ff00000 	.word	0x3ff00000
 80075e0:	40240000 	.word	0x40240000
 80075e4:	401c0000 	.word	0x401c0000
 80075e8:	40140000 	.word	0x40140000
 80075ec:	3fe00000 	.word	0x3fe00000
 80075f0:	4baf      	ldr	r3, [pc, #700]	; (80078b0 <_dtoa_r+0x920>)
 80075f2:	f7f9 f801 	bl	80005f8 <__aeabi_dmul>
 80075f6:	4606      	mov	r6, r0
 80075f8:	460f      	mov	r7, r1
 80075fa:	e7ac      	b.n	8007556 <_dtoa_r+0x5c6>
 80075fc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007600:	9d00      	ldr	r5, [sp, #0]
 8007602:	4642      	mov	r2, r8
 8007604:	464b      	mov	r3, r9
 8007606:	4630      	mov	r0, r6
 8007608:	4639      	mov	r1, r7
 800760a:	f7f9 f91f 	bl	800084c <__aeabi_ddiv>
 800760e:	f7f9 faa3 	bl	8000b58 <__aeabi_d2iz>
 8007612:	9002      	str	r0, [sp, #8]
 8007614:	f7f8 ff86 	bl	8000524 <__aeabi_i2d>
 8007618:	4642      	mov	r2, r8
 800761a:	464b      	mov	r3, r9
 800761c:	f7f8 ffec 	bl	80005f8 <__aeabi_dmul>
 8007620:	4602      	mov	r2, r0
 8007622:	460b      	mov	r3, r1
 8007624:	4630      	mov	r0, r6
 8007626:	4639      	mov	r1, r7
 8007628:	f7f8 fe2e 	bl	8000288 <__aeabi_dsub>
 800762c:	9e02      	ldr	r6, [sp, #8]
 800762e:	9f01      	ldr	r7, [sp, #4]
 8007630:	3630      	adds	r6, #48	; 0x30
 8007632:	f805 6b01 	strb.w	r6, [r5], #1
 8007636:	9e00      	ldr	r6, [sp, #0]
 8007638:	1bae      	subs	r6, r5, r6
 800763a:	42b7      	cmp	r7, r6
 800763c:	4602      	mov	r2, r0
 800763e:	460b      	mov	r3, r1
 8007640:	d137      	bne.n	80076b2 <_dtoa_r+0x722>
 8007642:	f7f8 fe23 	bl	800028c <__adddf3>
 8007646:	4642      	mov	r2, r8
 8007648:	464b      	mov	r3, r9
 800764a:	4606      	mov	r6, r0
 800764c:	460f      	mov	r7, r1
 800764e:	f7f9 fa63 	bl	8000b18 <__aeabi_dcmpgt>
 8007652:	b9c8      	cbnz	r0, 8007688 <_dtoa_r+0x6f8>
 8007654:	4642      	mov	r2, r8
 8007656:	464b      	mov	r3, r9
 8007658:	4630      	mov	r0, r6
 800765a:	4639      	mov	r1, r7
 800765c:	f7f9 fa34 	bl	8000ac8 <__aeabi_dcmpeq>
 8007660:	b110      	cbz	r0, 8007668 <_dtoa_r+0x6d8>
 8007662:	9b02      	ldr	r3, [sp, #8]
 8007664:	07d9      	lsls	r1, r3, #31
 8007666:	d40f      	bmi.n	8007688 <_dtoa_r+0x6f8>
 8007668:	4620      	mov	r0, r4
 800766a:	4659      	mov	r1, fp
 800766c:	f000 fae8 	bl	8007c40 <_Bfree>
 8007670:	2300      	movs	r3, #0
 8007672:	702b      	strb	r3, [r5, #0]
 8007674:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007676:	f10a 0001 	add.w	r0, sl, #1
 800767a:	6018      	str	r0, [r3, #0]
 800767c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800767e:	2b00      	cmp	r3, #0
 8007680:	f43f acd8 	beq.w	8007034 <_dtoa_r+0xa4>
 8007684:	601d      	str	r5, [r3, #0]
 8007686:	e4d5      	b.n	8007034 <_dtoa_r+0xa4>
 8007688:	f8cd a01c 	str.w	sl, [sp, #28]
 800768c:	462b      	mov	r3, r5
 800768e:	461d      	mov	r5, r3
 8007690:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007694:	2a39      	cmp	r2, #57	; 0x39
 8007696:	d108      	bne.n	80076aa <_dtoa_r+0x71a>
 8007698:	9a00      	ldr	r2, [sp, #0]
 800769a:	429a      	cmp	r2, r3
 800769c:	d1f7      	bne.n	800768e <_dtoa_r+0x6fe>
 800769e:	9a07      	ldr	r2, [sp, #28]
 80076a0:	9900      	ldr	r1, [sp, #0]
 80076a2:	3201      	adds	r2, #1
 80076a4:	9207      	str	r2, [sp, #28]
 80076a6:	2230      	movs	r2, #48	; 0x30
 80076a8:	700a      	strb	r2, [r1, #0]
 80076aa:	781a      	ldrb	r2, [r3, #0]
 80076ac:	3201      	adds	r2, #1
 80076ae:	701a      	strb	r2, [r3, #0]
 80076b0:	e78c      	b.n	80075cc <_dtoa_r+0x63c>
 80076b2:	4b7f      	ldr	r3, [pc, #508]	; (80078b0 <_dtoa_r+0x920>)
 80076b4:	2200      	movs	r2, #0
 80076b6:	f7f8 ff9f 	bl	80005f8 <__aeabi_dmul>
 80076ba:	2200      	movs	r2, #0
 80076bc:	2300      	movs	r3, #0
 80076be:	4606      	mov	r6, r0
 80076c0:	460f      	mov	r7, r1
 80076c2:	f7f9 fa01 	bl	8000ac8 <__aeabi_dcmpeq>
 80076c6:	2800      	cmp	r0, #0
 80076c8:	d09b      	beq.n	8007602 <_dtoa_r+0x672>
 80076ca:	e7cd      	b.n	8007668 <_dtoa_r+0x6d8>
 80076cc:	9a08      	ldr	r2, [sp, #32]
 80076ce:	2a00      	cmp	r2, #0
 80076d0:	f000 80c4 	beq.w	800785c <_dtoa_r+0x8cc>
 80076d4:	9a05      	ldr	r2, [sp, #20]
 80076d6:	2a01      	cmp	r2, #1
 80076d8:	f300 80a8 	bgt.w	800782c <_dtoa_r+0x89c>
 80076dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80076de:	2a00      	cmp	r2, #0
 80076e0:	f000 80a0 	beq.w	8007824 <_dtoa_r+0x894>
 80076e4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80076e8:	9e06      	ldr	r6, [sp, #24]
 80076ea:	4645      	mov	r5, r8
 80076ec:	9a04      	ldr	r2, [sp, #16]
 80076ee:	2101      	movs	r1, #1
 80076f0:	441a      	add	r2, r3
 80076f2:	4620      	mov	r0, r4
 80076f4:	4498      	add	r8, r3
 80076f6:	9204      	str	r2, [sp, #16]
 80076f8:	f000 fb5e 	bl	8007db8 <__i2b>
 80076fc:	4607      	mov	r7, r0
 80076fe:	2d00      	cmp	r5, #0
 8007700:	dd0b      	ble.n	800771a <_dtoa_r+0x78a>
 8007702:	9b04      	ldr	r3, [sp, #16]
 8007704:	2b00      	cmp	r3, #0
 8007706:	dd08      	ble.n	800771a <_dtoa_r+0x78a>
 8007708:	42ab      	cmp	r3, r5
 800770a:	9a04      	ldr	r2, [sp, #16]
 800770c:	bfa8      	it	ge
 800770e:	462b      	movge	r3, r5
 8007710:	eba8 0803 	sub.w	r8, r8, r3
 8007714:	1aed      	subs	r5, r5, r3
 8007716:	1ad3      	subs	r3, r2, r3
 8007718:	9304      	str	r3, [sp, #16]
 800771a:	9b06      	ldr	r3, [sp, #24]
 800771c:	b1fb      	cbz	r3, 800775e <_dtoa_r+0x7ce>
 800771e:	9b08      	ldr	r3, [sp, #32]
 8007720:	2b00      	cmp	r3, #0
 8007722:	f000 809f 	beq.w	8007864 <_dtoa_r+0x8d4>
 8007726:	2e00      	cmp	r6, #0
 8007728:	dd11      	ble.n	800774e <_dtoa_r+0x7be>
 800772a:	4639      	mov	r1, r7
 800772c:	4632      	mov	r2, r6
 800772e:	4620      	mov	r0, r4
 8007730:	f000 fbfe 	bl	8007f30 <__pow5mult>
 8007734:	465a      	mov	r2, fp
 8007736:	4601      	mov	r1, r0
 8007738:	4607      	mov	r7, r0
 800773a:	4620      	mov	r0, r4
 800773c:	f000 fb52 	bl	8007de4 <__multiply>
 8007740:	4659      	mov	r1, fp
 8007742:	9007      	str	r0, [sp, #28]
 8007744:	4620      	mov	r0, r4
 8007746:	f000 fa7b 	bl	8007c40 <_Bfree>
 800774a:	9b07      	ldr	r3, [sp, #28]
 800774c:	469b      	mov	fp, r3
 800774e:	9b06      	ldr	r3, [sp, #24]
 8007750:	1b9a      	subs	r2, r3, r6
 8007752:	d004      	beq.n	800775e <_dtoa_r+0x7ce>
 8007754:	4659      	mov	r1, fp
 8007756:	4620      	mov	r0, r4
 8007758:	f000 fbea 	bl	8007f30 <__pow5mult>
 800775c:	4683      	mov	fp, r0
 800775e:	2101      	movs	r1, #1
 8007760:	4620      	mov	r0, r4
 8007762:	f000 fb29 	bl	8007db8 <__i2b>
 8007766:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007768:	2b00      	cmp	r3, #0
 800776a:	4606      	mov	r6, r0
 800776c:	dd7c      	ble.n	8007868 <_dtoa_r+0x8d8>
 800776e:	461a      	mov	r2, r3
 8007770:	4601      	mov	r1, r0
 8007772:	4620      	mov	r0, r4
 8007774:	f000 fbdc 	bl	8007f30 <__pow5mult>
 8007778:	9b05      	ldr	r3, [sp, #20]
 800777a:	2b01      	cmp	r3, #1
 800777c:	4606      	mov	r6, r0
 800777e:	dd76      	ble.n	800786e <_dtoa_r+0x8de>
 8007780:	2300      	movs	r3, #0
 8007782:	9306      	str	r3, [sp, #24]
 8007784:	6933      	ldr	r3, [r6, #16]
 8007786:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800778a:	6918      	ldr	r0, [r3, #16]
 800778c:	f000 fac4 	bl	8007d18 <__hi0bits>
 8007790:	f1c0 0020 	rsb	r0, r0, #32
 8007794:	9b04      	ldr	r3, [sp, #16]
 8007796:	4418      	add	r0, r3
 8007798:	f010 001f 	ands.w	r0, r0, #31
 800779c:	f000 8086 	beq.w	80078ac <_dtoa_r+0x91c>
 80077a0:	f1c0 0320 	rsb	r3, r0, #32
 80077a4:	2b04      	cmp	r3, #4
 80077a6:	dd7f      	ble.n	80078a8 <_dtoa_r+0x918>
 80077a8:	f1c0 001c 	rsb	r0, r0, #28
 80077ac:	9b04      	ldr	r3, [sp, #16]
 80077ae:	4403      	add	r3, r0
 80077b0:	4480      	add	r8, r0
 80077b2:	4405      	add	r5, r0
 80077b4:	9304      	str	r3, [sp, #16]
 80077b6:	f1b8 0f00 	cmp.w	r8, #0
 80077ba:	dd05      	ble.n	80077c8 <_dtoa_r+0x838>
 80077bc:	4659      	mov	r1, fp
 80077be:	4642      	mov	r2, r8
 80077c0:	4620      	mov	r0, r4
 80077c2:	f000 fc0f 	bl	8007fe4 <__lshift>
 80077c6:	4683      	mov	fp, r0
 80077c8:	9b04      	ldr	r3, [sp, #16]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	dd05      	ble.n	80077da <_dtoa_r+0x84a>
 80077ce:	4631      	mov	r1, r6
 80077d0:	461a      	mov	r2, r3
 80077d2:	4620      	mov	r0, r4
 80077d4:	f000 fc06 	bl	8007fe4 <__lshift>
 80077d8:	4606      	mov	r6, r0
 80077da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d069      	beq.n	80078b4 <_dtoa_r+0x924>
 80077e0:	4631      	mov	r1, r6
 80077e2:	4658      	mov	r0, fp
 80077e4:	f000 fc6a 	bl	80080bc <__mcmp>
 80077e8:	2800      	cmp	r0, #0
 80077ea:	da63      	bge.n	80078b4 <_dtoa_r+0x924>
 80077ec:	2300      	movs	r3, #0
 80077ee:	4659      	mov	r1, fp
 80077f0:	220a      	movs	r2, #10
 80077f2:	4620      	mov	r0, r4
 80077f4:	f000 fa46 	bl	8007c84 <__multadd>
 80077f8:	9b08      	ldr	r3, [sp, #32]
 80077fa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80077fe:	4683      	mov	fp, r0
 8007800:	2b00      	cmp	r3, #0
 8007802:	f000 818f 	beq.w	8007b24 <_dtoa_r+0xb94>
 8007806:	4639      	mov	r1, r7
 8007808:	2300      	movs	r3, #0
 800780a:	220a      	movs	r2, #10
 800780c:	4620      	mov	r0, r4
 800780e:	f000 fa39 	bl	8007c84 <__multadd>
 8007812:	f1b9 0f00 	cmp.w	r9, #0
 8007816:	4607      	mov	r7, r0
 8007818:	f300 808e 	bgt.w	8007938 <_dtoa_r+0x9a8>
 800781c:	9b05      	ldr	r3, [sp, #20]
 800781e:	2b02      	cmp	r3, #2
 8007820:	dc50      	bgt.n	80078c4 <_dtoa_r+0x934>
 8007822:	e089      	b.n	8007938 <_dtoa_r+0x9a8>
 8007824:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007826:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800782a:	e75d      	b.n	80076e8 <_dtoa_r+0x758>
 800782c:	9b01      	ldr	r3, [sp, #4]
 800782e:	1e5e      	subs	r6, r3, #1
 8007830:	9b06      	ldr	r3, [sp, #24]
 8007832:	42b3      	cmp	r3, r6
 8007834:	bfbf      	itttt	lt
 8007836:	9b06      	ldrlt	r3, [sp, #24]
 8007838:	9606      	strlt	r6, [sp, #24]
 800783a:	1af2      	sublt	r2, r6, r3
 800783c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800783e:	bfb6      	itet	lt
 8007840:	189b      	addlt	r3, r3, r2
 8007842:	1b9e      	subge	r6, r3, r6
 8007844:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007846:	9b01      	ldr	r3, [sp, #4]
 8007848:	bfb8      	it	lt
 800784a:	2600      	movlt	r6, #0
 800784c:	2b00      	cmp	r3, #0
 800784e:	bfb5      	itete	lt
 8007850:	eba8 0503 	sublt.w	r5, r8, r3
 8007854:	9b01      	ldrge	r3, [sp, #4]
 8007856:	2300      	movlt	r3, #0
 8007858:	4645      	movge	r5, r8
 800785a:	e747      	b.n	80076ec <_dtoa_r+0x75c>
 800785c:	9e06      	ldr	r6, [sp, #24]
 800785e:	9f08      	ldr	r7, [sp, #32]
 8007860:	4645      	mov	r5, r8
 8007862:	e74c      	b.n	80076fe <_dtoa_r+0x76e>
 8007864:	9a06      	ldr	r2, [sp, #24]
 8007866:	e775      	b.n	8007754 <_dtoa_r+0x7c4>
 8007868:	9b05      	ldr	r3, [sp, #20]
 800786a:	2b01      	cmp	r3, #1
 800786c:	dc18      	bgt.n	80078a0 <_dtoa_r+0x910>
 800786e:	9b02      	ldr	r3, [sp, #8]
 8007870:	b9b3      	cbnz	r3, 80078a0 <_dtoa_r+0x910>
 8007872:	9b03      	ldr	r3, [sp, #12]
 8007874:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007878:	b9a3      	cbnz	r3, 80078a4 <_dtoa_r+0x914>
 800787a:	9b03      	ldr	r3, [sp, #12]
 800787c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007880:	0d1b      	lsrs	r3, r3, #20
 8007882:	051b      	lsls	r3, r3, #20
 8007884:	b12b      	cbz	r3, 8007892 <_dtoa_r+0x902>
 8007886:	9b04      	ldr	r3, [sp, #16]
 8007888:	3301      	adds	r3, #1
 800788a:	9304      	str	r3, [sp, #16]
 800788c:	f108 0801 	add.w	r8, r8, #1
 8007890:	2301      	movs	r3, #1
 8007892:	9306      	str	r3, [sp, #24]
 8007894:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007896:	2b00      	cmp	r3, #0
 8007898:	f47f af74 	bne.w	8007784 <_dtoa_r+0x7f4>
 800789c:	2001      	movs	r0, #1
 800789e:	e779      	b.n	8007794 <_dtoa_r+0x804>
 80078a0:	2300      	movs	r3, #0
 80078a2:	e7f6      	b.n	8007892 <_dtoa_r+0x902>
 80078a4:	9b02      	ldr	r3, [sp, #8]
 80078a6:	e7f4      	b.n	8007892 <_dtoa_r+0x902>
 80078a8:	d085      	beq.n	80077b6 <_dtoa_r+0x826>
 80078aa:	4618      	mov	r0, r3
 80078ac:	301c      	adds	r0, #28
 80078ae:	e77d      	b.n	80077ac <_dtoa_r+0x81c>
 80078b0:	40240000 	.word	0x40240000
 80078b4:	9b01      	ldr	r3, [sp, #4]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	dc38      	bgt.n	800792c <_dtoa_r+0x99c>
 80078ba:	9b05      	ldr	r3, [sp, #20]
 80078bc:	2b02      	cmp	r3, #2
 80078be:	dd35      	ble.n	800792c <_dtoa_r+0x99c>
 80078c0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80078c4:	f1b9 0f00 	cmp.w	r9, #0
 80078c8:	d10d      	bne.n	80078e6 <_dtoa_r+0x956>
 80078ca:	4631      	mov	r1, r6
 80078cc:	464b      	mov	r3, r9
 80078ce:	2205      	movs	r2, #5
 80078d0:	4620      	mov	r0, r4
 80078d2:	f000 f9d7 	bl	8007c84 <__multadd>
 80078d6:	4601      	mov	r1, r0
 80078d8:	4606      	mov	r6, r0
 80078da:	4658      	mov	r0, fp
 80078dc:	f000 fbee 	bl	80080bc <__mcmp>
 80078e0:	2800      	cmp	r0, #0
 80078e2:	f73f adbd 	bgt.w	8007460 <_dtoa_r+0x4d0>
 80078e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078e8:	9d00      	ldr	r5, [sp, #0]
 80078ea:	ea6f 0a03 	mvn.w	sl, r3
 80078ee:	f04f 0800 	mov.w	r8, #0
 80078f2:	4631      	mov	r1, r6
 80078f4:	4620      	mov	r0, r4
 80078f6:	f000 f9a3 	bl	8007c40 <_Bfree>
 80078fa:	2f00      	cmp	r7, #0
 80078fc:	f43f aeb4 	beq.w	8007668 <_dtoa_r+0x6d8>
 8007900:	f1b8 0f00 	cmp.w	r8, #0
 8007904:	d005      	beq.n	8007912 <_dtoa_r+0x982>
 8007906:	45b8      	cmp	r8, r7
 8007908:	d003      	beq.n	8007912 <_dtoa_r+0x982>
 800790a:	4641      	mov	r1, r8
 800790c:	4620      	mov	r0, r4
 800790e:	f000 f997 	bl	8007c40 <_Bfree>
 8007912:	4639      	mov	r1, r7
 8007914:	4620      	mov	r0, r4
 8007916:	f000 f993 	bl	8007c40 <_Bfree>
 800791a:	e6a5      	b.n	8007668 <_dtoa_r+0x6d8>
 800791c:	2600      	movs	r6, #0
 800791e:	4637      	mov	r7, r6
 8007920:	e7e1      	b.n	80078e6 <_dtoa_r+0x956>
 8007922:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007924:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007928:	4637      	mov	r7, r6
 800792a:	e599      	b.n	8007460 <_dtoa_r+0x4d0>
 800792c:	9b08      	ldr	r3, [sp, #32]
 800792e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007932:	2b00      	cmp	r3, #0
 8007934:	f000 80fd 	beq.w	8007b32 <_dtoa_r+0xba2>
 8007938:	2d00      	cmp	r5, #0
 800793a:	dd05      	ble.n	8007948 <_dtoa_r+0x9b8>
 800793c:	4639      	mov	r1, r7
 800793e:	462a      	mov	r2, r5
 8007940:	4620      	mov	r0, r4
 8007942:	f000 fb4f 	bl	8007fe4 <__lshift>
 8007946:	4607      	mov	r7, r0
 8007948:	9b06      	ldr	r3, [sp, #24]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d05c      	beq.n	8007a08 <_dtoa_r+0xa78>
 800794e:	6879      	ldr	r1, [r7, #4]
 8007950:	4620      	mov	r0, r4
 8007952:	f000 f935 	bl	8007bc0 <_Balloc>
 8007956:	4605      	mov	r5, r0
 8007958:	b928      	cbnz	r0, 8007966 <_dtoa_r+0x9d6>
 800795a:	4b80      	ldr	r3, [pc, #512]	; (8007b5c <_dtoa_r+0xbcc>)
 800795c:	4602      	mov	r2, r0
 800795e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007962:	f7ff bb2e 	b.w	8006fc2 <_dtoa_r+0x32>
 8007966:	693a      	ldr	r2, [r7, #16]
 8007968:	3202      	adds	r2, #2
 800796a:	0092      	lsls	r2, r2, #2
 800796c:	f107 010c 	add.w	r1, r7, #12
 8007970:	300c      	adds	r0, #12
 8007972:	f000 f917 	bl	8007ba4 <memcpy>
 8007976:	2201      	movs	r2, #1
 8007978:	4629      	mov	r1, r5
 800797a:	4620      	mov	r0, r4
 800797c:	f000 fb32 	bl	8007fe4 <__lshift>
 8007980:	9b00      	ldr	r3, [sp, #0]
 8007982:	3301      	adds	r3, #1
 8007984:	9301      	str	r3, [sp, #4]
 8007986:	9b00      	ldr	r3, [sp, #0]
 8007988:	444b      	add	r3, r9
 800798a:	9307      	str	r3, [sp, #28]
 800798c:	9b02      	ldr	r3, [sp, #8]
 800798e:	f003 0301 	and.w	r3, r3, #1
 8007992:	46b8      	mov	r8, r7
 8007994:	9306      	str	r3, [sp, #24]
 8007996:	4607      	mov	r7, r0
 8007998:	9b01      	ldr	r3, [sp, #4]
 800799a:	4631      	mov	r1, r6
 800799c:	3b01      	subs	r3, #1
 800799e:	4658      	mov	r0, fp
 80079a0:	9302      	str	r3, [sp, #8]
 80079a2:	f7ff fa69 	bl	8006e78 <quorem>
 80079a6:	4603      	mov	r3, r0
 80079a8:	3330      	adds	r3, #48	; 0x30
 80079aa:	9004      	str	r0, [sp, #16]
 80079ac:	4641      	mov	r1, r8
 80079ae:	4658      	mov	r0, fp
 80079b0:	9308      	str	r3, [sp, #32]
 80079b2:	f000 fb83 	bl	80080bc <__mcmp>
 80079b6:	463a      	mov	r2, r7
 80079b8:	4681      	mov	r9, r0
 80079ba:	4631      	mov	r1, r6
 80079bc:	4620      	mov	r0, r4
 80079be:	f000 fb99 	bl	80080f4 <__mdiff>
 80079c2:	68c2      	ldr	r2, [r0, #12]
 80079c4:	9b08      	ldr	r3, [sp, #32]
 80079c6:	4605      	mov	r5, r0
 80079c8:	bb02      	cbnz	r2, 8007a0c <_dtoa_r+0xa7c>
 80079ca:	4601      	mov	r1, r0
 80079cc:	4658      	mov	r0, fp
 80079ce:	f000 fb75 	bl	80080bc <__mcmp>
 80079d2:	9b08      	ldr	r3, [sp, #32]
 80079d4:	4602      	mov	r2, r0
 80079d6:	4629      	mov	r1, r5
 80079d8:	4620      	mov	r0, r4
 80079da:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80079de:	f000 f92f 	bl	8007c40 <_Bfree>
 80079e2:	9b05      	ldr	r3, [sp, #20]
 80079e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079e6:	9d01      	ldr	r5, [sp, #4]
 80079e8:	ea43 0102 	orr.w	r1, r3, r2
 80079ec:	9b06      	ldr	r3, [sp, #24]
 80079ee:	430b      	orrs	r3, r1
 80079f0:	9b08      	ldr	r3, [sp, #32]
 80079f2:	d10d      	bne.n	8007a10 <_dtoa_r+0xa80>
 80079f4:	2b39      	cmp	r3, #57	; 0x39
 80079f6:	d029      	beq.n	8007a4c <_dtoa_r+0xabc>
 80079f8:	f1b9 0f00 	cmp.w	r9, #0
 80079fc:	dd01      	ble.n	8007a02 <_dtoa_r+0xa72>
 80079fe:	9b04      	ldr	r3, [sp, #16]
 8007a00:	3331      	adds	r3, #49	; 0x31
 8007a02:	9a02      	ldr	r2, [sp, #8]
 8007a04:	7013      	strb	r3, [r2, #0]
 8007a06:	e774      	b.n	80078f2 <_dtoa_r+0x962>
 8007a08:	4638      	mov	r0, r7
 8007a0a:	e7b9      	b.n	8007980 <_dtoa_r+0x9f0>
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	e7e2      	b.n	80079d6 <_dtoa_r+0xa46>
 8007a10:	f1b9 0f00 	cmp.w	r9, #0
 8007a14:	db06      	blt.n	8007a24 <_dtoa_r+0xa94>
 8007a16:	9905      	ldr	r1, [sp, #20]
 8007a18:	ea41 0909 	orr.w	r9, r1, r9
 8007a1c:	9906      	ldr	r1, [sp, #24]
 8007a1e:	ea59 0101 	orrs.w	r1, r9, r1
 8007a22:	d120      	bne.n	8007a66 <_dtoa_r+0xad6>
 8007a24:	2a00      	cmp	r2, #0
 8007a26:	ddec      	ble.n	8007a02 <_dtoa_r+0xa72>
 8007a28:	4659      	mov	r1, fp
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	9301      	str	r3, [sp, #4]
 8007a30:	f000 fad8 	bl	8007fe4 <__lshift>
 8007a34:	4631      	mov	r1, r6
 8007a36:	4683      	mov	fp, r0
 8007a38:	f000 fb40 	bl	80080bc <__mcmp>
 8007a3c:	2800      	cmp	r0, #0
 8007a3e:	9b01      	ldr	r3, [sp, #4]
 8007a40:	dc02      	bgt.n	8007a48 <_dtoa_r+0xab8>
 8007a42:	d1de      	bne.n	8007a02 <_dtoa_r+0xa72>
 8007a44:	07da      	lsls	r2, r3, #31
 8007a46:	d5dc      	bpl.n	8007a02 <_dtoa_r+0xa72>
 8007a48:	2b39      	cmp	r3, #57	; 0x39
 8007a4a:	d1d8      	bne.n	80079fe <_dtoa_r+0xa6e>
 8007a4c:	9a02      	ldr	r2, [sp, #8]
 8007a4e:	2339      	movs	r3, #57	; 0x39
 8007a50:	7013      	strb	r3, [r2, #0]
 8007a52:	462b      	mov	r3, r5
 8007a54:	461d      	mov	r5, r3
 8007a56:	3b01      	subs	r3, #1
 8007a58:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007a5c:	2a39      	cmp	r2, #57	; 0x39
 8007a5e:	d050      	beq.n	8007b02 <_dtoa_r+0xb72>
 8007a60:	3201      	adds	r2, #1
 8007a62:	701a      	strb	r2, [r3, #0]
 8007a64:	e745      	b.n	80078f2 <_dtoa_r+0x962>
 8007a66:	2a00      	cmp	r2, #0
 8007a68:	dd03      	ble.n	8007a72 <_dtoa_r+0xae2>
 8007a6a:	2b39      	cmp	r3, #57	; 0x39
 8007a6c:	d0ee      	beq.n	8007a4c <_dtoa_r+0xabc>
 8007a6e:	3301      	adds	r3, #1
 8007a70:	e7c7      	b.n	8007a02 <_dtoa_r+0xa72>
 8007a72:	9a01      	ldr	r2, [sp, #4]
 8007a74:	9907      	ldr	r1, [sp, #28]
 8007a76:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007a7a:	428a      	cmp	r2, r1
 8007a7c:	d02a      	beq.n	8007ad4 <_dtoa_r+0xb44>
 8007a7e:	4659      	mov	r1, fp
 8007a80:	2300      	movs	r3, #0
 8007a82:	220a      	movs	r2, #10
 8007a84:	4620      	mov	r0, r4
 8007a86:	f000 f8fd 	bl	8007c84 <__multadd>
 8007a8a:	45b8      	cmp	r8, r7
 8007a8c:	4683      	mov	fp, r0
 8007a8e:	f04f 0300 	mov.w	r3, #0
 8007a92:	f04f 020a 	mov.w	r2, #10
 8007a96:	4641      	mov	r1, r8
 8007a98:	4620      	mov	r0, r4
 8007a9a:	d107      	bne.n	8007aac <_dtoa_r+0xb1c>
 8007a9c:	f000 f8f2 	bl	8007c84 <__multadd>
 8007aa0:	4680      	mov	r8, r0
 8007aa2:	4607      	mov	r7, r0
 8007aa4:	9b01      	ldr	r3, [sp, #4]
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	9301      	str	r3, [sp, #4]
 8007aaa:	e775      	b.n	8007998 <_dtoa_r+0xa08>
 8007aac:	f000 f8ea 	bl	8007c84 <__multadd>
 8007ab0:	4639      	mov	r1, r7
 8007ab2:	4680      	mov	r8, r0
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	220a      	movs	r2, #10
 8007ab8:	4620      	mov	r0, r4
 8007aba:	f000 f8e3 	bl	8007c84 <__multadd>
 8007abe:	4607      	mov	r7, r0
 8007ac0:	e7f0      	b.n	8007aa4 <_dtoa_r+0xb14>
 8007ac2:	f1b9 0f00 	cmp.w	r9, #0
 8007ac6:	9a00      	ldr	r2, [sp, #0]
 8007ac8:	bfcc      	ite	gt
 8007aca:	464d      	movgt	r5, r9
 8007acc:	2501      	movle	r5, #1
 8007ace:	4415      	add	r5, r2
 8007ad0:	f04f 0800 	mov.w	r8, #0
 8007ad4:	4659      	mov	r1, fp
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	4620      	mov	r0, r4
 8007ada:	9301      	str	r3, [sp, #4]
 8007adc:	f000 fa82 	bl	8007fe4 <__lshift>
 8007ae0:	4631      	mov	r1, r6
 8007ae2:	4683      	mov	fp, r0
 8007ae4:	f000 faea 	bl	80080bc <__mcmp>
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	dcb2      	bgt.n	8007a52 <_dtoa_r+0xac2>
 8007aec:	d102      	bne.n	8007af4 <_dtoa_r+0xb64>
 8007aee:	9b01      	ldr	r3, [sp, #4]
 8007af0:	07db      	lsls	r3, r3, #31
 8007af2:	d4ae      	bmi.n	8007a52 <_dtoa_r+0xac2>
 8007af4:	462b      	mov	r3, r5
 8007af6:	461d      	mov	r5, r3
 8007af8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007afc:	2a30      	cmp	r2, #48	; 0x30
 8007afe:	d0fa      	beq.n	8007af6 <_dtoa_r+0xb66>
 8007b00:	e6f7      	b.n	80078f2 <_dtoa_r+0x962>
 8007b02:	9a00      	ldr	r2, [sp, #0]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d1a5      	bne.n	8007a54 <_dtoa_r+0xac4>
 8007b08:	f10a 0a01 	add.w	sl, sl, #1
 8007b0c:	2331      	movs	r3, #49	; 0x31
 8007b0e:	e779      	b.n	8007a04 <_dtoa_r+0xa74>
 8007b10:	4b13      	ldr	r3, [pc, #76]	; (8007b60 <_dtoa_r+0xbd0>)
 8007b12:	f7ff baaf 	b.w	8007074 <_dtoa_r+0xe4>
 8007b16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	f47f aa86 	bne.w	800702a <_dtoa_r+0x9a>
 8007b1e:	4b11      	ldr	r3, [pc, #68]	; (8007b64 <_dtoa_r+0xbd4>)
 8007b20:	f7ff baa8 	b.w	8007074 <_dtoa_r+0xe4>
 8007b24:	f1b9 0f00 	cmp.w	r9, #0
 8007b28:	dc03      	bgt.n	8007b32 <_dtoa_r+0xba2>
 8007b2a:	9b05      	ldr	r3, [sp, #20]
 8007b2c:	2b02      	cmp	r3, #2
 8007b2e:	f73f aec9 	bgt.w	80078c4 <_dtoa_r+0x934>
 8007b32:	9d00      	ldr	r5, [sp, #0]
 8007b34:	4631      	mov	r1, r6
 8007b36:	4658      	mov	r0, fp
 8007b38:	f7ff f99e 	bl	8006e78 <quorem>
 8007b3c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007b40:	f805 3b01 	strb.w	r3, [r5], #1
 8007b44:	9a00      	ldr	r2, [sp, #0]
 8007b46:	1aaa      	subs	r2, r5, r2
 8007b48:	4591      	cmp	r9, r2
 8007b4a:	ddba      	ble.n	8007ac2 <_dtoa_r+0xb32>
 8007b4c:	4659      	mov	r1, fp
 8007b4e:	2300      	movs	r3, #0
 8007b50:	220a      	movs	r2, #10
 8007b52:	4620      	mov	r0, r4
 8007b54:	f000 f896 	bl	8007c84 <__multadd>
 8007b58:	4683      	mov	fp, r0
 8007b5a:	e7eb      	b.n	8007b34 <_dtoa_r+0xba4>
 8007b5c:	080098a1 	.word	0x080098a1
 8007b60:	0800965c 	.word	0x0800965c
 8007b64:	08009835 	.word	0x08009835

08007b68 <fiprintf>:
 8007b68:	b40e      	push	{r1, r2, r3}
 8007b6a:	b503      	push	{r0, r1, lr}
 8007b6c:	4601      	mov	r1, r0
 8007b6e:	ab03      	add	r3, sp, #12
 8007b70:	4805      	ldr	r0, [pc, #20]	; (8007b88 <fiprintf+0x20>)
 8007b72:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b76:	6800      	ldr	r0, [r0, #0]
 8007b78:	9301      	str	r3, [sp, #4]
 8007b7a:	f000 fddf 	bl	800873c <_vfiprintf_r>
 8007b7e:	b002      	add	sp, #8
 8007b80:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b84:	b003      	add	sp, #12
 8007b86:	4770      	bx	lr
 8007b88:	20000014 	.word	0x20000014

08007b8c <_localeconv_r>:
 8007b8c:	4800      	ldr	r0, [pc, #0]	; (8007b90 <_localeconv_r+0x4>)
 8007b8e:	4770      	bx	lr
 8007b90:	20000168 	.word	0x20000168

08007b94 <malloc>:
 8007b94:	4b02      	ldr	r3, [pc, #8]	; (8007ba0 <malloc+0xc>)
 8007b96:	4601      	mov	r1, r0
 8007b98:	6818      	ldr	r0, [r3, #0]
 8007b9a:	f000 bbef 	b.w	800837c <_malloc_r>
 8007b9e:	bf00      	nop
 8007ba0:	20000014 	.word	0x20000014

08007ba4 <memcpy>:
 8007ba4:	440a      	add	r2, r1
 8007ba6:	4291      	cmp	r1, r2
 8007ba8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007bac:	d100      	bne.n	8007bb0 <memcpy+0xc>
 8007bae:	4770      	bx	lr
 8007bb0:	b510      	push	{r4, lr}
 8007bb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bba:	4291      	cmp	r1, r2
 8007bbc:	d1f9      	bne.n	8007bb2 <memcpy+0xe>
 8007bbe:	bd10      	pop	{r4, pc}

08007bc0 <_Balloc>:
 8007bc0:	b570      	push	{r4, r5, r6, lr}
 8007bc2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007bc4:	4604      	mov	r4, r0
 8007bc6:	460d      	mov	r5, r1
 8007bc8:	b976      	cbnz	r6, 8007be8 <_Balloc+0x28>
 8007bca:	2010      	movs	r0, #16
 8007bcc:	f7ff ffe2 	bl	8007b94 <malloc>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	6260      	str	r0, [r4, #36]	; 0x24
 8007bd4:	b920      	cbnz	r0, 8007be0 <_Balloc+0x20>
 8007bd6:	4b18      	ldr	r3, [pc, #96]	; (8007c38 <_Balloc+0x78>)
 8007bd8:	4818      	ldr	r0, [pc, #96]	; (8007c3c <_Balloc+0x7c>)
 8007bda:	2166      	movs	r1, #102	; 0x66
 8007bdc:	f7ff f92e 	bl	8006e3c <__assert_func>
 8007be0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007be4:	6006      	str	r6, [r0, #0]
 8007be6:	60c6      	str	r6, [r0, #12]
 8007be8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007bea:	68f3      	ldr	r3, [r6, #12]
 8007bec:	b183      	cbz	r3, 8007c10 <_Balloc+0x50>
 8007bee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007bf6:	b9b8      	cbnz	r0, 8007c28 <_Balloc+0x68>
 8007bf8:	2101      	movs	r1, #1
 8007bfa:	fa01 f605 	lsl.w	r6, r1, r5
 8007bfe:	1d72      	adds	r2, r6, #5
 8007c00:	0092      	lsls	r2, r2, #2
 8007c02:	4620      	mov	r0, r4
 8007c04:	f000 fb5a 	bl	80082bc <_calloc_r>
 8007c08:	b160      	cbz	r0, 8007c24 <_Balloc+0x64>
 8007c0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c0e:	e00e      	b.n	8007c2e <_Balloc+0x6e>
 8007c10:	2221      	movs	r2, #33	; 0x21
 8007c12:	2104      	movs	r1, #4
 8007c14:	4620      	mov	r0, r4
 8007c16:	f000 fb51 	bl	80082bc <_calloc_r>
 8007c1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c1c:	60f0      	str	r0, [r6, #12]
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d1e4      	bne.n	8007bee <_Balloc+0x2e>
 8007c24:	2000      	movs	r0, #0
 8007c26:	bd70      	pop	{r4, r5, r6, pc}
 8007c28:	6802      	ldr	r2, [r0, #0]
 8007c2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007c2e:	2300      	movs	r3, #0
 8007c30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c34:	e7f7      	b.n	8007c26 <_Balloc+0x66>
 8007c36:	bf00      	nop
 8007c38:	08009680 	.word	0x08009680
 8007c3c:	080098b2 	.word	0x080098b2

08007c40 <_Bfree>:
 8007c40:	b570      	push	{r4, r5, r6, lr}
 8007c42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007c44:	4605      	mov	r5, r0
 8007c46:	460c      	mov	r4, r1
 8007c48:	b976      	cbnz	r6, 8007c68 <_Bfree+0x28>
 8007c4a:	2010      	movs	r0, #16
 8007c4c:	f7ff ffa2 	bl	8007b94 <malloc>
 8007c50:	4602      	mov	r2, r0
 8007c52:	6268      	str	r0, [r5, #36]	; 0x24
 8007c54:	b920      	cbnz	r0, 8007c60 <_Bfree+0x20>
 8007c56:	4b09      	ldr	r3, [pc, #36]	; (8007c7c <_Bfree+0x3c>)
 8007c58:	4809      	ldr	r0, [pc, #36]	; (8007c80 <_Bfree+0x40>)
 8007c5a:	218a      	movs	r1, #138	; 0x8a
 8007c5c:	f7ff f8ee 	bl	8006e3c <__assert_func>
 8007c60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c64:	6006      	str	r6, [r0, #0]
 8007c66:	60c6      	str	r6, [r0, #12]
 8007c68:	b13c      	cbz	r4, 8007c7a <_Bfree+0x3a>
 8007c6a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007c6c:	6862      	ldr	r2, [r4, #4]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c74:	6021      	str	r1, [r4, #0]
 8007c76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007c7a:	bd70      	pop	{r4, r5, r6, pc}
 8007c7c:	08009680 	.word	0x08009680
 8007c80:	080098b2 	.word	0x080098b2

08007c84 <__multadd>:
 8007c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c88:	690e      	ldr	r6, [r1, #16]
 8007c8a:	4607      	mov	r7, r0
 8007c8c:	4698      	mov	r8, r3
 8007c8e:	460c      	mov	r4, r1
 8007c90:	f101 0014 	add.w	r0, r1, #20
 8007c94:	2300      	movs	r3, #0
 8007c96:	6805      	ldr	r5, [r0, #0]
 8007c98:	b2a9      	uxth	r1, r5
 8007c9a:	fb02 8101 	mla	r1, r2, r1, r8
 8007c9e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007ca2:	0c2d      	lsrs	r5, r5, #16
 8007ca4:	fb02 c505 	mla	r5, r2, r5, ip
 8007ca8:	b289      	uxth	r1, r1
 8007caa:	3301      	adds	r3, #1
 8007cac:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007cb0:	429e      	cmp	r6, r3
 8007cb2:	f840 1b04 	str.w	r1, [r0], #4
 8007cb6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007cba:	dcec      	bgt.n	8007c96 <__multadd+0x12>
 8007cbc:	f1b8 0f00 	cmp.w	r8, #0
 8007cc0:	d022      	beq.n	8007d08 <__multadd+0x84>
 8007cc2:	68a3      	ldr	r3, [r4, #8]
 8007cc4:	42b3      	cmp	r3, r6
 8007cc6:	dc19      	bgt.n	8007cfc <__multadd+0x78>
 8007cc8:	6861      	ldr	r1, [r4, #4]
 8007cca:	4638      	mov	r0, r7
 8007ccc:	3101      	adds	r1, #1
 8007cce:	f7ff ff77 	bl	8007bc0 <_Balloc>
 8007cd2:	4605      	mov	r5, r0
 8007cd4:	b928      	cbnz	r0, 8007ce2 <__multadd+0x5e>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	4b0d      	ldr	r3, [pc, #52]	; (8007d10 <__multadd+0x8c>)
 8007cda:	480e      	ldr	r0, [pc, #56]	; (8007d14 <__multadd+0x90>)
 8007cdc:	21b5      	movs	r1, #181	; 0xb5
 8007cde:	f7ff f8ad 	bl	8006e3c <__assert_func>
 8007ce2:	6922      	ldr	r2, [r4, #16]
 8007ce4:	3202      	adds	r2, #2
 8007ce6:	f104 010c 	add.w	r1, r4, #12
 8007cea:	0092      	lsls	r2, r2, #2
 8007cec:	300c      	adds	r0, #12
 8007cee:	f7ff ff59 	bl	8007ba4 <memcpy>
 8007cf2:	4621      	mov	r1, r4
 8007cf4:	4638      	mov	r0, r7
 8007cf6:	f7ff ffa3 	bl	8007c40 <_Bfree>
 8007cfa:	462c      	mov	r4, r5
 8007cfc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007d00:	3601      	adds	r6, #1
 8007d02:	f8c3 8014 	str.w	r8, [r3, #20]
 8007d06:	6126      	str	r6, [r4, #16]
 8007d08:	4620      	mov	r0, r4
 8007d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d0e:	bf00      	nop
 8007d10:	080098a1 	.word	0x080098a1
 8007d14:	080098b2 	.word	0x080098b2

08007d18 <__hi0bits>:
 8007d18:	0c03      	lsrs	r3, r0, #16
 8007d1a:	041b      	lsls	r3, r3, #16
 8007d1c:	b9d3      	cbnz	r3, 8007d54 <__hi0bits+0x3c>
 8007d1e:	0400      	lsls	r0, r0, #16
 8007d20:	2310      	movs	r3, #16
 8007d22:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007d26:	bf04      	itt	eq
 8007d28:	0200      	lsleq	r0, r0, #8
 8007d2a:	3308      	addeq	r3, #8
 8007d2c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007d30:	bf04      	itt	eq
 8007d32:	0100      	lsleq	r0, r0, #4
 8007d34:	3304      	addeq	r3, #4
 8007d36:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007d3a:	bf04      	itt	eq
 8007d3c:	0080      	lsleq	r0, r0, #2
 8007d3e:	3302      	addeq	r3, #2
 8007d40:	2800      	cmp	r0, #0
 8007d42:	db05      	blt.n	8007d50 <__hi0bits+0x38>
 8007d44:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007d48:	f103 0301 	add.w	r3, r3, #1
 8007d4c:	bf08      	it	eq
 8007d4e:	2320      	moveq	r3, #32
 8007d50:	4618      	mov	r0, r3
 8007d52:	4770      	bx	lr
 8007d54:	2300      	movs	r3, #0
 8007d56:	e7e4      	b.n	8007d22 <__hi0bits+0xa>

08007d58 <__lo0bits>:
 8007d58:	6803      	ldr	r3, [r0, #0]
 8007d5a:	f013 0207 	ands.w	r2, r3, #7
 8007d5e:	4601      	mov	r1, r0
 8007d60:	d00b      	beq.n	8007d7a <__lo0bits+0x22>
 8007d62:	07da      	lsls	r2, r3, #31
 8007d64:	d424      	bmi.n	8007db0 <__lo0bits+0x58>
 8007d66:	0798      	lsls	r0, r3, #30
 8007d68:	bf49      	itett	mi
 8007d6a:	085b      	lsrmi	r3, r3, #1
 8007d6c:	089b      	lsrpl	r3, r3, #2
 8007d6e:	2001      	movmi	r0, #1
 8007d70:	600b      	strmi	r3, [r1, #0]
 8007d72:	bf5c      	itt	pl
 8007d74:	600b      	strpl	r3, [r1, #0]
 8007d76:	2002      	movpl	r0, #2
 8007d78:	4770      	bx	lr
 8007d7a:	b298      	uxth	r0, r3
 8007d7c:	b9b0      	cbnz	r0, 8007dac <__lo0bits+0x54>
 8007d7e:	0c1b      	lsrs	r3, r3, #16
 8007d80:	2010      	movs	r0, #16
 8007d82:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007d86:	bf04      	itt	eq
 8007d88:	0a1b      	lsreq	r3, r3, #8
 8007d8a:	3008      	addeq	r0, #8
 8007d8c:	071a      	lsls	r2, r3, #28
 8007d8e:	bf04      	itt	eq
 8007d90:	091b      	lsreq	r3, r3, #4
 8007d92:	3004      	addeq	r0, #4
 8007d94:	079a      	lsls	r2, r3, #30
 8007d96:	bf04      	itt	eq
 8007d98:	089b      	lsreq	r3, r3, #2
 8007d9a:	3002      	addeq	r0, #2
 8007d9c:	07da      	lsls	r2, r3, #31
 8007d9e:	d403      	bmi.n	8007da8 <__lo0bits+0x50>
 8007da0:	085b      	lsrs	r3, r3, #1
 8007da2:	f100 0001 	add.w	r0, r0, #1
 8007da6:	d005      	beq.n	8007db4 <__lo0bits+0x5c>
 8007da8:	600b      	str	r3, [r1, #0]
 8007daa:	4770      	bx	lr
 8007dac:	4610      	mov	r0, r2
 8007dae:	e7e8      	b.n	8007d82 <__lo0bits+0x2a>
 8007db0:	2000      	movs	r0, #0
 8007db2:	4770      	bx	lr
 8007db4:	2020      	movs	r0, #32
 8007db6:	4770      	bx	lr

08007db8 <__i2b>:
 8007db8:	b510      	push	{r4, lr}
 8007dba:	460c      	mov	r4, r1
 8007dbc:	2101      	movs	r1, #1
 8007dbe:	f7ff feff 	bl	8007bc0 <_Balloc>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	b928      	cbnz	r0, 8007dd2 <__i2b+0x1a>
 8007dc6:	4b05      	ldr	r3, [pc, #20]	; (8007ddc <__i2b+0x24>)
 8007dc8:	4805      	ldr	r0, [pc, #20]	; (8007de0 <__i2b+0x28>)
 8007dca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007dce:	f7ff f835 	bl	8006e3c <__assert_func>
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	6144      	str	r4, [r0, #20]
 8007dd6:	6103      	str	r3, [r0, #16]
 8007dd8:	bd10      	pop	{r4, pc}
 8007dda:	bf00      	nop
 8007ddc:	080098a1 	.word	0x080098a1
 8007de0:	080098b2 	.word	0x080098b2

08007de4 <__multiply>:
 8007de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007de8:	4614      	mov	r4, r2
 8007dea:	690a      	ldr	r2, [r1, #16]
 8007dec:	6923      	ldr	r3, [r4, #16]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	bfb8      	it	lt
 8007df2:	460b      	movlt	r3, r1
 8007df4:	460d      	mov	r5, r1
 8007df6:	bfbc      	itt	lt
 8007df8:	4625      	movlt	r5, r4
 8007dfa:	461c      	movlt	r4, r3
 8007dfc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007e00:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007e04:	68ab      	ldr	r3, [r5, #8]
 8007e06:	6869      	ldr	r1, [r5, #4]
 8007e08:	eb0a 0709 	add.w	r7, sl, r9
 8007e0c:	42bb      	cmp	r3, r7
 8007e0e:	b085      	sub	sp, #20
 8007e10:	bfb8      	it	lt
 8007e12:	3101      	addlt	r1, #1
 8007e14:	f7ff fed4 	bl	8007bc0 <_Balloc>
 8007e18:	b930      	cbnz	r0, 8007e28 <__multiply+0x44>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	4b42      	ldr	r3, [pc, #264]	; (8007f28 <__multiply+0x144>)
 8007e1e:	4843      	ldr	r0, [pc, #268]	; (8007f2c <__multiply+0x148>)
 8007e20:	f240 115d 	movw	r1, #349	; 0x15d
 8007e24:	f7ff f80a 	bl	8006e3c <__assert_func>
 8007e28:	f100 0614 	add.w	r6, r0, #20
 8007e2c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007e30:	4633      	mov	r3, r6
 8007e32:	2200      	movs	r2, #0
 8007e34:	4543      	cmp	r3, r8
 8007e36:	d31e      	bcc.n	8007e76 <__multiply+0x92>
 8007e38:	f105 0c14 	add.w	ip, r5, #20
 8007e3c:	f104 0314 	add.w	r3, r4, #20
 8007e40:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007e44:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007e48:	9202      	str	r2, [sp, #8]
 8007e4a:	ebac 0205 	sub.w	r2, ip, r5
 8007e4e:	3a15      	subs	r2, #21
 8007e50:	f022 0203 	bic.w	r2, r2, #3
 8007e54:	3204      	adds	r2, #4
 8007e56:	f105 0115 	add.w	r1, r5, #21
 8007e5a:	458c      	cmp	ip, r1
 8007e5c:	bf38      	it	cc
 8007e5e:	2204      	movcc	r2, #4
 8007e60:	9201      	str	r2, [sp, #4]
 8007e62:	9a02      	ldr	r2, [sp, #8]
 8007e64:	9303      	str	r3, [sp, #12]
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d808      	bhi.n	8007e7c <__multiply+0x98>
 8007e6a:	2f00      	cmp	r7, #0
 8007e6c:	dc55      	bgt.n	8007f1a <__multiply+0x136>
 8007e6e:	6107      	str	r7, [r0, #16]
 8007e70:	b005      	add	sp, #20
 8007e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e76:	f843 2b04 	str.w	r2, [r3], #4
 8007e7a:	e7db      	b.n	8007e34 <__multiply+0x50>
 8007e7c:	f8b3 a000 	ldrh.w	sl, [r3]
 8007e80:	f1ba 0f00 	cmp.w	sl, #0
 8007e84:	d020      	beq.n	8007ec8 <__multiply+0xe4>
 8007e86:	f105 0e14 	add.w	lr, r5, #20
 8007e8a:	46b1      	mov	r9, r6
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007e92:	f8d9 b000 	ldr.w	fp, [r9]
 8007e96:	b2a1      	uxth	r1, r4
 8007e98:	fa1f fb8b 	uxth.w	fp, fp
 8007e9c:	fb0a b101 	mla	r1, sl, r1, fp
 8007ea0:	4411      	add	r1, r2
 8007ea2:	f8d9 2000 	ldr.w	r2, [r9]
 8007ea6:	0c24      	lsrs	r4, r4, #16
 8007ea8:	0c12      	lsrs	r2, r2, #16
 8007eaa:	fb0a 2404 	mla	r4, sl, r4, r2
 8007eae:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007eb2:	b289      	uxth	r1, r1
 8007eb4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007eb8:	45f4      	cmp	ip, lr
 8007eba:	f849 1b04 	str.w	r1, [r9], #4
 8007ebe:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007ec2:	d8e4      	bhi.n	8007e8e <__multiply+0xaa>
 8007ec4:	9901      	ldr	r1, [sp, #4]
 8007ec6:	5072      	str	r2, [r6, r1]
 8007ec8:	9a03      	ldr	r2, [sp, #12]
 8007eca:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007ece:	3304      	adds	r3, #4
 8007ed0:	f1b9 0f00 	cmp.w	r9, #0
 8007ed4:	d01f      	beq.n	8007f16 <__multiply+0x132>
 8007ed6:	6834      	ldr	r4, [r6, #0]
 8007ed8:	f105 0114 	add.w	r1, r5, #20
 8007edc:	46b6      	mov	lr, r6
 8007ede:	f04f 0a00 	mov.w	sl, #0
 8007ee2:	880a      	ldrh	r2, [r1, #0]
 8007ee4:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007ee8:	fb09 b202 	mla	r2, r9, r2, fp
 8007eec:	4492      	add	sl, r2
 8007eee:	b2a4      	uxth	r4, r4
 8007ef0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007ef4:	f84e 4b04 	str.w	r4, [lr], #4
 8007ef8:	f851 4b04 	ldr.w	r4, [r1], #4
 8007efc:	f8be 2000 	ldrh.w	r2, [lr]
 8007f00:	0c24      	lsrs	r4, r4, #16
 8007f02:	fb09 2404 	mla	r4, r9, r4, r2
 8007f06:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007f0a:	458c      	cmp	ip, r1
 8007f0c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007f10:	d8e7      	bhi.n	8007ee2 <__multiply+0xfe>
 8007f12:	9a01      	ldr	r2, [sp, #4]
 8007f14:	50b4      	str	r4, [r6, r2]
 8007f16:	3604      	adds	r6, #4
 8007f18:	e7a3      	b.n	8007e62 <__multiply+0x7e>
 8007f1a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d1a5      	bne.n	8007e6e <__multiply+0x8a>
 8007f22:	3f01      	subs	r7, #1
 8007f24:	e7a1      	b.n	8007e6a <__multiply+0x86>
 8007f26:	bf00      	nop
 8007f28:	080098a1 	.word	0x080098a1
 8007f2c:	080098b2 	.word	0x080098b2

08007f30 <__pow5mult>:
 8007f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f34:	4615      	mov	r5, r2
 8007f36:	f012 0203 	ands.w	r2, r2, #3
 8007f3a:	4606      	mov	r6, r0
 8007f3c:	460f      	mov	r7, r1
 8007f3e:	d007      	beq.n	8007f50 <__pow5mult+0x20>
 8007f40:	4c25      	ldr	r4, [pc, #148]	; (8007fd8 <__pow5mult+0xa8>)
 8007f42:	3a01      	subs	r2, #1
 8007f44:	2300      	movs	r3, #0
 8007f46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007f4a:	f7ff fe9b 	bl	8007c84 <__multadd>
 8007f4e:	4607      	mov	r7, r0
 8007f50:	10ad      	asrs	r5, r5, #2
 8007f52:	d03d      	beq.n	8007fd0 <__pow5mult+0xa0>
 8007f54:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007f56:	b97c      	cbnz	r4, 8007f78 <__pow5mult+0x48>
 8007f58:	2010      	movs	r0, #16
 8007f5a:	f7ff fe1b 	bl	8007b94 <malloc>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	6270      	str	r0, [r6, #36]	; 0x24
 8007f62:	b928      	cbnz	r0, 8007f70 <__pow5mult+0x40>
 8007f64:	4b1d      	ldr	r3, [pc, #116]	; (8007fdc <__pow5mult+0xac>)
 8007f66:	481e      	ldr	r0, [pc, #120]	; (8007fe0 <__pow5mult+0xb0>)
 8007f68:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007f6c:	f7fe ff66 	bl	8006e3c <__assert_func>
 8007f70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007f74:	6004      	str	r4, [r0, #0]
 8007f76:	60c4      	str	r4, [r0, #12]
 8007f78:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007f7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007f80:	b94c      	cbnz	r4, 8007f96 <__pow5mult+0x66>
 8007f82:	f240 2171 	movw	r1, #625	; 0x271
 8007f86:	4630      	mov	r0, r6
 8007f88:	f7ff ff16 	bl	8007db8 <__i2b>
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007f92:	4604      	mov	r4, r0
 8007f94:	6003      	str	r3, [r0, #0]
 8007f96:	f04f 0900 	mov.w	r9, #0
 8007f9a:	07eb      	lsls	r3, r5, #31
 8007f9c:	d50a      	bpl.n	8007fb4 <__pow5mult+0x84>
 8007f9e:	4639      	mov	r1, r7
 8007fa0:	4622      	mov	r2, r4
 8007fa2:	4630      	mov	r0, r6
 8007fa4:	f7ff ff1e 	bl	8007de4 <__multiply>
 8007fa8:	4639      	mov	r1, r7
 8007faa:	4680      	mov	r8, r0
 8007fac:	4630      	mov	r0, r6
 8007fae:	f7ff fe47 	bl	8007c40 <_Bfree>
 8007fb2:	4647      	mov	r7, r8
 8007fb4:	106d      	asrs	r5, r5, #1
 8007fb6:	d00b      	beq.n	8007fd0 <__pow5mult+0xa0>
 8007fb8:	6820      	ldr	r0, [r4, #0]
 8007fba:	b938      	cbnz	r0, 8007fcc <__pow5mult+0x9c>
 8007fbc:	4622      	mov	r2, r4
 8007fbe:	4621      	mov	r1, r4
 8007fc0:	4630      	mov	r0, r6
 8007fc2:	f7ff ff0f 	bl	8007de4 <__multiply>
 8007fc6:	6020      	str	r0, [r4, #0]
 8007fc8:	f8c0 9000 	str.w	r9, [r0]
 8007fcc:	4604      	mov	r4, r0
 8007fce:	e7e4      	b.n	8007f9a <__pow5mult+0x6a>
 8007fd0:	4638      	mov	r0, r7
 8007fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fd6:	bf00      	nop
 8007fd8:	08009a08 	.word	0x08009a08
 8007fdc:	08009680 	.word	0x08009680
 8007fe0:	080098b2 	.word	0x080098b2

08007fe4 <__lshift>:
 8007fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fe8:	460c      	mov	r4, r1
 8007fea:	6849      	ldr	r1, [r1, #4]
 8007fec:	6923      	ldr	r3, [r4, #16]
 8007fee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007ff2:	68a3      	ldr	r3, [r4, #8]
 8007ff4:	4607      	mov	r7, r0
 8007ff6:	4691      	mov	r9, r2
 8007ff8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ffc:	f108 0601 	add.w	r6, r8, #1
 8008000:	42b3      	cmp	r3, r6
 8008002:	db0b      	blt.n	800801c <__lshift+0x38>
 8008004:	4638      	mov	r0, r7
 8008006:	f7ff fddb 	bl	8007bc0 <_Balloc>
 800800a:	4605      	mov	r5, r0
 800800c:	b948      	cbnz	r0, 8008022 <__lshift+0x3e>
 800800e:	4602      	mov	r2, r0
 8008010:	4b28      	ldr	r3, [pc, #160]	; (80080b4 <__lshift+0xd0>)
 8008012:	4829      	ldr	r0, [pc, #164]	; (80080b8 <__lshift+0xd4>)
 8008014:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008018:	f7fe ff10 	bl	8006e3c <__assert_func>
 800801c:	3101      	adds	r1, #1
 800801e:	005b      	lsls	r3, r3, #1
 8008020:	e7ee      	b.n	8008000 <__lshift+0x1c>
 8008022:	2300      	movs	r3, #0
 8008024:	f100 0114 	add.w	r1, r0, #20
 8008028:	f100 0210 	add.w	r2, r0, #16
 800802c:	4618      	mov	r0, r3
 800802e:	4553      	cmp	r3, sl
 8008030:	db33      	blt.n	800809a <__lshift+0xb6>
 8008032:	6920      	ldr	r0, [r4, #16]
 8008034:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008038:	f104 0314 	add.w	r3, r4, #20
 800803c:	f019 091f 	ands.w	r9, r9, #31
 8008040:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008044:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008048:	d02b      	beq.n	80080a2 <__lshift+0xbe>
 800804a:	f1c9 0e20 	rsb	lr, r9, #32
 800804e:	468a      	mov	sl, r1
 8008050:	2200      	movs	r2, #0
 8008052:	6818      	ldr	r0, [r3, #0]
 8008054:	fa00 f009 	lsl.w	r0, r0, r9
 8008058:	4302      	orrs	r2, r0
 800805a:	f84a 2b04 	str.w	r2, [sl], #4
 800805e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008062:	459c      	cmp	ip, r3
 8008064:	fa22 f20e 	lsr.w	r2, r2, lr
 8008068:	d8f3      	bhi.n	8008052 <__lshift+0x6e>
 800806a:	ebac 0304 	sub.w	r3, ip, r4
 800806e:	3b15      	subs	r3, #21
 8008070:	f023 0303 	bic.w	r3, r3, #3
 8008074:	3304      	adds	r3, #4
 8008076:	f104 0015 	add.w	r0, r4, #21
 800807a:	4584      	cmp	ip, r0
 800807c:	bf38      	it	cc
 800807e:	2304      	movcc	r3, #4
 8008080:	50ca      	str	r2, [r1, r3]
 8008082:	b10a      	cbz	r2, 8008088 <__lshift+0xa4>
 8008084:	f108 0602 	add.w	r6, r8, #2
 8008088:	3e01      	subs	r6, #1
 800808a:	4638      	mov	r0, r7
 800808c:	612e      	str	r6, [r5, #16]
 800808e:	4621      	mov	r1, r4
 8008090:	f7ff fdd6 	bl	8007c40 <_Bfree>
 8008094:	4628      	mov	r0, r5
 8008096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800809a:	f842 0f04 	str.w	r0, [r2, #4]!
 800809e:	3301      	adds	r3, #1
 80080a0:	e7c5      	b.n	800802e <__lshift+0x4a>
 80080a2:	3904      	subs	r1, #4
 80080a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80080a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80080ac:	459c      	cmp	ip, r3
 80080ae:	d8f9      	bhi.n	80080a4 <__lshift+0xc0>
 80080b0:	e7ea      	b.n	8008088 <__lshift+0xa4>
 80080b2:	bf00      	nop
 80080b4:	080098a1 	.word	0x080098a1
 80080b8:	080098b2 	.word	0x080098b2

080080bc <__mcmp>:
 80080bc:	b530      	push	{r4, r5, lr}
 80080be:	6902      	ldr	r2, [r0, #16]
 80080c0:	690c      	ldr	r4, [r1, #16]
 80080c2:	1b12      	subs	r2, r2, r4
 80080c4:	d10e      	bne.n	80080e4 <__mcmp+0x28>
 80080c6:	f100 0314 	add.w	r3, r0, #20
 80080ca:	3114      	adds	r1, #20
 80080cc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80080d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80080d4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80080d8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80080dc:	42a5      	cmp	r5, r4
 80080de:	d003      	beq.n	80080e8 <__mcmp+0x2c>
 80080e0:	d305      	bcc.n	80080ee <__mcmp+0x32>
 80080e2:	2201      	movs	r2, #1
 80080e4:	4610      	mov	r0, r2
 80080e6:	bd30      	pop	{r4, r5, pc}
 80080e8:	4283      	cmp	r3, r0
 80080ea:	d3f3      	bcc.n	80080d4 <__mcmp+0x18>
 80080ec:	e7fa      	b.n	80080e4 <__mcmp+0x28>
 80080ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80080f2:	e7f7      	b.n	80080e4 <__mcmp+0x28>

080080f4 <__mdiff>:
 80080f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f8:	460c      	mov	r4, r1
 80080fa:	4606      	mov	r6, r0
 80080fc:	4611      	mov	r1, r2
 80080fe:	4620      	mov	r0, r4
 8008100:	4617      	mov	r7, r2
 8008102:	f7ff ffdb 	bl	80080bc <__mcmp>
 8008106:	1e05      	subs	r5, r0, #0
 8008108:	d110      	bne.n	800812c <__mdiff+0x38>
 800810a:	4629      	mov	r1, r5
 800810c:	4630      	mov	r0, r6
 800810e:	f7ff fd57 	bl	8007bc0 <_Balloc>
 8008112:	b930      	cbnz	r0, 8008122 <__mdiff+0x2e>
 8008114:	4b39      	ldr	r3, [pc, #228]	; (80081fc <__mdiff+0x108>)
 8008116:	4602      	mov	r2, r0
 8008118:	f240 2132 	movw	r1, #562	; 0x232
 800811c:	4838      	ldr	r0, [pc, #224]	; (8008200 <__mdiff+0x10c>)
 800811e:	f7fe fe8d 	bl	8006e3c <__assert_func>
 8008122:	2301      	movs	r3, #1
 8008124:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008128:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800812c:	bfa4      	itt	ge
 800812e:	463b      	movge	r3, r7
 8008130:	4627      	movge	r7, r4
 8008132:	4630      	mov	r0, r6
 8008134:	6879      	ldr	r1, [r7, #4]
 8008136:	bfa6      	itte	ge
 8008138:	461c      	movge	r4, r3
 800813a:	2500      	movge	r5, #0
 800813c:	2501      	movlt	r5, #1
 800813e:	f7ff fd3f 	bl	8007bc0 <_Balloc>
 8008142:	b920      	cbnz	r0, 800814e <__mdiff+0x5a>
 8008144:	4b2d      	ldr	r3, [pc, #180]	; (80081fc <__mdiff+0x108>)
 8008146:	4602      	mov	r2, r0
 8008148:	f44f 7110 	mov.w	r1, #576	; 0x240
 800814c:	e7e6      	b.n	800811c <__mdiff+0x28>
 800814e:	693e      	ldr	r6, [r7, #16]
 8008150:	60c5      	str	r5, [r0, #12]
 8008152:	6925      	ldr	r5, [r4, #16]
 8008154:	f107 0114 	add.w	r1, r7, #20
 8008158:	f104 0914 	add.w	r9, r4, #20
 800815c:	f100 0e14 	add.w	lr, r0, #20
 8008160:	f107 0210 	add.w	r2, r7, #16
 8008164:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008168:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800816c:	46f2      	mov	sl, lr
 800816e:	2700      	movs	r7, #0
 8008170:	f859 3b04 	ldr.w	r3, [r9], #4
 8008174:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008178:	fa1f f883 	uxth.w	r8, r3
 800817c:	fa17 f78b 	uxtah	r7, r7, fp
 8008180:	0c1b      	lsrs	r3, r3, #16
 8008182:	eba7 0808 	sub.w	r8, r7, r8
 8008186:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800818a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800818e:	fa1f f888 	uxth.w	r8, r8
 8008192:	141f      	asrs	r7, r3, #16
 8008194:	454d      	cmp	r5, r9
 8008196:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800819a:	f84a 3b04 	str.w	r3, [sl], #4
 800819e:	d8e7      	bhi.n	8008170 <__mdiff+0x7c>
 80081a0:	1b2b      	subs	r3, r5, r4
 80081a2:	3b15      	subs	r3, #21
 80081a4:	f023 0303 	bic.w	r3, r3, #3
 80081a8:	3304      	adds	r3, #4
 80081aa:	3415      	adds	r4, #21
 80081ac:	42a5      	cmp	r5, r4
 80081ae:	bf38      	it	cc
 80081b0:	2304      	movcc	r3, #4
 80081b2:	4419      	add	r1, r3
 80081b4:	4473      	add	r3, lr
 80081b6:	469e      	mov	lr, r3
 80081b8:	460d      	mov	r5, r1
 80081ba:	4565      	cmp	r5, ip
 80081bc:	d30e      	bcc.n	80081dc <__mdiff+0xe8>
 80081be:	f10c 0203 	add.w	r2, ip, #3
 80081c2:	1a52      	subs	r2, r2, r1
 80081c4:	f022 0203 	bic.w	r2, r2, #3
 80081c8:	3903      	subs	r1, #3
 80081ca:	458c      	cmp	ip, r1
 80081cc:	bf38      	it	cc
 80081ce:	2200      	movcc	r2, #0
 80081d0:	441a      	add	r2, r3
 80081d2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80081d6:	b17b      	cbz	r3, 80081f8 <__mdiff+0x104>
 80081d8:	6106      	str	r6, [r0, #16]
 80081da:	e7a5      	b.n	8008128 <__mdiff+0x34>
 80081dc:	f855 8b04 	ldr.w	r8, [r5], #4
 80081e0:	fa17 f488 	uxtah	r4, r7, r8
 80081e4:	1422      	asrs	r2, r4, #16
 80081e6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80081ea:	b2a4      	uxth	r4, r4
 80081ec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80081f0:	f84e 4b04 	str.w	r4, [lr], #4
 80081f4:	1417      	asrs	r7, r2, #16
 80081f6:	e7e0      	b.n	80081ba <__mdiff+0xc6>
 80081f8:	3e01      	subs	r6, #1
 80081fa:	e7ea      	b.n	80081d2 <__mdiff+0xde>
 80081fc:	080098a1 	.word	0x080098a1
 8008200:	080098b2 	.word	0x080098b2

08008204 <__d2b>:
 8008204:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008208:	4689      	mov	r9, r1
 800820a:	2101      	movs	r1, #1
 800820c:	ec57 6b10 	vmov	r6, r7, d0
 8008210:	4690      	mov	r8, r2
 8008212:	f7ff fcd5 	bl	8007bc0 <_Balloc>
 8008216:	4604      	mov	r4, r0
 8008218:	b930      	cbnz	r0, 8008228 <__d2b+0x24>
 800821a:	4602      	mov	r2, r0
 800821c:	4b25      	ldr	r3, [pc, #148]	; (80082b4 <__d2b+0xb0>)
 800821e:	4826      	ldr	r0, [pc, #152]	; (80082b8 <__d2b+0xb4>)
 8008220:	f240 310a 	movw	r1, #778	; 0x30a
 8008224:	f7fe fe0a 	bl	8006e3c <__assert_func>
 8008228:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800822c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008230:	bb35      	cbnz	r5, 8008280 <__d2b+0x7c>
 8008232:	2e00      	cmp	r6, #0
 8008234:	9301      	str	r3, [sp, #4]
 8008236:	d028      	beq.n	800828a <__d2b+0x86>
 8008238:	4668      	mov	r0, sp
 800823a:	9600      	str	r6, [sp, #0]
 800823c:	f7ff fd8c 	bl	8007d58 <__lo0bits>
 8008240:	9900      	ldr	r1, [sp, #0]
 8008242:	b300      	cbz	r0, 8008286 <__d2b+0x82>
 8008244:	9a01      	ldr	r2, [sp, #4]
 8008246:	f1c0 0320 	rsb	r3, r0, #32
 800824a:	fa02 f303 	lsl.w	r3, r2, r3
 800824e:	430b      	orrs	r3, r1
 8008250:	40c2      	lsrs	r2, r0
 8008252:	6163      	str	r3, [r4, #20]
 8008254:	9201      	str	r2, [sp, #4]
 8008256:	9b01      	ldr	r3, [sp, #4]
 8008258:	61a3      	str	r3, [r4, #24]
 800825a:	2b00      	cmp	r3, #0
 800825c:	bf14      	ite	ne
 800825e:	2202      	movne	r2, #2
 8008260:	2201      	moveq	r2, #1
 8008262:	6122      	str	r2, [r4, #16]
 8008264:	b1d5      	cbz	r5, 800829c <__d2b+0x98>
 8008266:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800826a:	4405      	add	r5, r0
 800826c:	f8c9 5000 	str.w	r5, [r9]
 8008270:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008274:	f8c8 0000 	str.w	r0, [r8]
 8008278:	4620      	mov	r0, r4
 800827a:	b003      	add	sp, #12
 800827c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008280:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008284:	e7d5      	b.n	8008232 <__d2b+0x2e>
 8008286:	6161      	str	r1, [r4, #20]
 8008288:	e7e5      	b.n	8008256 <__d2b+0x52>
 800828a:	a801      	add	r0, sp, #4
 800828c:	f7ff fd64 	bl	8007d58 <__lo0bits>
 8008290:	9b01      	ldr	r3, [sp, #4]
 8008292:	6163      	str	r3, [r4, #20]
 8008294:	2201      	movs	r2, #1
 8008296:	6122      	str	r2, [r4, #16]
 8008298:	3020      	adds	r0, #32
 800829a:	e7e3      	b.n	8008264 <__d2b+0x60>
 800829c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80082a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80082a4:	f8c9 0000 	str.w	r0, [r9]
 80082a8:	6918      	ldr	r0, [r3, #16]
 80082aa:	f7ff fd35 	bl	8007d18 <__hi0bits>
 80082ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80082b2:	e7df      	b.n	8008274 <__d2b+0x70>
 80082b4:	080098a1 	.word	0x080098a1
 80082b8:	080098b2 	.word	0x080098b2

080082bc <_calloc_r>:
 80082bc:	b513      	push	{r0, r1, r4, lr}
 80082be:	434a      	muls	r2, r1
 80082c0:	4611      	mov	r1, r2
 80082c2:	9201      	str	r2, [sp, #4]
 80082c4:	f000 f85a 	bl	800837c <_malloc_r>
 80082c8:	4604      	mov	r4, r0
 80082ca:	b118      	cbz	r0, 80082d4 <_calloc_r+0x18>
 80082cc:	9a01      	ldr	r2, [sp, #4]
 80082ce:	2100      	movs	r1, #0
 80082d0:	f7fe f838 	bl	8006344 <memset>
 80082d4:	4620      	mov	r0, r4
 80082d6:	b002      	add	sp, #8
 80082d8:	bd10      	pop	{r4, pc}
	...

080082dc <_free_r>:
 80082dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80082de:	2900      	cmp	r1, #0
 80082e0:	d048      	beq.n	8008374 <_free_r+0x98>
 80082e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082e6:	9001      	str	r0, [sp, #4]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	f1a1 0404 	sub.w	r4, r1, #4
 80082ee:	bfb8      	it	lt
 80082f0:	18e4      	addlt	r4, r4, r3
 80082f2:	f000 fe75 	bl	8008fe0 <__malloc_lock>
 80082f6:	4a20      	ldr	r2, [pc, #128]	; (8008378 <_free_r+0x9c>)
 80082f8:	9801      	ldr	r0, [sp, #4]
 80082fa:	6813      	ldr	r3, [r2, #0]
 80082fc:	4615      	mov	r5, r2
 80082fe:	b933      	cbnz	r3, 800830e <_free_r+0x32>
 8008300:	6063      	str	r3, [r4, #4]
 8008302:	6014      	str	r4, [r2, #0]
 8008304:	b003      	add	sp, #12
 8008306:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800830a:	f000 be6f 	b.w	8008fec <__malloc_unlock>
 800830e:	42a3      	cmp	r3, r4
 8008310:	d90b      	bls.n	800832a <_free_r+0x4e>
 8008312:	6821      	ldr	r1, [r4, #0]
 8008314:	1862      	adds	r2, r4, r1
 8008316:	4293      	cmp	r3, r2
 8008318:	bf04      	itt	eq
 800831a:	681a      	ldreq	r2, [r3, #0]
 800831c:	685b      	ldreq	r3, [r3, #4]
 800831e:	6063      	str	r3, [r4, #4]
 8008320:	bf04      	itt	eq
 8008322:	1852      	addeq	r2, r2, r1
 8008324:	6022      	streq	r2, [r4, #0]
 8008326:	602c      	str	r4, [r5, #0]
 8008328:	e7ec      	b.n	8008304 <_free_r+0x28>
 800832a:	461a      	mov	r2, r3
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	b10b      	cbz	r3, 8008334 <_free_r+0x58>
 8008330:	42a3      	cmp	r3, r4
 8008332:	d9fa      	bls.n	800832a <_free_r+0x4e>
 8008334:	6811      	ldr	r1, [r2, #0]
 8008336:	1855      	adds	r5, r2, r1
 8008338:	42a5      	cmp	r5, r4
 800833a:	d10b      	bne.n	8008354 <_free_r+0x78>
 800833c:	6824      	ldr	r4, [r4, #0]
 800833e:	4421      	add	r1, r4
 8008340:	1854      	adds	r4, r2, r1
 8008342:	42a3      	cmp	r3, r4
 8008344:	6011      	str	r1, [r2, #0]
 8008346:	d1dd      	bne.n	8008304 <_free_r+0x28>
 8008348:	681c      	ldr	r4, [r3, #0]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	6053      	str	r3, [r2, #4]
 800834e:	4421      	add	r1, r4
 8008350:	6011      	str	r1, [r2, #0]
 8008352:	e7d7      	b.n	8008304 <_free_r+0x28>
 8008354:	d902      	bls.n	800835c <_free_r+0x80>
 8008356:	230c      	movs	r3, #12
 8008358:	6003      	str	r3, [r0, #0]
 800835a:	e7d3      	b.n	8008304 <_free_r+0x28>
 800835c:	6825      	ldr	r5, [r4, #0]
 800835e:	1961      	adds	r1, r4, r5
 8008360:	428b      	cmp	r3, r1
 8008362:	bf04      	itt	eq
 8008364:	6819      	ldreq	r1, [r3, #0]
 8008366:	685b      	ldreq	r3, [r3, #4]
 8008368:	6063      	str	r3, [r4, #4]
 800836a:	bf04      	itt	eq
 800836c:	1949      	addeq	r1, r1, r5
 800836e:	6021      	streq	r1, [r4, #0]
 8008370:	6054      	str	r4, [r2, #4]
 8008372:	e7c7      	b.n	8008304 <_free_r+0x28>
 8008374:	b003      	add	sp, #12
 8008376:	bd30      	pop	{r4, r5, pc}
 8008378:	2000065c 	.word	0x2000065c

0800837c <_malloc_r>:
 800837c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800837e:	1ccd      	adds	r5, r1, #3
 8008380:	f025 0503 	bic.w	r5, r5, #3
 8008384:	3508      	adds	r5, #8
 8008386:	2d0c      	cmp	r5, #12
 8008388:	bf38      	it	cc
 800838a:	250c      	movcc	r5, #12
 800838c:	2d00      	cmp	r5, #0
 800838e:	4606      	mov	r6, r0
 8008390:	db01      	blt.n	8008396 <_malloc_r+0x1a>
 8008392:	42a9      	cmp	r1, r5
 8008394:	d903      	bls.n	800839e <_malloc_r+0x22>
 8008396:	230c      	movs	r3, #12
 8008398:	6033      	str	r3, [r6, #0]
 800839a:	2000      	movs	r0, #0
 800839c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800839e:	f000 fe1f 	bl	8008fe0 <__malloc_lock>
 80083a2:	4921      	ldr	r1, [pc, #132]	; (8008428 <_malloc_r+0xac>)
 80083a4:	680a      	ldr	r2, [r1, #0]
 80083a6:	4614      	mov	r4, r2
 80083a8:	b99c      	cbnz	r4, 80083d2 <_malloc_r+0x56>
 80083aa:	4f20      	ldr	r7, [pc, #128]	; (800842c <_malloc_r+0xb0>)
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	b923      	cbnz	r3, 80083ba <_malloc_r+0x3e>
 80083b0:	4621      	mov	r1, r4
 80083b2:	4630      	mov	r0, r6
 80083b4:	f000 faf2 	bl	800899c <_sbrk_r>
 80083b8:	6038      	str	r0, [r7, #0]
 80083ba:	4629      	mov	r1, r5
 80083bc:	4630      	mov	r0, r6
 80083be:	f000 faed 	bl	800899c <_sbrk_r>
 80083c2:	1c43      	adds	r3, r0, #1
 80083c4:	d123      	bne.n	800840e <_malloc_r+0x92>
 80083c6:	230c      	movs	r3, #12
 80083c8:	6033      	str	r3, [r6, #0]
 80083ca:	4630      	mov	r0, r6
 80083cc:	f000 fe0e 	bl	8008fec <__malloc_unlock>
 80083d0:	e7e3      	b.n	800839a <_malloc_r+0x1e>
 80083d2:	6823      	ldr	r3, [r4, #0]
 80083d4:	1b5b      	subs	r3, r3, r5
 80083d6:	d417      	bmi.n	8008408 <_malloc_r+0x8c>
 80083d8:	2b0b      	cmp	r3, #11
 80083da:	d903      	bls.n	80083e4 <_malloc_r+0x68>
 80083dc:	6023      	str	r3, [r4, #0]
 80083de:	441c      	add	r4, r3
 80083e0:	6025      	str	r5, [r4, #0]
 80083e2:	e004      	b.n	80083ee <_malloc_r+0x72>
 80083e4:	6863      	ldr	r3, [r4, #4]
 80083e6:	42a2      	cmp	r2, r4
 80083e8:	bf0c      	ite	eq
 80083ea:	600b      	streq	r3, [r1, #0]
 80083ec:	6053      	strne	r3, [r2, #4]
 80083ee:	4630      	mov	r0, r6
 80083f0:	f000 fdfc 	bl	8008fec <__malloc_unlock>
 80083f4:	f104 000b 	add.w	r0, r4, #11
 80083f8:	1d23      	adds	r3, r4, #4
 80083fa:	f020 0007 	bic.w	r0, r0, #7
 80083fe:	1ac2      	subs	r2, r0, r3
 8008400:	d0cc      	beq.n	800839c <_malloc_r+0x20>
 8008402:	1a1b      	subs	r3, r3, r0
 8008404:	50a3      	str	r3, [r4, r2]
 8008406:	e7c9      	b.n	800839c <_malloc_r+0x20>
 8008408:	4622      	mov	r2, r4
 800840a:	6864      	ldr	r4, [r4, #4]
 800840c:	e7cc      	b.n	80083a8 <_malloc_r+0x2c>
 800840e:	1cc4      	adds	r4, r0, #3
 8008410:	f024 0403 	bic.w	r4, r4, #3
 8008414:	42a0      	cmp	r0, r4
 8008416:	d0e3      	beq.n	80083e0 <_malloc_r+0x64>
 8008418:	1a21      	subs	r1, r4, r0
 800841a:	4630      	mov	r0, r6
 800841c:	f000 fabe 	bl	800899c <_sbrk_r>
 8008420:	3001      	adds	r0, #1
 8008422:	d1dd      	bne.n	80083e0 <_malloc_r+0x64>
 8008424:	e7cf      	b.n	80083c6 <_malloc_r+0x4a>
 8008426:	bf00      	nop
 8008428:	2000065c 	.word	0x2000065c
 800842c:	20000660 	.word	0x20000660

08008430 <__ssputs_r>:
 8008430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008434:	688e      	ldr	r6, [r1, #8]
 8008436:	429e      	cmp	r6, r3
 8008438:	4682      	mov	sl, r0
 800843a:	460c      	mov	r4, r1
 800843c:	4690      	mov	r8, r2
 800843e:	461f      	mov	r7, r3
 8008440:	d838      	bhi.n	80084b4 <__ssputs_r+0x84>
 8008442:	898a      	ldrh	r2, [r1, #12]
 8008444:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008448:	d032      	beq.n	80084b0 <__ssputs_r+0x80>
 800844a:	6825      	ldr	r5, [r4, #0]
 800844c:	6909      	ldr	r1, [r1, #16]
 800844e:	eba5 0901 	sub.w	r9, r5, r1
 8008452:	6965      	ldr	r5, [r4, #20]
 8008454:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008458:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800845c:	3301      	adds	r3, #1
 800845e:	444b      	add	r3, r9
 8008460:	106d      	asrs	r5, r5, #1
 8008462:	429d      	cmp	r5, r3
 8008464:	bf38      	it	cc
 8008466:	461d      	movcc	r5, r3
 8008468:	0553      	lsls	r3, r2, #21
 800846a:	d531      	bpl.n	80084d0 <__ssputs_r+0xa0>
 800846c:	4629      	mov	r1, r5
 800846e:	f7ff ff85 	bl	800837c <_malloc_r>
 8008472:	4606      	mov	r6, r0
 8008474:	b950      	cbnz	r0, 800848c <__ssputs_r+0x5c>
 8008476:	230c      	movs	r3, #12
 8008478:	f8ca 3000 	str.w	r3, [sl]
 800847c:	89a3      	ldrh	r3, [r4, #12]
 800847e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008482:	81a3      	strh	r3, [r4, #12]
 8008484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800848c:	6921      	ldr	r1, [r4, #16]
 800848e:	464a      	mov	r2, r9
 8008490:	f7ff fb88 	bl	8007ba4 <memcpy>
 8008494:	89a3      	ldrh	r3, [r4, #12]
 8008496:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800849a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800849e:	81a3      	strh	r3, [r4, #12]
 80084a0:	6126      	str	r6, [r4, #16]
 80084a2:	6165      	str	r5, [r4, #20]
 80084a4:	444e      	add	r6, r9
 80084a6:	eba5 0509 	sub.w	r5, r5, r9
 80084aa:	6026      	str	r6, [r4, #0]
 80084ac:	60a5      	str	r5, [r4, #8]
 80084ae:	463e      	mov	r6, r7
 80084b0:	42be      	cmp	r6, r7
 80084b2:	d900      	bls.n	80084b6 <__ssputs_r+0x86>
 80084b4:	463e      	mov	r6, r7
 80084b6:	4632      	mov	r2, r6
 80084b8:	6820      	ldr	r0, [r4, #0]
 80084ba:	4641      	mov	r1, r8
 80084bc:	f000 fd76 	bl	8008fac <memmove>
 80084c0:	68a3      	ldr	r3, [r4, #8]
 80084c2:	6822      	ldr	r2, [r4, #0]
 80084c4:	1b9b      	subs	r3, r3, r6
 80084c6:	4432      	add	r2, r6
 80084c8:	60a3      	str	r3, [r4, #8]
 80084ca:	6022      	str	r2, [r4, #0]
 80084cc:	2000      	movs	r0, #0
 80084ce:	e7db      	b.n	8008488 <__ssputs_r+0x58>
 80084d0:	462a      	mov	r2, r5
 80084d2:	f000 fd91 	bl	8008ff8 <_realloc_r>
 80084d6:	4606      	mov	r6, r0
 80084d8:	2800      	cmp	r0, #0
 80084da:	d1e1      	bne.n	80084a0 <__ssputs_r+0x70>
 80084dc:	6921      	ldr	r1, [r4, #16]
 80084de:	4650      	mov	r0, sl
 80084e0:	f7ff fefc 	bl	80082dc <_free_r>
 80084e4:	e7c7      	b.n	8008476 <__ssputs_r+0x46>
	...

080084e8 <_svfiprintf_r>:
 80084e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ec:	4698      	mov	r8, r3
 80084ee:	898b      	ldrh	r3, [r1, #12]
 80084f0:	061b      	lsls	r3, r3, #24
 80084f2:	b09d      	sub	sp, #116	; 0x74
 80084f4:	4607      	mov	r7, r0
 80084f6:	460d      	mov	r5, r1
 80084f8:	4614      	mov	r4, r2
 80084fa:	d50e      	bpl.n	800851a <_svfiprintf_r+0x32>
 80084fc:	690b      	ldr	r3, [r1, #16]
 80084fe:	b963      	cbnz	r3, 800851a <_svfiprintf_r+0x32>
 8008500:	2140      	movs	r1, #64	; 0x40
 8008502:	f7ff ff3b 	bl	800837c <_malloc_r>
 8008506:	6028      	str	r0, [r5, #0]
 8008508:	6128      	str	r0, [r5, #16]
 800850a:	b920      	cbnz	r0, 8008516 <_svfiprintf_r+0x2e>
 800850c:	230c      	movs	r3, #12
 800850e:	603b      	str	r3, [r7, #0]
 8008510:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008514:	e0d1      	b.n	80086ba <_svfiprintf_r+0x1d2>
 8008516:	2340      	movs	r3, #64	; 0x40
 8008518:	616b      	str	r3, [r5, #20]
 800851a:	2300      	movs	r3, #0
 800851c:	9309      	str	r3, [sp, #36]	; 0x24
 800851e:	2320      	movs	r3, #32
 8008520:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008524:	f8cd 800c 	str.w	r8, [sp, #12]
 8008528:	2330      	movs	r3, #48	; 0x30
 800852a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80086d4 <_svfiprintf_r+0x1ec>
 800852e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008532:	f04f 0901 	mov.w	r9, #1
 8008536:	4623      	mov	r3, r4
 8008538:	469a      	mov	sl, r3
 800853a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800853e:	b10a      	cbz	r2, 8008544 <_svfiprintf_r+0x5c>
 8008540:	2a25      	cmp	r2, #37	; 0x25
 8008542:	d1f9      	bne.n	8008538 <_svfiprintf_r+0x50>
 8008544:	ebba 0b04 	subs.w	fp, sl, r4
 8008548:	d00b      	beq.n	8008562 <_svfiprintf_r+0x7a>
 800854a:	465b      	mov	r3, fp
 800854c:	4622      	mov	r2, r4
 800854e:	4629      	mov	r1, r5
 8008550:	4638      	mov	r0, r7
 8008552:	f7ff ff6d 	bl	8008430 <__ssputs_r>
 8008556:	3001      	adds	r0, #1
 8008558:	f000 80aa 	beq.w	80086b0 <_svfiprintf_r+0x1c8>
 800855c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800855e:	445a      	add	r2, fp
 8008560:	9209      	str	r2, [sp, #36]	; 0x24
 8008562:	f89a 3000 	ldrb.w	r3, [sl]
 8008566:	2b00      	cmp	r3, #0
 8008568:	f000 80a2 	beq.w	80086b0 <_svfiprintf_r+0x1c8>
 800856c:	2300      	movs	r3, #0
 800856e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008572:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008576:	f10a 0a01 	add.w	sl, sl, #1
 800857a:	9304      	str	r3, [sp, #16]
 800857c:	9307      	str	r3, [sp, #28]
 800857e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008582:	931a      	str	r3, [sp, #104]	; 0x68
 8008584:	4654      	mov	r4, sl
 8008586:	2205      	movs	r2, #5
 8008588:	f814 1b01 	ldrb.w	r1, [r4], #1
 800858c:	4851      	ldr	r0, [pc, #324]	; (80086d4 <_svfiprintf_r+0x1ec>)
 800858e:	f7f7 fe27 	bl	80001e0 <memchr>
 8008592:	9a04      	ldr	r2, [sp, #16]
 8008594:	b9d8      	cbnz	r0, 80085ce <_svfiprintf_r+0xe6>
 8008596:	06d0      	lsls	r0, r2, #27
 8008598:	bf44      	itt	mi
 800859a:	2320      	movmi	r3, #32
 800859c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085a0:	0711      	lsls	r1, r2, #28
 80085a2:	bf44      	itt	mi
 80085a4:	232b      	movmi	r3, #43	; 0x2b
 80085a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085aa:	f89a 3000 	ldrb.w	r3, [sl]
 80085ae:	2b2a      	cmp	r3, #42	; 0x2a
 80085b0:	d015      	beq.n	80085de <_svfiprintf_r+0xf6>
 80085b2:	9a07      	ldr	r2, [sp, #28]
 80085b4:	4654      	mov	r4, sl
 80085b6:	2000      	movs	r0, #0
 80085b8:	f04f 0c0a 	mov.w	ip, #10
 80085bc:	4621      	mov	r1, r4
 80085be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085c2:	3b30      	subs	r3, #48	; 0x30
 80085c4:	2b09      	cmp	r3, #9
 80085c6:	d94e      	bls.n	8008666 <_svfiprintf_r+0x17e>
 80085c8:	b1b0      	cbz	r0, 80085f8 <_svfiprintf_r+0x110>
 80085ca:	9207      	str	r2, [sp, #28]
 80085cc:	e014      	b.n	80085f8 <_svfiprintf_r+0x110>
 80085ce:	eba0 0308 	sub.w	r3, r0, r8
 80085d2:	fa09 f303 	lsl.w	r3, r9, r3
 80085d6:	4313      	orrs	r3, r2
 80085d8:	9304      	str	r3, [sp, #16]
 80085da:	46a2      	mov	sl, r4
 80085dc:	e7d2      	b.n	8008584 <_svfiprintf_r+0x9c>
 80085de:	9b03      	ldr	r3, [sp, #12]
 80085e0:	1d19      	adds	r1, r3, #4
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	9103      	str	r1, [sp, #12]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	bfbb      	ittet	lt
 80085ea:	425b      	neglt	r3, r3
 80085ec:	f042 0202 	orrlt.w	r2, r2, #2
 80085f0:	9307      	strge	r3, [sp, #28]
 80085f2:	9307      	strlt	r3, [sp, #28]
 80085f4:	bfb8      	it	lt
 80085f6:	9204      	strlt	r2, [sp, #16]
 80085f8:	7823      	ldrb	r3, [r4, #0]
 80085fa:	2b2e      	cmp	r3, #46	; 0x2e
 80085fc:	d10c      	bne.n	8008618 <_svfiprintf_r+0x130>
 80085fe:	7863      	ldrb	r3, [r4, #1]
 8008600:	2b2a      	cmp	r3, #42	; 0x2a
 8008602:	d135      	bne.n	8008670 <_svfiprintf_r+0x188>
 8008604:	9b03      	ldr	r3, [sp, #12]
 8008606:	1d1a      	adds	r2, r3, #4
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	9203      	str	r2, [sp, #12]
 800860c:	2b00      	cmp	r3, #0
 800860e:	bfb8      	it	lt
 8008610:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008614:	3402      	adds	r4, #2
 8008616:	9305      	str	r3, [sp, #20]
 8008618:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80086e4 <_svfiprintf_r+0x1fc>
 800861c:	7821      	ldrb	r1, [r4, #0]
 800861e:	2203      	movs	r2, #3
 8008620:	4650      	mov	r0, sl
 8008622:	f7f7 fddd 	bl	80001e0 <memchr>
 8008626:	b140      	cbz	r0, 800863a <_svfiprintf_r+0x152>
 8008628:	2340      	movs	r3, #64	; 0x40
 800862a:	eba0 000a 	sub.w	r0, r0, sl
 800862e:	fa03 f000 	lsl.w	r0, r3, r0
 8008632:	9b04      	ldr	r3, [sp, #16]
 8008634:	4303      	orrs	r3, r0
 8008636:	3401      	adds	r4, #1
 8008638:	9304      	str	r3, [sp, #16]
 800863a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800863e:	4826      	ldr	r0, [pc, #152]	; (80086d8 <_svfiprintf_r+0x1f0>)
 8008640:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008644:	2206      	movs	r2, #6
 8008646:	f7f7 fdcb 	bl	80001e0 <memchr>
 800864a:	2800      	cmp	r0, #0
 800864c:	d038      	beq.n	80086c0 <_svfiprintf_r+0x1d8>
 800864e:	4b23      	ldr	r3, [pc, #140]	; (80086dc <_svfiprintf_r+0x1f4>)
 8008650:	bb1b      	cbnz	r3, 800869a <_svfiprintf_r+0x1b2>
 8008652:	9b03      	ldr	r3, [sp, #12]
 8008654:	3307      	adds	r3, #7
 8008656:	f023 0307 	bic.w	r3, r3, #7
 800865a:	3308      	adds	r3, #8
 800865c:	9303      	str	r3, [sp, #12]
 800865e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008660:	4433      	add	r3, r6
 8008662:	9309      	str	r3, [sp, #36]	; 0x24
 8008664:	e767      	b.n	8008536 <_svfiprintf_r+0x4e>
 8008666:	fb0c 3202 	mla	r2, ip, r2, r3
 800866a:	460c      	mov	r4, r1
 800866c:	2001      	movs	r0, #1
 800866e:	e7a5      	b.n	80085bc <_svfiprintf_r+0xd4>
 8008670:	2300      	movs	r3, #0
 8008672:	3401      	adds	r4, #1
 8008674:	9305      	str	r3, [sp, #20]
 8008676:	4619      	mov	r1, r3
 8008678:	f04f 0c0a 	mov.w	ip, #10
 800867c:	4620      	mov	r0, r4
 800867e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008682:	3a30      	subs	r2, #48	; 0x30
 8008684:	2a09      	cmp	r2, #9
 8008686:	d903      	bls.n	8008690 <_svfiprintf_r+0x1a8>
 8008688:	2b00      	cmp	r3, #0
 800868a:	d0c5      	beq.n	8008618 <_svfiprintf_r+0x130>
 800868c:	9105      	str	r1, [sp, #20]
 800868e:	e7c3      	b.n	8008618 <_svfiprintf_r+0x130>
 8008690:	fb0c 2101 	mla	r1, ip, r1, r2
 8008694:	4604      	mov	r4, r0
 8008696:	2301      	movs	r3, #1
 8008698:	e7f0      	b.n	800867c <_svfiprintf_r+0x194>
 800869a:	ab03      	add	r3, sp, #12
 800869c:	9300      	str	r3, [sp, #0]
 800869e:	462a      	mov	r2, r5
 80086a0:	4b0f      	ldr	r3, [pc, #60]	; (80086e0 <_svfiprintf_r+0x1f8>)
 80086a2:	a904      	add	r1, sp, #16
 80086a4:	4638      	mov	r0, r7
 80086a6:	f7fd fef5 	bl	8006494 <_printf_float>
 80086aa:	1c42      	adds	r2, r0, #1
 80086ac:	4606      	mov	r6, r0
 80086ae:	d1d6      	bne.n	800865e <_svfiprintf_r+0x176>
 80086b0:	89ab      	ldrh	r3, [r5, #12]
 80086b2:	065b      	lsls	r3, r3, #25
 80086b4:	f53f af2c 	bmi.w	8008510 <_svfiprintf_r+0x28>
 80086b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086ba:	b01d      	add	sp, #116	; 0x74
 80086bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086c0:	ab03      	add	r3, sp, #12
 80086c2:	9300      	str	r3, [sp, #0]
 80086c4:	462a      	mov	r2, r5
 80086c6:	4b06      	ldr	r3, [pc, #24]	; (80086e0 <_svfiprintf_r+0x1f8>)
 80086c8:	a904      	add	r1, sp, #16
 80086ca:	4638      	mov	r0, r7
 80086cc:	f7fe f986 	bl	80069dc <_printf_i>
 80086d0:	e7eb      	b.n	80086aa <_svfiprintf_r+0x1c2>
 80086d2:	bf00      	nop
 80086d4:	08009a14 	.word	0x08009a14
 80086d8:	08009a1e 	.word	0x08009a1e
 80086dc:	08006495 	.word	0x08006495
 80086e0:	08008431 	.word	0x08008431
 80086e4:	08009a1a 	.word	0x08009a1a

080086e8 <__sfputc_r>:
 80086e8:	6893      	ldr	r3, [r2, #8]
 80086ea:	3b01      	subs	r3, #1
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	b410      	push	{r4}
 80086f0:	6093      	str	r3, [r2, #8]
 80086f2:	da08      	bge.n	8008706 <__sfputc_r+0x1e>
 80086f4:	6994      	ldr	r4, [r2, #24]
 80086f6:	42a3      	cmp	r3, r4
 80086f8:	db01      	blt.n	80086fe <__sfputc_r+0x16>
 80086fa:	290a      	cmp	r1, #10
 80086fc:	d103      	bne.n	8008706 <__sfputc_r+0x1e>
 80086fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008702:	f000 b95b 	b.w	80089bc <__swbuf_r>
 8008706:	6813      	ldr	r3, [r2, #0]
 8008708:	1c58      	adds	r0, r3, #1
 800870a:	6010      	str	r0, [r2, #0]
 800870c:	7019      	strb	r1, [r3, #0]
 800870e:	4608      	mov	r0, r1
 8008710:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008714:	4770      	bx	lr

08008716 <__sfputs_r>:
 8008716:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008718:	4606      	mov	r6, r0
 800871a:	460f      	mov	r7, r1
 800871c:	4614      	mov	r4, r2
 800871e:	18d5      	adds	r5, r2, r3
 8008720:	42ac      	cmp	r4, r5
 8008722:	d101      	bne.n	8008728 <__sfputs_r+0x12>
 8008724:	2000      	movs	r0, #0
 8008726:	e007      	b.n	8008738 <__sfputs_r+0x22>
 8008728:	f814 1b01 	ldrb.w	r1, [r4], #1
 800872c:	463a      	mov	r2, r7
 800872e:	4630      	mov	r0, r6
 8008730:	f7ff ffda 	bl	80086e8 <__sfputc_r>
 8008734:	1c43      	adds	r3, r0, #1
 8008736:	d1f3      	bne.n	8008720 <__sfputs_r+0xa>
 8008738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800873c <_vfiprintf_r>:
 800873c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008740:	460d      	mov	r5, r1
 8008742:	b09d      	sub	sp, #116	; 0x74
 8008744:	4614      	mov	r4, r2
 8008746:	4698      	mov	r8, r3
 8008748:	4606      	mov	r6, r0
 800874a:	b118      	cbz	r0, 8008754 <_vfiprintf_r+0x18>
 800874c:	6983      	ldr	r3, [r0, #24]
 800874e:	b90b      	cbnz	r3, 8008754 <_vfiprintf_r+0x18>
 8008750:	f000 fb16 	bl	8008d80 <__sinit>
 8008754:	4b89      	ldr	r3, [pc, #548]	; (800897c <_vfiprintf_r+0x240>)
 8008756:	429d      	cmp	r5, r3
 8008758:	d11b      	bne.n	8008792 <_vfiprintf_r+0x56>
 800875a:	6875      	ldr	r5, [r6, #4]
 800875c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800875e:	07d9      	lsls	r1, r3, #31
 8008760:	d405      	bmi.n	800876e <_vfiprintf_r+0x32>
 8008762:	89ab      	ldrh	r3, [r5, #12]
 8008764:	059a      	lsls	r2, r3, #22
 8008766:	d402      	bmi.n	800876e <_vfiprintf_r+0x32>
 8008768:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800876a:	f000 fba7 	bl	8008ebc <__retarget_lock_acquire_recursive>
 800876e:	89ab      	ldrh	r3, [r5, #12]
 8008770:	071b      	lsls	r3, r3, #28
 8008772:	d501      	bpl.n	8008778 <_vfiprintf_r+0x3c>
 8008774:	692b      	ldr	r3, [r5, #16]
 8008776:	b9eb      	cbnz	r3, 80087b4 <_vfiprintf_r+0x78>
 8008778:	4629      	mov	r1, r5
 800877a:	4630      	mov	r0, r6
 800877c:	f000 f970 	bl	8008a60 <__swsetup_r>
 8008780:	b1c0      	cbz	r0, 80087b4 <_vfiprintf_r+0x78>
 8008782:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008784:	07dc      	lsls	r4, r3, #31
 8008786:	d50e      	bpl.n	80087a6 <_vfiprintf_r+0x6a>
 8008788:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800878c:	b01d      	add	sp, #116	; 0x74
 800878e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008792:	4b7b      	ldr	r3, [pc, #492]	; (8008980 <_vfiprintf_r+0x244>)
 8008794:	429d      	cmp	r5, r3
 8008796:	d101      	bne.n	800879c <_vfiprintf_r+0x60>
 8008798:	68b5      	ldr	r5, [r6, #8]
 800879a:	e7df      	b.n	800875c <_vfiprintf_r+0x20>
 800879c:	4b79      	ldr	r3, [pc, #484]	; (8008984 <_vfiprintf_r+0x248>)
 800879e:	429d      	cmp	r5, r3
 80087a0:	bf08      	it	eq
 80087a2:	68f5      	ldreq	r5, [r6, #12]
 80087a4:	e7da      	b.n	800875c <_vfiprintf_r+0x20>
 80087a6:	89ab      	ldrh	r3, [r5, #12]
 80087a8:	0598      	lsls	r0, r3, #22
 80087aa:	d4ed      	bmi.n	8008788 <_vfiprintf_r+0x4c>
 80087ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087ae:	f000 fb86 	bl	8008ebe <__retarget_lock_release_recursive>
 80087b2:	e7e9      	b.n	8008788 <_vfiprintf_r+0x4c>
 80087b4:	2300      	movs	r3, #0
 80087b6:	9309      	str	r3, [sp, #36]	; 0x24
 80087b8:	2320      	movs	r3, #32
 80087ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087be:	f8cd 800c 	str.w	r8, [sp, #12]
 80087c2:	2330      	movs	r3, #48	; 0x30
 80087c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008988 <_vfiprintf_r+0x24c>
 80087c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087cc:	f04f 0901 	mov.w	r9, #1
 80087d0:	4623      	mov	r3, r4
 80087d2:	469a      	mov	sl, r3
 80087d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087d8:	b10a      	cbz	r2, 80087de <_vfiprintf_r+0xa2>
 80087da:	2a25      	cmp	r2, #37	; 0x25
 80087dc:	d1f9      	bne.n	80087d2 <_vfiprintf_r+0x96>
 80087de:	ebba 0b04 	subs.w	fp, sl, r4
 80087e2:	d00b      	beq.n	80087fc <_vfiprintf_r+0xc0>
 80087e4:	465b      	mov	r3, fp
 80087e6:	4622      	mov	r2, r4
 80087e8:	4629      	mov	r1, r5
 80087ea:	4630      	mov	r0, r6
 80087ec:	f7ff ff93 	bl	8008716 <__sfputs_r>
 80087f0:	3001      	adds	r0, #1
 80087f2:	f000 80aa 	beq.w	800894a <_vfiprintf_r+0x20e>
 80087f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087f8:	445a      	add	r2, fp
 80087fa:	9209      	str	r2, [sp, #36]	; 0x24
 80087fc:	f89a 3000 	ldrb.w	r3, [sl]
 8008800:	2b00      	cmp	r3, #0
 8008802:	f000 80a2 	beq.w	800894a <_vfiprintf_r+0x20e>
 8008806:	2300      	movs	r3, #0
 8008808:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800880c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008810:	f10a 0a01 	add.w	sl, sl, #1
 8008814:	9304      	str	r3, [sp, #16]
 8008816:	9307      	str	r3, [sp, #28]
 8008818:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800881c:	931a      	str	r3, [sp, #104]	; 0x68
 800881e:	4654      	mov	r4, sl
 8008820:	2205      	movs	r2, #5
 8008822:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008826:	4858      	ldr	r0, [pc, #352]	; (8008988 <_vfiprintf_r+0x24c>)
 8008828:	f7f7 fcda 	bl	80001e0 <memchr>
 800882c:	9a04      	ldr	r2, [sp, #16]
 800882e:	b9d8      	cbnz	r0, 8008868 <_vfiprintf_r+0x12c>
 8008830:	06d1      	lsls	r1, r2, #27
 8008832:	bf44      	itt	mi
 8008834:	2320      	movmi	r3, #32
 8008836:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800883a:	0713      	lsls	r3, r2, #28
 800883c:	bf44      	itt	mi
 800883e:	232b      	movmi	r3, #43	; 0x2b
 8008840:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008844:	f89a 3000 	ldrb.w	r3, [sl]
 8008848:	2b2a      	cmp	r3, #42	; 0x2a
 800884a:	d015      	beq.n	8008878 <_vfiprintf_r+0x13c>
 800884c:	9a07      	ldr	r2, [sp, #28]
 800884e:	4654      	mov	r4, sl
 8008850:	2000      	movs	r0, #0
 8008852:	f04f 0c0a 	mov.w	ip, #10
 8008856:	4621      	mov	r1, r4
 8008858:	f811 3b01 	ldrb.w	r3, [r1], #1
 800885c:	3b30      	subs	r3, #48	; 0x30
 800885e:	2b09      	cmp	r3, #9
 8008860:	d94e      	bls.n	8008900 <_vfiprintf_r+0x1c4>
 8008862:	b1b0      	cbz	r0, 8008892 <_vfiprintf_r+0x156>
 8008864:	9207      	str	r2, [sp, #28]
 8008866:	e014      	b.n	8008892 <_vfiprintf_r+0x156>
 8008868:	eba0 0308 	sub.w	r3, r0, r8
 800886c:	fa09 f303 	lsl.w	r3, r9, r3
 8008870:	4313      	orrs	r3, r2
 8008872:	9304      	str	r3, [sp, #16]
 8008874:	46a2      	mov	sl, r4
 8008876:	e7d2      	b.n	800881e <_vfiprintf_r+0xe2>
 8008878:	9b03      	ldr	r3, [sp, #12]
 800887a:	1d19      	adds	r1, r3, #4
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	9103      	str	r1, [sp, #12]
 8008880:	2b00      	cmp	r3, #0
 8008882:	bfbb      	ittet	lt
 8008884:	425b      	neglt	r3, r3
 8008886:	f042 0202 	orrlt.w	r2, r2, #2
 800888a:	9307      	strge	r3, [sp, #28]
 800888c:	9307      	strlt	r3, [sp, #28]
 800888e:	bfb8      	it	lt
 8008890:	9204      	strlt	r2, [sp, #16]
 8008892:	7823      	ldrb	r3, [r4, #0]
 8008894:	2b2e      	cmp	r3, #46	; 0x2e
 8008896:	d10c      	bne.n	80088b2 <_vfiprintf_r+0x176>
 8008898:	7863      	ldrb	r3, [r4, #1]
 800889a:	2b2a      	cmp	r3, #42	; 0x2a
 800889c:	d135      	bne.n	800890a <_vfiprintf_r+0x1ce>
 800889e:	9b03      	ldr	r3, [sp, #12]
 80088a0:	1d1a      	adds	r2, r3, #4
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	9203      	str	r2, [sp, #12]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	bfb8      	it	lt
 80088aa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80088ae:	3402      	adds	r4, #2
 80088b0:	9305      	str	r3, [sp, #20]
 80088b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008998 <_vfiprintf_r+0x25c>
 80088b6:	7821      	ldrb	r1, [r4, #0]
 80088b8:	2203      	movs	r2, #3
 80088ba:	4650      	mov	r0, sl
 80088bc:	f7f7 fc90 	bl	80001e0 <memchr>
 80088c0:	b140      	cbz	r0, 80088d4 <_vfiprintf_r+0x198>
 80088c2:	2340      	movs	r3, #64	; 0x40
 80088c4:	eba0 000a 	sub.w	r0, r0, sl
 80088c8:	fa03 f000 	lsl.w	r0, r3, r0
 80088cc:	9b04      	ldr	r3, [sp, #16]
 80088ce:	4303      	orrs	r3, r0
 80088d0:	3401      	adds	r4, #1
 80088d2:	9304      	str	r3, [sp, #16]
 80088d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088d8:	482c      	ldr	r0, [pc, #176]	; (800898c <_vfiprintf_r+0x250>)
 80088da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088de:	2206      	movs	r2, #6
 80088e0:	f7f7 fc7e 	bl	80001e0 <memchr>
 80088e4:	2800      	cmp	r0, #0
 80088e6:	d03f      	beq.n	8008968 <_vfiprintf_r+0x22c>
 80088e8:	4b29      	ldr	r3, [pc, #164]	; (8008990 <_vfiprintf_r+0x254>)
 80088ea:	bb1b      	cbnz	r3, 8008934 <_vfiprintf_r+0x1f8>
 80088ec:	9b03      	ldr	r3, [sp, #12]
 80088ee:	3307      	adds	r3, #7
 80088f0:	f023 0307 	bic.w	r3, r3, #7
 80088f4:	3308      	adds	r3, #8
 80088f6:	9303      	str	r3, [sp, #12]
 80088f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088fa:	443b      	add	r3, r7
 80088fc:	9309      	str	r3, [sp, #36]	; 0x24
 80088fe:	e767      	b.n	80087d0 <_vfiprintf_r+0x94>
 8008900:	fb0c 3202 	mla	r2, ip, r2, r3
 8008904:	460c      	mov	r4, r1
 8008906:	2001      	movs	r0, #1
 8008908:	e7a5      	b.n	8008856 <_vfiprintf_r+0x11a>
 800890a:	2300      	movs	r3, #0
 800890c:	3401      	adds	r4, #1
 800890e:	9305      	str	r3, [sp, #20]
 8008910:	4619      	mov	r1, r3
 8008912:	f04f 0c0a 	mov.w	ip, #10
 8008916:	4620      	mov	r0, r4
 8008918:	f810 2b01 	ldrb.w	r2, [r0], #1
 800891c:	3a30      	subs	r2, #48	; 0x30
 800891e:	2a09      	cmp	r2, #9
 8008920:	d903      	bls.n	800892a <_vfiprintf_r+0x1ee>
 8008922:	2b00      	cmp	r3, #0
 8008924:	d0c5      	beq.n	80088b2 <_vfiprintf_r+0x176>
 8008926:	9105      	str	r1, [sp, #20]
 8008928:	e7c3      	b.n	80088b2 <_vfiprintf_r+0x176>
 800892a:	fb0c 2101 	mla	r1, ip, r1, r2
 800892e:	4604      	mov	r4, r0
 8008930:	2301      	movs	r3, #1
 8008932:	e7f0      	b.n	8008916 <_vfiprintf_r+0x1da>
 8008934:	ab03      	add	r3, sp, #12
 8008936:	9300      	str	r3, [sp, #0]
 8008938:	462a      	mov	r2, r5
 800893a:	4b16      	ldr	r3, [pc, #88]	; (8008994 <_vfiprintf_r+0x258>)
 800893c:	a904      	add	r1, sp, #16
 800893e:	4630      	mov	r0, r6
 8008940:	f7fd fda8 	bl	8006494 <_printf_float>
 8008944:	4607      	mov	r7, r0
 8008946:	1c78      	adds	r0, r7, #1
 8008948:	d1d6      	bne.n	80088f8 <_vfiprintf_r+0x1bc>
 800894a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800894c:	07d9      	lsls	r1, r3, #31
 800894e:	d405      	bmi.n	800895c <_vfiprintf_r+0x220>
 8008950:	89ab      	ldrh	r3, [r5, #12]
 8008952:	059a      	lsls	r2, r3, #22
 8008954:	d402      	bmi.n	800895c <_vfiprintf_r+0x220>
 8008956:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008958:	f000 fab1 	bl	8008ebe <__retarget_lock_release_recursive>
 800895c:	89ab      	ldrh	r3, [r5, #12]
 800895e:	065b      	lsls	r3, r3, #25
 8008960:	f53f af12 	bmi.w	8008788 <_vfiprintf_r+0x4c>
 8008964:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008966:	e711      	b.n	800878c <_vfiprintf_r+0x50>
 8008968:	ab03      	add	r3, sp, #12
 800896a:	9300      	str	r3, [sp, #0]
 800896c:	462a      	mov	r2, r5
 800896e:	4b09      	ldr	r3, [pc, #36]	; (8008994 <_vfiprintf_r+0x258>)
 8008970:	a904      	add	r1, sp, #16
 8008972:	4630      	mov	r0, r6
 8008974:	f7fe f832 	bl	80069dc <_printf_i>
 8008978:	e7e4      	b.n	8008944 <_vfiprintf_r+0x208>
 800897a:	bf00      	nop
 800897c:	08009a48 	.word	0x08009a48
 8008980:	08009a68 	.word	0x08009a68
 8008984:	08009a28 	.word	0x08009a28
 8008988:	08009a14 	.word	0x08009a14
 800898c:	08009a1e 	.word	0x08009a1e
 8008990:	08006495 	.word	0x08006495
 8008994:	08008717 	.word	0x08008717
 8008998:	08009a1a 	.word	0x08009a1a

0800899c <_sbrk_r>:
 800899c:	b538      	push	{r3, r4, r5, lr}
 800899e:	4d06      	ldr	r5, [pc, #24]	; (80089b8 <_sbrk_r+0x1c>)
 80089a0:	2300      	movs	r3, #0
 80089a2:	4604      	mov	r4, r0
 80089a4:	4608      	mov	r0, r1
 80089a6:	602b      	str	r3, [r5, #0]
 80089a8:	f7f9 f8fc 	bl	8001ba4 <_sbrk>
 80089ac:	1c43      	adds	r3, r0, #1
 80089ae:	d102      	bne.n	80089b6 <_sbrk_r+0x1a>
 80089b0:	682b      	ldr	r3, [r5, #0]
 80089b2:	b103      	cbz	r3, 80089b6 <_sbrk_r+0x1a>
 80089b4:	6023      	str	r3, [r4, #0]
 80089b6:	bd38      	pop	{r3, r4, r5, pc}
 80089b8:	20000a80 	.word	0x20000a80

080089bc <__swbuf_r>:
 80089bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089be:	460e      	mov	r6, r1
 80089c0:	4614      	mov	r4, r2
 80089c2:	4605      	mov	r5, r0
 80089c4:	b118      	cbz	r0, 80089ce <__swbuf_r+0x12>
 80089c6:	6983      	ldr	r3, [r0, #24]
 80089c8:	b90b      	cbnz	r3, 80089ce <__swbuf_r+0x12>
 80089ca:	f000 f9d9 	bl	8008d80 <__sinit>
 80089ce:	4b21      	ldr	r3, [pc, #132]	; (8008a54 <__swbuf_r+0x98>)
 80089d0:	429c      	cmp	r4, r3
 80089d2:	d12b      	bne.n	8008a2c <__swbuf_r+0x70>
 80089d4:	686c      	ldr	r4, [r5, #4]
 80089d6:	69a3      	ldr	r3, [r4, #24]
 80089d8:	60a3      	str	r3, [r4, #8]
 80089da:	89a3      	ldrh	r3, [r4, #12]
 80089dc:	071a      	lsls	r2, r3, #28
 80089de:	d52f      	bpl.n	8008a40 <__swbuf_r+0x84>
 80089e0:	6923      	ldr	r3, [r4, #16]
 80089e2:	b36b      	cbz	r3, 8008a40 <__swbuf_r+0x84>
 80089e4:	6923      	ldr	r3, [r4, #16]
 80089e6:	6820      	ldr	r0, [r4, #0]
 80089e8:	1ac0      	subs	r0, r0, r3
 80089ea:	6963      	ldr	r3, [r4, #20]
 80089ec:	b2f6      	uxtb	r6, r6
 80089ee:	4283      	cmp	r3, r0
 80089f0:	4637      	mov	r7, r6
 80089f2:	dc04      	bgt.n	80089fe <__swbuf_r+0x42>
 80089f4:	4621      	mov	r1, r4
 80089f6:	4628      	mov	r0, r5
 80089f8:	f000 f92e 	bl	8008c58 <_fflush_r>
 80089fc:	bb30      	cbnz	r0, 8008a4c <__swbuf_r+0x90>
 80089fe:	68a3      	ldr	r3, [r4, #8]
 8008a00:	3b01      	subs	r3, #1
 8008a02:	60a3      	str	r3, [r4, #8]
 8008a04:	6823      	ldr	r3, [r4, #0]
 8008a06:	1c5a      	adds	r2, r3, #1
 8008a08:	6022      	str	r2, [r4, #0]
 8008a0a:	701e      	strb	r6, [r3, #0]
 8008a0c:	6963      	ldr	r3, [r4, #20]
 8008a0e:	3001      	adds	r0, #1
 8008a10:	4283      	cmp	r3, r0
 8008a12:	d004      	beq.n	8008a1e <__swbuf_r+0x62>
 8008a14:	89a3      	ldrh	r3, [r4, #12]
 8008a16:	07db      	lsls	r3, r3, #31
 8008a18:	d506      	bpl.n	8008a28 <__swbuf_r+0x6c>
 8008a1a:	2e0a      	cmp	r6, #10
 8008a1c:	d104      	bne.n	8008a28 <__swbuf_r+0x6c>
 8008a1e:	4621      	mov	r1, r4
 8008a20:	4628      	mov	r0, r5
 8008a22:	f000 f919 	bl	8008c58 <_fflush_r>
 8008a26:	b988      	cbnz	r0, 8008a4c <__swbuf_r+0x90>
 8008a28:	4638      	mov	r0, r7
 8008a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a2c:	4b0a      	ldr	r3, [pc, #40]	; (8008a58 <__swbuf_r+0x9c>)
 8008a2e:	429c      	cmp	r4, r3
 8008a30:	d101      	bne.n	8008a36 <__swbuf_r+0x7a>
 8008a32:	68ac      	ldr	r4, [r5, #8]
 8008a34:	e7cf      	b.n	80089d6 <__swbuf_r+0x1a>
 8008a36:	4b09      	ldr	r3, [pc, #36]	; (8008a5c <__swbuf_r+0xa0>)
 8008a38:	429c      	cmp	r4, r3
 8008a3a:	bf08      	it	eq
 8008a3c:	68ec      	ldreq	r4, [r5, #12]
 8008a3e:	e7ca      	b.n	80089d6 <__swbuf_r+0x1a>
 8008a40:	4621      	mov	r1, r4
 8008a42:	4628      	mov	r0, r5
 8008a44:	f000 f80c 	bl	8008a60 <__swsetup_r>
 8008a48:	2800      	cmp	r0, #0
 8008a4a:	d0cb      	beq.n	80089e4 <__swbuf_r+0x28>
 8008a4c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008a50:	e7ea      	b.n	8008a28 <__swbuf_r+0x6c>
 8008a52:	bf00      	nop
 8008a54:	08009a48 	.word	0x08009a48
 8008a58:	08009a68 	.word	0x08009a68
 8008a5c:	08009a28 	.word	0x08009a28

08008a60 <__swsetup_r>:
 8008a60:	4b32      	ldr	r3, [pc, #200]	; (8008b2c <__swsetup_r+0xcc>)
 8008a62:	b570      	push	{r4, r5, r6, lr}
 8008a64:	681d      	ldr	r5, [r3, #0]
 8008a66:	4606      	mov	r6, r0
 8008a68:	460c      	mov	r4, r1
 8008a6a:	b125      	cbz	r5, 8008a76 <__swsetup_r+0x16>
 8008a6c:	69ab      	ldr	r3, [r5, #24]
 8008a6e:	b913      	cbnz	r3, 8008a76 <__swsetup_r+0x16>
 8008a70:	4628      	mov	r0, r5
 8008a72:	f000 f985 	bl	8008d80 <__sinit>
 8008a76:	4b2e      	ldr	r3, [pc, #184]	; (8008b30 <__swsetup_r+0xd0>)
 8008a78:	429c      	cmp	r4, r3
 8008a7a:	d10f      	bne.n	8008a9c <__swsetup_r+0x3c>
 8008a7c:	686c      	ldr	r4, [r5, #4]
 8008a7e:	89a3      	ldrh	r3, [r4, #12]
 8008a80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a84:	0719      	lsls	r1, r3, #28
 8008a86:	d42c      	bmi.n	8008ae2 <__swsetup_r+0x82>
 8008a88:	06dd      	lsls	r5, r3, #27
 8008a8a:	d411      	bmi.n	8008ab0 <__swsetup_r+0x50>
 8008a8c:	2309      	movs	r3, #9
 8008a8e:	6033      	str	r3, [r6, #0]
 8008a90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008a94:	81a3      	strh	r3, [r4, #12]
 8008a96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a9a:	e03e      	b.n	8008b1a <__swsetup_r+0xba>
 8008a9c:	4b25      	ldr	r3, [pc, #148]	; (8008b34 <__swsetup_r+0xd4>)
 8008a9e:	429c      	cmp	r4, r3
 8008aa0:	d101      	bne.n	8008aa6 <__swsetup_r+0x46>
 8008aa2:	68ac      	ldr	r4, [r5, #8]
 8008aa4:	e7eb      	b.n	8008a7e <__swsetup_r+0x1e>
 8008aa6:	4b24      	ldr	r3, [pc, #144]	; (8008b38 <__swsetup_r+0xd8>)
 8008aa8:	429c      	cmp	r4, r3
 8008aaa:	bf08      	it	eq
 8008aac:	68ec      	ldreq	r4, [r5, #12]
 8008aae:	e7e6      	b.n	8008a7e <__swsetup_r+0x1e>
 8008ab0:	0758      	lsls	r0, r3, #29
 8008ab2:	d512      	bpl.n	8008ada <__swsetup_r+0x7a>
 8008ab4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ab6:	b141      	cbz	r1, 8008aca <__swsetup_r+0x6a>
 8008ab8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008abc:	4299      	cmp	r1, r3
 8008abe:	d002      	beq.n	8008ac6 <__swsetup_r+0x66>
 8008ac0:	4630      	mov	r0, r6
 8008ac2:	f7ff fc0b 	bl	80082dc <_free_r>
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	6363      	str	r3, [r4, #52]	; 0x34
 8008aca:	89a3      	ldrh	r3, [r4, #12]
 8008acc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008ad0:	81a3      	strh	r3, [r4, #12]
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	6063      	str	r3, [r4, #4]
 8008ad6:	6923      	ldr	r3, [r4, #16]
 8008ad8:	6023      	str	r3, [r4, #0]
 8008ada:	89a3      	ldrh	r3, [r4, #12]
 8008adc:	f043 0308 	orr.w	r3, r3, #8
 8008ae0:	81a3      	strh	r3, [r4, #12]
 8008ae2:	6923      	ldr	r3, [r4, #16]
 8008ae4:	b94b      	cbnz	r3, 8008afa <__swsetup_r+0x9a>
 8008ae6:	89a3      	ldrh	r3, [r4, #12]
 8008ae8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008aec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008af0:	d003      	beq.n	8008afa <__swsetup_r+0x9a>
 8008af2:	4621      	mov	r1, r4
 8008af4:	4630      	mov	r0, r6
 8008af6:	f000 fa07 	bl	8008f08 <__smakebuf_r>
 8008afa:	89a0      	ldrh	r0, [r4, #12]
 8008afc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b00:	f010 0301 	ands.w	r3, r0, #1
 8008b04:	d00a      	beq.n	8008b1c <__swsetup_r+0xbc>
 8008b06:	2300      	movs	r3, #0
 8008b08:	60a3      	str	r3, [r4, #8]
 8008b0a:	6963      	ldr	r3, [r4, #20]
 8008b0c:	425b      	negs	r3, r3
 8008b0e:	61a3      	str	r3, [r4, #24]
 8008b10:	6923      	ldr	r3, [r4, #16]
 8008b12:	b943      	cbnz	r3, 8008b26 <__swsetup_r+0xc6>
 8008b14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008b18:	d1ba      	bne.n	8008a90 <__swsetup_r+0x30>
 8008b1a:	bd70      	pop	{r4, r5, r6, pc}
 8008b1c:	0781      	lsls	r1, r0, #30
 8008b1e:	bf58      	it	pl
 8008b20:	6963      	ldrpl	r3, [r4, #20]
 8008b22:	60a3      	str	r3, [r4, #8]
 8008b24:	e7f4      	b.n	8008b10 <__swsetup_r+0xb0>
 8008b26:	2000      	movs	r0, #0
 8008b28:	e7f7      	b.n	8008b1a <__swsetup_r+0xba>
 8008b2a:	bf00      	nop
 8008b2c:	20000014 	.word	0x20000014
 8008b30:	08009a48 	.word	0x08009a48
 8008b34:	08009a68 	.word	0x08009a68
 8008b38:	08009a28 	.word	0x08009a28

08008b3c <abort>:
 8008b3c:	b508      	push	{r3, lr}
 8008b3e:	2006      	movs	r0, #6
 8008b40:	f000 faa8 	bl	8009094 <raise>
 8008b44:	2001      	movs	r0, #1
 8008b46:	f7f8 ffb5 	bl	8001ab4 <_exit>
	...

08008b4c <__sflush_r>:
 8008b4c:	898a      	ldrh	r2, [r1, #12]
 8008b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b52:	4605      	mov	r5, r0
 8008b54:	0710      	lsls	r0, r2, #28
 8008b56:	460c      	mov	r4, r1
 8008b58:	d458      	bmi.n	8008c0c <__sflush_r+0xc0>
 8008b5a:	684b      	ldr	r3, [r1, #4]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	dc05      	bgt.n	8008b6c <__sflush_r+0x20>
 8008b60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	dc02      	bgt.n	8008b6c <__sflush_r+0x20>
 8008b66:	2000      	movs	r0, #0
 8008b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b6e:	2e00      	cmp	r6, #0
 8008b70:	d0f9      	beq.n	8008b66 <__sflush_r+0x1a>
 8008b72:	2300      	movs	r3, #0
 8008b74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b78:	682f      	ldr	r7, [r5, #0]
 8008b7a:	602b      	str	r3, [r5, #0]
 8008b7c:	d032      	beq.n	8008be4 <__sflush_r+0x98>
 8008b7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b80:	89a3      	ldrh	r3, [r4, #12]
 8008b82:	075a      	lsls	r2, r3, #29
 8008b84:	d505      	bpl.n	8008b92 <__sflush_r+0x46>
 8008b86:	6863      	ldr	r3, [r4, #4]
 8008b88:	1ac0      	subs	r0, r0, r3
 8008b8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b8c:	b10b      	cbz	r3, 8008b92 <__sflush_r+0x46>
 8008b8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b90:	1ac0      	subs	r0, r0, r3
 8008b92:	2300      	movs	r3, #0
 8008b94:	4602      	mov	r2, r0
 8008b96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b98:	6a21      	ldr	r1, [r4, #32]
 8008b9a:	4628      	mov	r0, r5
 8008b9c:	47b0      	blx	r6
 8008b9e:	1c43      	adds	r3, r0, #1
 8008ba0:	89a3      	ldrh	r3, [r4, #12]
 8008ba2:	d106      	bne.n	8008bb2 <__sflush_r+0x66>
 8008ba4:	6829      	ldr	r1, [r5, #0]
 8008ba6:	291d      	cmp	r1, #29
 8008ba8:	d82c      	bhi.n	8008c04 <__sflush_r+0xb8>
 8008baa:	4a2a      	ldr	r2, [pc, #168]	; (8008c54 <__sflush_r+0x108>)
 8008bac:	40ca      	lsrs	r2, r1
 8008bae:	07d6      	lsls	r6, r2, #31
 8008bb0:	d528      	bpl.n	8008c04 <__sflush_r+0xb8>
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	6062      	str	r2, [r4, #4]
 8008bb6:	04d9      	lsls	r1, r3, #19
 8008bb8:	6922      	ldr	r2, [r4, #16]
 8008bba:	6022      	str	r2, [r4, #0]
 8008bbc:	d504      	bpl.n	8008bc8 <__sflush_r+0x7c>
 8008bbe:	1c42      	adds	r2, r0, #1
 8008bc0:	d101      	bne.n	8008bc6 <__sflush_r+0x7a>
 8008bc2:	682b      	ldr	r3, [r5, #0]
 8008bc4:	b903      	cbnz	r3, 8008bc8 <__sflush_r+0x7c>
 8008bc6:	6560      	str	r0, [r4, #84]	; 0x54
 8008bc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bca:	602f      	str	r7, [r5, #0]
 8008bcc:	2900      	cmp	r1, #0
 8008bce:	d0ca      	beq.n	8008b66 <__sflush_r+0x1a>
 8008bd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008bd4:	4299      	cmp	r1, r3
 8008bd6:	d002      	beq.n	8008bde <__sflush_r+0x92>
 8008bd8:	4628      	mov	r0, r5
 8008bda:	f7ff fb7f 	bl	80082dc <_free_r>
 8008bde:	2000      	movs	r0, #0
 8008be0:	6360      	str	r0, [r4, #52]	; 0x34
 8008be2:	e7c1      	b.n	8008b68 <__sflush_r+0x1c>
 8008be4:	6a21      	ldr	r1, [r4, #32]
 8008be6:	2301      	movs	r3, #1
 8008be8:	4628      	mov	r0, r5
 8008bea:	47b0      	blx	r6
 8008bec:	1c41      	adds	r1, r0, #1
 8008bee:	d1c7      	bne.n	8008b80 <__sflush_r+0x34>
 8008bf0:	682b      	ldr	r3, [r5, #0]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d0c4      	beq.n	8008b80 <__sflush_r+0x34>
 8008bf6:	2b1d      	cmp	r3, #29
 8008bf8:	d001      	beq.n	8008bfe <__sflush_r+0xb2>
 8008bfa:	2b16      	cmp	r3, #22
 8008bfc:	d101      	bne.n	8008c02 <__sflush_r+0xb6>
 8008bfe:	602f      	str	r7, [r5, #0]
 8008c00:	e7b1      	b.n	8008b66 <__sflush_r+0x1a>
 8008c02:	89a3      	ldrh	r3, [r4, #12]
 8008c04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c08:	81a3      	strh	r3, [r4, #12]
 8008c0a:	e7ad      	b.n	8008b68 <__sflush_r+0x1c>
 8008c0c:	690f      	ldr	r7, [r1, #16]
 8008c0e:	2f00      	cmp	r7, #0
 8008c10:	d0a9      	beq.n	8008b66 <__sflush_r+0x1a>
 8008c12:	0793      	lsls	r3, r2, #30
 8008c14:	680e      	ldr	r6, [r1, #0]
 8008c16:	bf08      	it	eq
 8008c18:	694b      	ldreq	r3, [r1, #20]
 8008c1a:	600f      	str	r7, [r1, #0]
 8008c1c:	bf18      	it	ne
 8008c1e:	2300      	movne	r3, #0
 8008c20:	eba6 0807 	sub.w	r8, r6, r7
 8008c24:	608b      	str	r3, [r1, #8]
 8008c26:	f1b8 0f00 	cmp.w	r8, #0
 8008c2a:	dd9c      	ble.n	8008b66 <__sflush_r+0x1a>
 8008c2c:	6a21      	ldr	r1, [r4, #32]
 8008c2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c30:	4643      	mov	r3, r8
 8008c32:	463a      	mov	r2, r7
 8008c34:	4628      	mov	r0, r5
 8008c36:	47b0      	blx	r6
 8008c38:	2800      	cmp	r0, #0
 8008c3a:	dc06      	bgt.n	8008c4a <__sflush_r+0xfe>
 8008c3c:	89a3      	ldrh	r3, [r4, #12]
 8008c3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c42:	81a3      	strh	r3, [r4, #12]
 8008c44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c48:	e78e      	b.n	8008b68 <__sflush_r+0x1c>
 8008c4a:	4407      	add	r7, r0
 8008c4c:	eba8 0800 	sub.w	r8, r8, r0
 8008c50:	e7e9      	b.n	8008c26 <__sflush_r+0xda>
 8008c52:	bf00      	nop
 8008c54:	20400001 	.word	0x20400001

08008c58 <_fflush_r>:
 8008c58:	b538      	push	{r3, r4, r5, lr}
 8008c5a:	690b      	ldr	r3, [r1, #16]
 8008c5c:	4605      	mov	r5, r0
 8008c5e:	460c      	mov	r4, r1
 8008c60:	b913      	cbnz	r3, 8008c68 <_fflush_r+0x10>
 8008c62:	2500      	movs	r5, #0
 8008c64:	4628      	mov	r0, r5
 8008c66:	bd38      	pop	{r3, r4, r5, pc}
 8008c68:	b118      	cbz	r0, 8008c72 <_fflush_r+0x1a>
 8008c6a:	6983      	ldr	r3, [r0, #24]
 8008c6c:	b90b      	cbnz	r3, 8008c72 <_fflush_r+0x1a>
 8008c6e:	f000 f887 	bl	8008d80 <__sinit>
 8008c72:	4b14      	ldr	r3, [pc, #80]	; (8008cc4 <_fflush_r+0x6c>)
 8008c74:	429c      	cmp	r4, r3
 8008c76:	d11b      	bne.n	8008cb0 <_fflush_r+0x58>
 8008c78:	686c      	ldr	r4, [r5, #4]
 8008c7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d0ef      	beq.n	8008c62 <_fflush_r+0xa>
 8008c82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c84:	07d0      	lsls	r0, r2, #31
 8008c86:	d404      	bmi.n	8008c92 <_fflush_r+0x3a>
 8008c88:	0599      	lsls	r1, r3, #22
 8008c8a:	d402      	bmi.n	8008c92 <_fflush_r+0x3a>
 8008c8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c8e:	f000 f915 	bl	8008ebc <__retarget_lock_acquire_recursive>
 8008c92:	4628      	mov	r0, r5
 8008c94:	4621      	mov	r1, r4
 8008c96:	f7ff ff59 	bl	8008b4c <__sflush_r>
 8008c9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c9c:	07da      	lsls	r2, r3, #31
 8008c9e:	4605      	mov	r5, r0
 8008ca0:	d4e0      	bmi.n	8008c64 <_fflush_r+0xc>
 8008ca2:	89a3      	ldrh	r3, [r4, #12]
 8008ca4:	059b      	lsls	r3, r3, #22
 8008ca6:	d4dd      	bmi.n	8008c64 <_fflush_r+0xc>
 8008ca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008caa:	f000 f908 	bl	8008ebe <__retarget_lock_release_recursive>
 8008cae:	e7d9      	b.n	8008c64 <_fflush_r+0xc>
 8008cb0:	4b05      	ldr	r3, [pc, #20]	; (8008cc8 <_fflush_r+0x70>)
 8008cb2:	429c      	cmp	r4, r3
 8008cb4:	d101      	bne.n	8008cba <_fflush_r+0x62>
 8008cb6:	68ac      	ldr	r4, [r5, #8]
 8008cb8:	e7df      	b.n	8008c7a <_fflush_r+0x22>
 8008cba:	4b04      	ldr	r3, [pc, #16]	; (8008ccc <_fflush_r+0x74>)
 8008cbc:	429c      	cmp	r4, r3
 8008cbe:	bf08      	it	eq
 8008cc0:	68ec      	ldreq	r4, [r5, #12]
 8008cc2:	e7da      	b.n	8008c7a <_fflush_r+0x22>
 8008cc4:	08009a48 	.word	0x08009a48
 8008cc8:	08009a68 	.word	0x08009a68
 8008ccc:	08009a28 	.word	0x08009a28

08008cd0 <std>:
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	b510      	push	{r4, lr}
 8008cd4:	4604      	mov	r4, r0
 8008cd6:	e9c0 3300 	strd	r3, r3, [r0]
 8008cda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008cde:	6083      	str	r3, [r0, #8]
 8008ce0:	8181      	strh	r1, [r0, #12]
 8008ce2:	6643      	str	r3, [r0, #100]	; 0x64
 8008ce4:	81c2      	strh	r2, [r0, #14]
 8008ce6:	6183      	str	r3, [r0, #24]
 8008ce8:	4619      	mov	r1, r3
 8008cea:	2208      	movs	r2, #8
 8008cec:	305c      	adds	r0, #92	; 0x5c
 8008cee:	f7fd fb29 	bl	8006344 <memset>
 8008cf2:	4b05      	ldr	r3, [pc, #20]	; (8008d08 <std+0x38>)
 8008cf4:	6263      	str	r3, [r4, #36]	; 0x24
 8008cf6:	4b05      	ldr	r3, [pc, #20]	; (8008d0c <std+0x3c>)
 8008cf8:	62a3      	str	r3, [r4, #40]	; 0x28
 8008cfa:	4b05      	ldr	r3, [pc, #20]	; (8008d10 <std+0x40>)
 8008cfc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008cfe:	4b05      	ldr	r3, [pc, #20]	; (8008d14 <std+0x44>)
 8008d00:	6224      	str	r4, [r4, #32]
 8008d02:	6323      	str	r3, [r4, #48]	; 0x30
 8008d04:	bd10      	pop	{r4, pc}
 8008d06:	bf00      	nop
 8008d08:	080090cd 	.word	0x080090cd
 8008d0c:	080090ef 	.word	0x080090ef
 8008d10:	08009127 	.word	0x08009127
 8008d14:	0800914b 	.word	0x0800914b

08008d18 <_cleanup_r>:
 8008d18:	4901      	ldr	r1, [pc, #4]	; (8008d20 <_cleanup_r+0x8>)
 8008d1a:	f000 b8af 	b.w	8008e7c <_fwalk_reent>
 8008d1e:	bf00      	nop
 8008d20:	08008c59 	.word	0x08008c59

08008d24 <__sfmoreglue>:
 8008d24:	b570      	push	{r4, r5, r6, lr}
 8008d26:	1e4a      	subs	r2, r1, #1
 8008d28:	2568      	movs	r5, #104	; 0x68
 8008d2a:	4355      	muls	r5, r2
 8008d2c:	460e      	mov	r6, r1
 8008d2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008d32:	f7ff fb23 	bl	800837c <_malloc_r>
 8008d36:	4604      	mov	r4, r0
 8008d38:	b140      	cbz	r0, 8008d4c <__sfmoreglue+0x28>
 8008d3a:	2100      	movs	r1, #0
 8008d3c:	e9c0 1600 	strd	r1, r6, [r0]
 8008d40:	300c      	adds	r0, #12
 8008d42:	60a0      	str	r0, [r4, #8]
 8008d44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008d48:	f7fd fafc 	bl	8006344 <memset>
 8008d4c:	4620      	mov	r0, r4
 8008d4e:	bd70      	pop	{r4, r5, r6, pc}

08008d50 <__sfp_lock_acquire>:
 8008d50:	4801      	ldr	r0, [pc, #4]	; (8008d58 <__sfp_lock_acquire+0x8>)
 8008d52:	f000 b8b3 	b.w	8008ebc <__retarget_lock_acquire_recursive>
 8008d56:	bf00      	nop
 8008d58:	20000a7c 	.word	0x20000a7c

08008d5c <__sfp_lock_release>:
 8008d5c:	4801      	ldr	r0, [pc, #4]	; (8008d64 <__sfp_lock_release+0x8>)
 8008d5e:	f000 b8ae 	b.w	8008ebe <__retarget_lock_release_recursive>
 8008d62:	bf00      	nop
 8008d64:	20000a7c 	.word	0x20000a7c

08008d68 <__sinit_lock_acquire>:
 8008d68:	4801      	ldr	r0, [pc, #4]	; (8008d70 <__sinit_lock_acquire+0x8>)
 8008d6a:	f000 b8a7 	b.w	8008ebc <__retarget_lock_acquire_recursive>
 8008d6e:	bf00      	nop
 8008d70:	20000a77 	.word	0x20000a77

08008d74 <__sinit_lock_release>:
 8008d74:	4801      	ldr	r0, [pc, #4]	; (8008d7c <__sinit_lock_release+0x8>)
 8008d76:	f000 b8a2 	b.w	8008ebe <__retarget_lock_release_recursive>
 8008d7a:	bf00      	nop
 8008d7c:	20000a77 	.word	0x20000a77

08008d80 <__sinit>:
 8008d80:	b510      	push	{r4, lr}
 8008d82:	4604      	mov	r4, r0
 8008d84:	f7ff fff0 	bl	8008d68 <__sinit_lock_acquire>
 8008d88:	69a3      	ldr	r3, [r4, #24]
 8008d8a:	b11b      	cbz	r3, 8008d94 <__sinit+0x14>
 8008d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d90:	f7ff bff0 	b.w	8008d74 <__sinit_lock_release>
 8008d94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008d98:	6523      	str	r3, [r4, #80]	; 0x50
 8008d9a:	4b13      	ldr	r3, [pc, #76]	; (8008de8 <__sinit+0x68>)
 8008d9c:	4a13      	ldr	r2, [pc, #76]	; (8008dec <__sinit+0x6c>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	62a2      	str	r2, [r4, #40]	; 0x28
 8008da2:	42a3      	cmp	r3, r4
 8008da4:	bf04      	itt	eq
 8008da6:	2301      	moveq	r3, #1
 8008da8:	61a3      	streq	r3, [r4, #24]
 8008daa:	4620      	mov	r0, r4
 8008dac:	f000 f820 	bl	8008df0 <__sfp>
 8008db0:	6060      	str	r0, [r4, #4]
 8008db2:	4620      	mov	r0, r4
 8008db4:	f000 f81c 	bl	8008df0 <__sfp>
 8008db8:	60a0      	str	r0, [r4, #8]
 8008dba:	4620      	mov	r0, r4
 8008dbc:	f000 f818 	bl	8008df0 <__sfp>
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	60e0      	str	r0, [r4, #12]
 8008dc4:	2104      	movs	r1, #4
 8008dc6:	6860      	ldr	r0, [r4, #4]
 8008dc8:	f7ff ff82 	bl	8008cd0 <std>
 8008dcc:	68a0      	ldr	r0, [r4, #8]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	2109      	movs	r1, #9
 8008dd2:	f7ff ff7d 	bl	8008cd0 <std>
 8008dd6:	68e0      	ldr	r0, [r4, #12]
 8008dd8:	2202      	movs	r2, #2
 8008dda:	2112      	movs	r1, #18
 8008ddc:	f7ff ff78 	bl	8008cd0 <std>
 8008de0:	2301      	movs	r3, #1
 8008de2:	61a3      	str	r3, [r4, #24]
 8008de4:	e7d2      	b.n	8008d8c <__sinit+0xc>
 8008de6:	bf00      	nop
 8008de8:	08009648 	.word	0x08009648
 8008dec:	08008d19 	.word	0x08008d19

08008df0 <__sfp>:
 8008df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008df2:	4607      	mov	r7, r0
 8008df4:	f7ff ffac 	bl	8008d50 <__sfp_lock_acquire>
 8008df8:	4b1e      	ldr	r3, [pc, #120]	; (8008e74 <__sfp+0x84>)
 8008dfa:	681e      	ldr	r6, [r3, #0]
 8008dfc:	69b3      	ldr	r3, [r6, #24]
 8008dfe:	b913      	cbnz	r3, 8008e06 <__sfp+0x16>
 8008e00:	4630      	mov	r0, r6
 8008e02:	f7ff ffbd 	bl	8008d80 <__sinit>
 8008e06:	3648      	adds	r6, #72	; 0x48
 8008e08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008e0c:	3b01      	subs	r3, #1
 8008e0e:	d503      	bpl.n	8008e18 <__sfp+0x28>
 8008e10:	6833      	ldr	r3, [r6, #0]
 8008e12:	b30b      	cbz	r3, 8008e58 <__sfp+0x68>
 8008e14:	6836      	ldr	r6, [r6, #0]
 8008e16:	e7f7      	b.n	8008e08 <__sfp+0x18>
 8008e18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008e1c:	b9d5      	cbnz	r5, 8008e54 <__sfp+0x64>
 8008e1e:	4b16      	ldr	r3, [pc, #88]	; (8008e78 <__sfp+0x88>)
 8008e20:	60e3      	str	r3, [r4, #12]
 8008e22:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008e26:	6665      	str	r5, [r4, #100]	; 0x64
 8008e28:	f000 f847 	bl	8008eba <__retarget_lock_init_recursive>
 8008e2c:	f7ff ff96 	bl	8008d5c <__sfp_lock_release>
 8008e30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008e34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008e38:	6025      	str	r5, [r4, #0]
 8008e3a:	61a5      	str	r5, [r4, #24]
 8008e3c:	2208      	movs	r2, #8
 8008e3e:	4629      	mov	r1, r5
 8008e40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008e44:	f7fd fa7e 	bl	8006344 <memset>
 8008e48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008e4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008e50:	4620      	mov	r0, r4
 8008e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e54:	3468      	adds	r4, #104	; 0x68
 8008e56:	e7d9      	b.n	8008e0c <__sfp+0x1c>
 8008e58:	2104      	movs	r1, #4
 8008e5a:	4638      	mov	r0, r7
 8008e5c:	f7ff ff62 	bl	8008d24 <__sfmoreglue>
 8008e60:	4604      	mov	r4, r0
 8008e62:	6030      	str	r0, [r6, #0]
 8008e64:	2800      	cmp	r0, #0
 8008e66:	d1d5      	bne.n	8008e14 <__sfp+0x24>
 8008e68:	f7ff ff78 	bl	8008d5c <__sfp_lock_release>
 8008e6c:	230c      	movs	r3, #12
 8008e6e:	603b      	str	r3, [r7, #0]
 8008e70:	e7ee      	b.n	8008e50 <__sfp+0x60>
 8008e72:	bf00      	nop
 8008e74:	08009648 	.word	0x08009648
 8008e78:	ffff0001 	.word	0xffff0001

08008e7c <_fwalk_reent>:
 8008e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e80:	4606      	mov	r6, r0
 8008e82:	4688      	mov	r8, r1
 8008e84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008e88:	2700      	movs	r7, #0
 8008e8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e8e:	f1b9 0901 	subs.w	r9, r9, #1
 8008e92:	d505      	bpl.n	8008ea0 <_fwalk_reent+0x24>
 8008e94:	6824      	ldr	r4, [r4, #0]
 8008e96:	2c00      	cmp	r4, #0
 8008e98:	d1f7      	bne.n	8008e8a <_fwalk_reent+0xe>
 8008e9a:	4638      	mov	r0, r7
 8008e9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ea0:	89ab      	ldrh	r3, [r5, #12]
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	d907      	bls.n	8008eb6 <_fwalk_reent+0x3a>
 8008ea6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008eaa:	3301      	adds	r3, #1
 8008eac:	d003      	beq.n	8008eb6 <_fwalk_reent+0x3a>
 8008eae:	4629      	mov	r1, r5
 8008eb0:	4630      	mov	r0, r6
 8008eb2:	47c0      	blx	r8
 8008eb4:	4307      	orrs	r7, r0
 8008eb6:	3568      	adds	r5, #104	; 0x68
 8008eb8:	e7e9      	b.n	8008e8e <_fwalk_reent+0x12>

08008eba <__retarget_lock_init_recursive>:
 8008eba:	4770      	bx	lr

08008ebc <__retarget_lock_acquire_recursive>:
 8008ebc:	4770      	bx	lr

08008ebe <__retarget_lock_release_recursive>:
 8008ebe:	4770      	bx	lr

08008ec0 <__swhatbuf_r>:
 8008ec0:	b570      	push	{r4, r5, r6, lr}
 8008ec2:	460e      	mov	r6, r1
 8008ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ec8:	2900      	cmp	r1, #0
 8008eca:	b096      	sub	sp, #88	; 0x58
 8008ecc:	4614      	mov	r4, r2
 8008ece:	461d      	mov	r5, r3
 8008ed0:	da07      	bge.n	8008ee2 <__swhatbuf_r+0x22>
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	602b      	str	r3, [r5, #0]
 8008ed6:	89b3      	ldrh	r3, [r6, #12]
 8008ed8:	061a      	lsls	r2, r3, #24
 8008eda:	d410      	bmi.n	8008efe <__swhatbuf_r+0x3e>
 8008edc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ee0:	e00e      	b.n	8008f00 <__swhatbuf_r+0x40>
 8008ee2:	466a      	mov	r2, sp
 8008ee4:	f000 f964 	bl	80091b0 <_fstat_r>
 8008ee8:	2800      	cmp	r0, #0
 8008eea:	dbf2      	blt.n	8008ed2 <__swhatbuf_r+0x12>
 8008eec:	9a01      	ldr	r2, [sp, #4]
 8008eee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008ef2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008ef6:	425a      	negs	r2, r3
 8008ef8:	415a      	adcs	r2, r3
 8008efa:	602a      	str	r2, [r5, #0]
 8008efc:	e7ee      	b.n	8008edc <__swhatbuf_r+0x1c>
 8008efe:	2340      	movs	r3, #64	; 0x40
 8008f00:	2000      	movs	r0, #0
 8008f02:	6023      	str	r3, [r4, #0]
 8008f04:	b016      	add	sp, #88	; 0x58
 8008f06:	bd70      	pop	{r4, r5, r6, pc}

08008f08 <__smakebuf_r>:
 8008f08:	898b      	ldrh	r3, [r1, #12]
 8008f0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f0c:	079d      	lsls	r5, r3, #30
 8008f0e:	4606      	mov	r6, r0
 8008f10:	460c      	mov	r4, r1
 8008f12:	d507      	bpl.n	8008f24 <__smakebuf_r+0x1c>
 8008f14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f18:	6023      	str	r3, [r4, #0]
 8008f1a:	6123      	str	r3, [r4, #16]
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	6163      	str	r3, [r4, #20]
 8008f20:	b002      	add	sp, #8
 8008f22:	bd70      	pop	{r4, r5, r6, pc}
 8008f24:	ab01      	add	r3, sp, #4
 8008f26:	466a      	mov	r2, sp
 8008f28:	f7ff ffca 	bl	8008ec0 <__swhatbuf_r>
 8008f2c:	9900      	ldr	r1, [sp, #0]
 8008f2e:	4605      	mov	r5, r0
 8008f30:	4630      	mov	r0, r6
 8008f32:	f7ff fa23 	bl	800837c <_malloc_r>
 8008f36:	b948      	cbnz	r0, 8008f4c <__smakebuf_r+0x44>
 8008f38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f3c:	059a      	lsls	r2, r3, #22
 8008f3e:	d4ef      	bmi.n	8008f20 <__smakebuf_r+0x18>
 8008f40:	f023 0303 	bic.w	r3, r3, #3
 8008f44:	f043 0302 	orr.w	r3, r3, #2
 8008f48:	81a3      	strh	r3, [r4, #12]
 8008f4a:	e7e3      	b.n	8008f14 <__smakebuf_r+0xc>
 8008f4c:	4b0d      	ldr	r3, [pc, #52]	; (8008f84 <__smakebuf_r+0x7c>)
 8008f4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008f50:	89a3      	ldrh	r3, [r4, #12]
 8008f52:	6020      	str	r0, [r4, #0]
 8008f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f58:	81a3      	strh	r3, [r4, #12]
 8008f5a:	9b00      	ldr	r3, [sp, #0]
 8008f5c:	6163      	str	r3, [r4, #20]
 8008f5e:	9b01      	ldr	r3, [sp, #4]
 8008f60:	6120      	str	r0, [r4, #16]
 8008f62:	b15b      	cbz	r3, 8008f7c <__smakebuf_r+0x74>
 8008f64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f68:	4630      	mov	r0, r6
 8008f6a:	f000 f933 	bl	80091d4 <_isatty_r>
 8008f6e:	b128      	cbz	r0, 8008f7c <__smakebuf_r+0x74>
 8008f70:	89a3      	ldrh	r3, [r4, #12]
 8008f72:	f023 0303 	bic.w	r3, r3, #3
 8008f76:	f043 0301 	orr.w	r3, r3, #1
 8008f7a:	81a3      	strh	r3, [r4, #12]
 8008f7c:	89a0      	ldrh	r0, [r4, #12]
 8008f7e:	4305      	orrs	r5, r0
 8008f80:	81a5      	strh	r5, [r4, #12]
 8008f82:	e7cd      	b.n	8008f20 <__smakebuf_r+0x18>
 8008f84:	08008d19 	.word	0x08008d19

08008f88 <__ascii_mbtowc>:
 8008f88:	b082      	sub	sp, #8
 8008f8a:	b901      	cbnz	r1, 8008f8e <__ascii_mbtowc+0x6>
 8008f8c:	a901      	add	r1, sp, #4
 8008f8e:	b142      	cbz	r2, 8008fa2 <__ascii_mbtowc+0x1a>
 8008f90:	b14b      	cbz	r3, 8008fa6 <__ascii_mbtowc+0x1e>
 8008f92:	7813      	ldrb	r3, [r2, #0]
 8008f94:	600b      	str	r3, [r1, #0]
 8008f96:	7812      	ldrb	r2, [r2, #0]
 8008f98:	1e10      	subs	r0, r2, #0
 8008f9a:	bf18      	it	ne
 8008f9c:	2001      	movne	r0, #1
 8008f9e:	b002      	add	sp, #8
 8008fa0:	4770      	bx	lr
 8008fa2:	4610      	mov	r0, r2
 8008fa4:	e7fb      	b.n	8008f9e <__ascii_mbtowc+0x16>
 8008fa6:	f06f 0001 	mvn.w	r0, #1
 8008faa:	e7f8      	b.n	8008f9e <__ascii_mbtowc+0x16>

08008fac <memmove>:
 8008fac:	4288      	cmp	r0, r1
 8008fae:	b510      	push	{r4, lr}
 8008fb0:	eb01 0402 	add.w	r4, r1, r2
 8008fb4:	d902      	bls.n	8008fbc <memmove+0x10>
 8008fb6:	4284      	cmp	r4, r0
 8008fb8:	4623      	mov	r3, r4
 8008fba:	d807      	bhi.n	8008fcc <memmove+0x20>
 8008fbc:	1e43      	subs	r3, r0, #1
 8008fbe:	42a1      	cmp	r1, r4
 8008fc0:	d008      	beq.n	8008fd4 <memmove+0x28>
 8008fc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008fc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008fca:	e7f8      	b.n	8008fbe <memmove+0x12>
 8008fcc:	4402      	add	r2, r0
 8008fce:	4601      	mov	r1, r0
 8008fd0:	428a      	cmp	r2, r1
 8008fd2:	d100      	bne.n	8008fd6 <memmove+0x2a>
 8008fd4:	bd10      	pop	{r4, pc}
 8008fd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008fda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008fde:	e7f7      	b.n	8008fd0 <memmove+0x24>

08008fe0 <__malloc_lock>:
 8008fe0:	4801      	ldr	r0, [pc, #4]	; (8008fe8 <__malloc_lock+0x8>)
 8008fe2:	f7ff bf6b 	b.w	8008ebc <__retarget_lock_acquire_recursive>
 8008fe6:	bf00      	nop
 8008fe8:	20000a78 	.word	0x20000a78

08008fec <__malloc_unlock>:
 8008fec:	4801      	ldr	r0, [pc, #4]	; (8008ff4 <__malloc_unlock+0x8>)
 8008fee:	f7ff bf66 	b.w	8008ebe <__retarget_lock_release_recursive>
 8008ff2:	bf00      	nop
 8008ff4:	20000a78 	.word	0x20000a78

08008ff8 <_realloc_r>:
 8008ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ffa:	4607      	mov	r7, r0
 8008ffc:	4614      	mov	r4, r2
 8008ffe:	460e      	mov	r6, r1
 8009000:	b921      	cbnz	r1, 800900c <_realloc_r+0x14>
 8009002:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009006:	4611      	mov	r1, r2
 8009008:	f7ff b9b8 	b.w	800837c <_malloc_r>
 800900c:	b922      	cbnz	r2, 8009018 <_realloc_r+0x20>
 800900e:	f7ff f965 	bl	80082dc <_free_r>
 8009012:	4625      	mov	r5, r4
 8009014:	4628      	mov	r0, r5
 8009016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009018:	f000 f8fe 	bl	8009218 <_malloc_usable_size_r>
 800901c:	42a0      	cmp	r0, r4
 800901e:	d20f      	bcs.n	8009040 <_realloc_r+0x48>
 8009020:	4621      	mov	r1, r4
 8009022:	4638      	mov	r0, r7
 8009024:	f7ff f9aa 	bl	800837c <_malloc_r>
 8009028:	4605      	mov	r5, r0
 800902a:	2800      	cmp	r0, #0
 800902c:	d0f2      	beq.n	8009014 <_realloc_r+0x1c>
 800902e:	4631      	mov	r1, r6
 8009030:	4622      	mov	r2, r4
 8009032:	f7fe fdb7 	bl	8007ba4 <memcpy>
 8009036:	4631      	mov	r1, r6
 8009038:	4638      	mov	r0, r7
 800903a:	f7ff f94f 	bl	80082dc <_free_r>
 800903e:	e7e9      	b.n	8009014 <_realloc_r+0x1c>
 8009040:	4635      	mov	r5, r6
 8009042:	e7e7      	b.n	8009014 <_realloc_r+0x1c>

08009044 <_raise_r>:
 8009044:	291f      	cmp	r1, #31
 8009046:	b538      	push	{r3, r4, r5, lr}
 8009048:	4604      	mov	r4, r0
 800904a:	460d      	mov	r5, r1
 800904c:	d904      	bls.n	8009058 <_raise_r+0x14>
 800904e:	2316      	movs	r3, #22
 8009050:	6003      	str	r3, [r0, #0]
 8009052:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009056:	bd38      	pop	{r3, r4, r5, pc}
 8009058:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800905a:	b112      	cbz	r2, 8009062 <_raise_r+0x1e>
 800905c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009060:	b94b      	cbnz	r3, 8009076 <_raise_r+0x32>
 8009062:	4620      	mov	r0, r4
 8009064:	f000 f830 	bl	80090c8 <_getpid_r>
 8009068:	462a      	mov	r2, r5
 800906a:	4601      	mov	r1, r0
 800906c:	4620      	mov	r0, r4
 800906e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009072:	f000 b817 	b.w	80090a4 <_kill_r>
 8009076:	2b01      	cmp	r3, #1
 8009078:	d00a      	beq.n	8009090 <_raise_r+0x4c>
 800907a:	1c59      	adds	r1, r3, #1
 800907c:	d103      	bne.n	8009086 <_raise_r+0x42>
 800907e:	2316      	movs	r3, #22
 8009080:	6003      	str	r3, [r0, #0]
 8009082:	2001      	movs	r0, #1
 8009084:	e7e7      	b.n	8009056 <_raise_r+0x12>
 8009086:	2400      	movs	r4, #0
 8009088:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800908c:	4628      	mov	r0, r5
 800908e:	4798      	blx	r3
 8009090:	2000      	movs	r0, #0
 8009092:	e7e0      	b.n	8009056 <_raise_r+0x12>

08009094 <raise>:
 8009094:	4b02      	ldr	r3, [pc, #8]	; (80090a0 <raise+0xc>)
 8009096:	4601      	mov	r1, r0
 8009098:	6818      	ldr	r0, [r3, #0]
 800909a:	f7ff bfd3 	b.w	8009044 <_raise_r>
 800909e:	bf00      	nop
 80090a0:	20000014 	.word	0x20000014

080090a4 <_kill_r>:
 80090a4:	b538      	push	{r3, r4, r5, lr}
 80090a6:	4d07      	ldr	r5, [pc, #28]	; (80090c4 <_kill_r+0x20>)
 80090a8:	2300      	movs	r3, #0
 80090aa:	4604      	mov	r4, r0
 80090ac:	4608      	mov	r0, r1
 80090ae:	4611      	mov	r1, r2
 80090b0:	602b      	str	r3, [r5, #0]
 80090b2:	f7f8 fcef 	bl	8001a94 <_kill>
 80090b6:	1c43      	adds	r3, r0, #1
 80090b8:	d102      	bne.n	80090c0 <_kill_r+0x1c>
 80090ba:	682b      	ldr	r3, [r5, #0]
 80090bc:	b103      	cbz	r3, 80090c0 <_kill_r+0x1c>
 80090be:	6023      	str	r3, [r4, #0]
 80090c0:	bd38      	pop	{r3, r4, r5, pc}
 80090c2:	bf00      	nop
 80090c4:	20000a80 	.word	0x20000a80

080090c8 <_getpid_r>:
 80090c8:	f7f8 bcdc 	b.w	8001a84 <_getpid>

080090cc <__sread>:
 80090cc:	b510      	push	{r4, lr}
 80090ce:	460c      	mov	r4, r1
 80090d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090d4:	f000 f8a8 	bl	8009228 <_read_r>
 80090d8:	2800      	cmp	r0, #0
 80090da:	bfab      	itete	ge
 80090dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80090de:	89a3      	ldrhlt	r3, [r4, #12]
 80090e0:	181b      	addge	r3, r3, r0
 80090e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80090e6:	bfac      	ite	ge
 80090e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80090ea:	81a3      	strhlt	r3, [r4, #12]
 80090ec:	bd10      	pop	{r4, pc}

080090ee <__swrite>:
 80090ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090f2:	461f      	mov	r7, r3
 80090f4:	898b      	ldrh	r3, [r1, #12]
 80090f6:	05db      	lsls	r3, r3, #23
 80090f8:	4605      	mov	r5, r0
 80090fa:	460c      	mov	r4, r1
 80090fc:	4616      	mov	r6, r2
 80090fe:	d505      	bpl.n	800910c <__swrite+0x1e>
 8009100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009104:	2302      	movs	r3, #2
 8009106:	2200      	movs	r2, #0
 8009108:	f000 f874 	bl	80091f4 <_lseek_r>
 800910c:	89a3      	ldrh	r3, [r4, #12]
 800910e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009112:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009116:	81a3      	strh	r3, [r4, #12]
 8009118:	4632      	mov	r2, r6
 800911a:	463b      	mov	r3, r7
 800911c:	4628      	mov	r0, r5
 800911e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009122:	f000 b823 	b.w	800916c <_write_r>

08009126 <__sseek>:
 8009126:	b510      	push	{r4, lr}
 8009128:	460c      	mov	r4, r1
 800912a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800912e:	f000 f861 	bl	80091f4 <_lseek_r>
 8009132:	1c43      	adds	r3, r0, #1
 8009134:	89a3      	ldrh	r3, [r4, #12]
 8009136:	bf15      	itete	ne
 8009138:	6560      	strne	r0, [r4, #84]	; 0x54
 800913a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800913e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009142:	81a3      	strheq	r3, [r4, #12]
 8009144:	bf18      	it	ne
 8009146:	81a3      	strhne	r3, [r4, #12]
 8009148:	bd10      	pop	{r4, pc}

0800914a <__sclose>:
 800914a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800914e:	f000 b81f 	b.w	8009190 <_close_r>

08009152 <__ascii_wctomb>:
 8009152:	b149      	cbz	r1, 8009168 <__ascii_wctomb+0x16>
 8009154:	2aff      	cmp	r2, #255	; 0xff
 8009156:	bf85      	ittet	hi
 8009158:	238a      	movhi	r3, #138	; 0x8a
 800915a:	6003      	strhi	r3, [r0, #0]
 800915c:	700a      	strbls	r2, [r1, #0]
 800915e:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009162:	bf98      	it	ls
 8009164:	2001      	movls	r0, #1
 8009166:	4770      	bx	lr
 8009168:	4608      	mov	r0, r1
 800916a:	4770      	bx	lr

0800916c <_write_r>:
 800916c:	b538      	push	{r3, r4, r5, lr}
 800916e:	4d07      	ldr	r5, [pc, #28]	; (800918c <_write_r+0x20>)
 8009170:	4604      	mov	r4, r0
 8009172:	4608      	mov	r0, r1
 8009174:	4611      	mov	r1, r2
 8009176:	2200      	movs	r2, #0
 8009178:	602a      	str	r2, [r5, #0]
 800917a:	461a      	mov	r2, r3
 800917c:	f7f8 fcc1 	bl	8001b02 <_write>
 8009180:	1c43      	adds	r3, r0, #1
 8009182:	d102      	bne.n	800918a <_write_r+0x1e>
 8009184:	682b      	ldr	r3, [r5, #0]
 8009186:	b103      	cbz	r3, 800918a <_write_r+0x1e>
 8009188:	6023      	str	r3, [r4, #0]
 800918a:	bd38      	pop	{r3, r4, r5, pc}
 800918c:	20000a80 	.word	0x20000a80

08009190 <_close_r>:
 8009190:	b538      	push	{r3, r4, r5, lr}
 8009192:	4d06      	ldr	r5, [pc, #24]	; (80091ac <_close_r+0x1c>)
 8009194:	2300      	movs	r3, #0
 8009196:	4604      	mov	r4, r0
 8009198:	4608      	mov	r0, r1
 800919a:	602b      	str	r3, [r5, #0]
 800919c:	f7f8 fccd 	bl	8001b3a <_close>
 80091a0:	1c43      	adds	r3, r0, #1
 80091a2:	d102      	bne.n	80091aa <_close_r+0x1a>
 80091a4:	682b      	ldr	r3, [r5, #0]
 80091a6:	b103      	cbz	r3, 80091aa <_close_r+0x1a>
 80091a8:	6023      	str	r3, [r4, #0]
 80091aa:	bd38      	pop	{r3, r4, r5, pc}
 80091ac:	20000a80 	.word	0x20000a80

080091b0 <_fstat_r>:
 80091b0:	b538      	push	{r3, r4, r5, lr}
 80091b2:	4d07      	ldr	r5, [pc, #28]	; (80091d0 <_fstat_r+0x20>)
 80091b4:	2300      	movs	r3, #0
 80091b6:	4604      	mov	r4, r0
 80091b8:	4608      	mov	r0, r1
 80091ba:	4611      	mov	r1, r2
 80091bc:	602b      	str	r3, [r5, #0]
 80091be:	f7f8 fcc8 	bl	8001b52 <_fstat>
 80091c2:	1c43      	adds	r3, r0, #1
 80091c4:	d102      	bne.n	80091cc <_fstat_r+0x1c>
 80091c6:	682b      	ldr	r3, [r5, #0]
 80091c8:	b103      	cbz	r3, 80091cc <_fstat_r+0x1c>
 80091ca:	6023      	str	r3, [r4, #0]
 80091cc:	bd38      	pop	{r3, r4, r5, pc}
 80091ce:	bf00      	nop
 80091d0:	20000a80 	.word	0x20000a80

080091d4 <_isatty_r>:
 80091d4:	b538      	push	{r3, r4, r5, lr}
 80091d6:	4d06      	ldr	r5, [pc, #24]	; (80091f0 <_isatty_r+0x1c>)
 80091d8:	2300      	movs	r3, #0
 80091da:	4604      	mov	r4, r0
 80091dc:	4608      	mov	r0, r1
 80091de:	602b      	str	r3, [r5, #0]
 80091e0:	f7f8 fcc7 	bl	8001b72 <_isatty>
 80091e4:	1c43      	adds	r3, r0, #1
 80091e6:	d102      	bne.n	80091ee <_isatty_r+0x1a>
 80091e8:	682b      	ldr	r3, [r5, #0]
 80091ea:	b103      	cbz	r3, 80091ee <_isatty_r+0x1a>
 80091ec:	6023      	str	r3, [r4, #0]
 80091ee:	bd38      	pop	{r3, r4, r5, pc}
 80091f0:	20000a80 	.word	0x20000a80

080091f4 <_lseek_r>:
 80091f4:	b538      	push	{r3, r4, r5, lr}
 80091f6:	4d07      	ldr	r5, [pc, #28]	; (8009214 <_lseek_r+0x20>)
 80091f8:	4604      	mov	r4, r0
 80091fa:	4608      	mov	r0, r1
 80091fc:	4611      	mov	r1, r2
 80091fe:	2200      	movs	r2, #0
 8009200:	602a      	str	r2, [r5, #0]
 8009202:	461a      	mov	r2, r3
 8009204:	f7f8 fcc0 	bl	8001b88 <_lseek>
 8009208:	1c43      	adds	r3, r0, #1
 800920a:	d102      	bne.n	8009212 <_lseek_r+0x1e>
 800920c:	682b      	ldr	r3, [r5, #0]
 800920e:	b103      	cbz	r3, 8009212 <_lseek_r+0x1e>
 8009210:	6023      	str	r3, [r4, #0]
 8009212:	bd38      	pop	{r3, r4, r5, pc}
 8009214:	20000a80 	.word	0x20000a80

08009218 <_malloc_usable_size_r>:
 8009218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800921c:	1f18      	subs	r0, r3, #4
 800921e:	2b00      	cmp	r3, #0
 8009220:	bfbc      	itt	lt
 8009222:	580b      	ldrlt	r3, [r1, r0]
 8009224:	18c0      	addlt	r0, r0, r3
 8009226:	4770      	bx	lr

08009228 <_read_r>:
 8009228:	b538      	push	{r3, r4, r5, lr}
 800922a:	4d07      	ldr	r5, [pc, #28]	; (8009248 <_read_r+0x20>)
 800922c:	4604      	mov	r4, r0
 800922e:	4608      	mov	r0, r1
 8009230:	4611      	mov	r1, r2
 8009232:	2200      	movs	r2, #0
 8009234:	602a      	str	r2, [r5, #0]
 8009236:	461a      	mov	r2, r3
 8009238:	f7f8 fc46 	bl	8001ac8 <_read>
 800923c:	1c43      	adds	r3, r0, #1
 800923e:	d102      	bne.n	8009246 <_read_r+0x1e>
 8009240:	682b      	ldr	r3, [r5, #0]
 8009242:	b103      	cbz	r3, 8009246 <_read_r+0x1e>
 8009244:	6023      	str	r3, [r4, #0]
 8009246:	bd38      	pop	{r3, r4, r5, pc}
 8009248:	20000a80 	.word	0x20000a80
 800924c:	00000000 	.word	0x00000000

08009250 <exp>:
 8009250:	b538      	push	{r3, r4, r5, lr}
 8009252:	ed2d 8b02 	vpush	{d8}
 8009256:	ec55 4b10 	vmov	r4, r5, d0
 800925a:	f000 f849 	bl	80092f0 <__ieee754_exp>
 800925e:	4b22      	ldr	r3, [pc, #136]	; (80092e8 <exp+0x98>)
 8009260:	eeb0 8a40 	vmov.f32	s16, s0
 8009264:	eef0 8a60 	vmov.f32	s17, s1
 8009268:	f993 3000 	ldrsb.w	r3, [r3]
 800926c:	3301      	adds	r3, #1
 800926e:	d012      	beq.n	8009296 <exp+0x46>
 8009270:	ec45 4b10 	vmov	d0, r4, r5
 8009274:	f000 f9b6 	bl	80095e4 <finite>
 8009278:	b168      	cbz	r0, 8009296 <exp+0x46>
 800927a:	a313      	add	r3, pc, #76	; (adr r3, 80092c8 <exp+0x78>)
 800927c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009280:	4620      	mov	r0, r4
 8009282:	4629      	mov	r1, r5
 8009284:	f7f7 fc48 	bl	8000b18 <__aeabi_dcmpgt>
 8009288:	b160      	cbz	r0, 80092a4 <exp+0x54>
 800928a:	f7fd f831 	bl	80062f0 <__errno>
 800928e:	ed9f 8b10 	vldr	d8, [pc, #64]	; 80092d0 <exp+0x80>
 8009292:	2322      	movs	r3, #34	; 0x22
 8009294:	6003      	str	r3, [r0, #0]
 8009296:	eeb0 0a48 	vmov.f32	s0, s16
 800929a:	eef0 0a68 	vmov.f32	s1, s17
 800929e:	ecbd 8b02 	vpop	{d8}
 80092a2:	bd38      	pop	{r3, r4, r5, pc}
 80092a4:	a30c      	add	r3, pc, #48	; (adr r3, 80092d8 <exp+0x88>)
 80092a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092aa:	4620      	mov	r0, r4
 80092ac:	4629      	mov	r1, r5
 80092ae:	f7f7 fc15 	bl	8000adc <__aeabi_dcmplt>
 80092b2:	2800      	cmp	r0, #0
 80092b4:	d0ef      	beq.n	8009296 <exp+0x46>
 80092b6:	f7fd f81b 	bl	80062f0 <__errno>
 80092ba:	2322      	movs	r3, #34	; 0x22
 80092bc:	ed9f 8b08 	vldr	d8, [pc, #32]	; 80092e0 <exp+0x90>
 80092c0:	6003      	str	r3, [r0, #0]
 80092c2:	e7e8      	b.n	8009296 <exp+0x46>
 80092c4:	f3af 8000 	nop.w
 80092c8:	fefa39ef 	.word	0xfefa39ef
 80092cc:	40862e42 	.word	0x40862e42
 80092d0:	00000000 	.word	0x00000000
 80092d4:	7ff00000 	.word	0x7ff00000
 80092d8:	d52d3051 	.word	0xd52d3051
 80092dc:	c0874910 	.word	0xc0874910
	...
 80092e8:	200001e4 	.word	0x200001e4
 80092ec:	00000000 	.word	0x00000000

080092f0 <__ieee754_exp>:
 80092f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092f4:	ec55 4b10 	vmov	r4, r5, d0
 80092f8:	49b1      	ldr	r1, [pc, #708]	; (80095c0 <__ieee754_exp+0x2d0>)
 80092fa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80092fe:	428b      	cmp	r3, r1
 8009300:	ed2d 8b04 	vpush	{d8-d9}
 8009304:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8009308:	d937      	bls.n	800937a <__ieee754_exp+0x8a>
 800930a:	49ae      	ldr	r1, [pc, #696]	; (80095c4 <__ieee754_exp+0x2d4>)
 800930c:	428b      	cmp	r3, r1
 800930e:	d916      	bls.n	800933e <__ieee754_exp+0x4e>
 8009310:	ee10 3a10 	vmov	r3, s0
 8009314:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8009318:	4313      	orrs	r3, r2
 800931a:	d009      	beq.n	8009330 <__ieee754_exp+0x40>
 800931c:	ee10 2a10 	vmov	r2, s0
 8009320:	462b      	mov	r3, r5
 8009322:	4620      	mov	r0, r4
 8009324:	4629      	mov	r1, r5
 8009326:	f7f6 ffb1 	bl	800028c <__adddf3>
 800932a:	4604      	mov	r4, r0
 800932c:	460d      	mov	r5, r1
 800932e:	e000      	b.n	8009332 <__ieee754_exp+0x42>
 8009330:	bb06      	cbnz	r6, 8009374 <__ieee754_exp+0x84>
 8009332:	ecbd 8b04 	vpop	{d8-d9}
 8009336:	ec45 4b10 	vmov	d0, r4, r5
 800933a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800933e:	a38a      	add	r3, pc, #552	; (adr r3, 8009568 <__ieee754_exp+0x278>)
 8009340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009344:	ee10 0a10 	vmov	r0, s0
 8009348:	4629      	mov	r1, r5
 800934a:	f7f7 fbe5 	bl	8000b18 <__aeabi_dcmpgt>
 800934e:	b138      	cbz	r0, 8009360 <__ieee754_exp+0x70>
 8009350:	a387      	add	r3, pc, #540	; (adr r3, 8009570 <__ieee754_exp+0x280>)
 8009352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009356:	4610      	mov	r0, r2
 8009358:	4619      	mov	r1, r3
 800935a:	f7f7 f94d 	bl	80005f8 <__aeabi_dmul>
 800935e:	e7e4      	b.n	800932a <__ieee754_exp+0x3a>
 8009360:	a385      	add	r3, pc, #532	; (adr r3, 8009578 <__ieee754_exp+0x288>)
 8009362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009366:	4620      	mov	r0, r4
 8009368:	4629      	mov	r1, r5
 800936a:	f7f7 fbb7 	bl	8000adc <__aeabi_dcmplt>
 800936e:	2800      	cmp	r0, #0
 8009370:	f000 8087 	beq.w	8009482 <__ieee754_exp+0x192>
 8009374:	2400      	movs	r4, #0
 8009376:	2500      	movs	r5, #0
 8009378:	e7db      	b.n	8009332 <__ieee754_exp+0x42>
 800937a:	4a93      	ldr	r2, [pc, #588]	; (80095c8 <__ieee754_exp+0x2d8>)
 800937c:	4293      	cmp	r3, r2
 800937e:	f240 80ac 	bls.w	80094da <__ieee754_exp+0x1ea>
 8009382:	4a92      	ldr	r2, [pc, #584]	; (80095cc <__ieee754_exp+0x2dc>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d87c      	bhi.n	8009482 <__ieee754_exp+0x192>
 8009388:	4b91      	ldr	r3, [pc, #580]	; (80095d0 <__ieee754_exp+0x2e0>)
 800938a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800938e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009392:	ee10 0a10 	vmov	r0, s0
 8009396:	4629      	mov	r1, r5
 8009398:	f7f6 ff76 	bl	8000288 <__aeabi_dsub>
 800939c:	4b8d      	ldr	r3, [pc, #564]	; (80095d4 <__ieee754_exp+0x2e4>)
 800939e:	00f7      	lsls	r7, r6, #3
 80093a0:	443b      	add	r3, r7
 80093a2:	ed93 7b00 	vldr	d7, [r3]
 80093a6:	f1c6 0a01 	rsb	sl, r6, #1
 80093aa:	4680      	mov	r8, r0
 80093ac:	4689      	mov	r9, r1
 80093ae:	ebaa 0a06 	sub.w	sl, sl, r6
 80093b2:	eeb0 8a47 	vmov.f32	s16, s14
 80093b6:	eef0 8a67 	vmov.f32	s17, s15
 80093ba:	ec53 2b18 	vmov	r2, r3, d8
 80093be:	4640      	mov	r0, r8
 80093c0:	4649      	mov	r1, r9
 80093c2:	f7f6 ff61 	bl	8000288 <__aeabi_dsub>
 80093c6:	4604      	mov	r4, r0
 80093c8:	460d      	mov	r5, r1
 80093ca:	4622      	mov	r2, r4
 80093cc:	462b      	mov	r3, r5
 80093ce:	4620      	mov	r0, r4
 80093d0:	4629      	mov	r1, r5
 80093d2:	f7f7 f911 	bl	80005f8 <__aeabi_dmul>
 80093d6:	a36a      	add	r3, pc, #424	; (adr r3, 8009580 <__ieee754_exp+0x290>)
 80093d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093dc:	4606      	mov	r6, r0
 80093de:	460f      	mov	r7, r1
 80093e0:	f7f7 f90a 	bl	80005f8 <__aeabi_dmul>
 80093e4:	a368      	add	r3, pc, #416	; (adr r3, 8009588 <__ieee754_exp+0x298>)
 80093e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ea:	f7f6 ff4d 	bl	8000288 <__aeabi_dsub>
 80093ee:	4632      	mov	r2, r6
 80093f0:	463b      	mov	r3, r7
 80093f2:	f7f7 f901 	bl	80005f8 <__aeabi_dmul>
 80093f6:	a366      	add	r3, pc, #408	; (adr r3, 8009590 <__ieee754_exp+0x2a0>)
 80093f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093fc:	f7f6 ff46 	bl	800028c <__adddf3>
 8009400:	4632      	mov	r2, r6
 8009402:	463b      	mov	r3, r7
 8009404:	f7f7 f8f8 	bl	80005f8 <__aeabi_dmul>
 8009408:	a363      	add	r3, pc, #396	; (adr r3, 8009598 <__ieee754_exp+0x2a8>)
 800940a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800940e:	f7f6 ff3b 	bl	8000288 <__aeabi_dsub>
 8009412:	4632      	mov	r2, r6
 8009414:	463b      	mov	r3, r7
 8009416:	f7f7 f8ef 	bl	80005f8 <__aeabi_dmul>
 800941a:	a361      	add	r3, pc, #388	; (adr r3, 80095a0 <__ieee754_exp+0x2b0>)
 800941c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009420:	f7f6 ff34 	bl	800028c <__adddf3>
 8009424:	4632      	mov	r2, r6
 8009426:	463b      	mov	r3, r7
 8009428:	f7f7 f8e6 	bl	80005f8 <__aeabi_dmul>
 800942c:	4602      	mov	r2, r0
 800942e:	460b      	mov	r3, r1
 8009430:	4620      	mov	r0, r4
 8009432:	4629      	mov	r1, r5
 8009434:	f7f6 ff28 	bl	8000288 <__aeabi_dsub>
 8009438:	4602      	mov	r2, r0
 800943a:	460b      	mov	r3, r1
 800943c:	4606      	mov	r6, r0
 800943e:	460f      	mov	r7, r1
 8009440:	4620      	mov	r0, r4
 8009442:	4629      	mov	r1, r5
 8009444:	f7f7 f8d8 	bl	80005f8 <__aeabi_dmul>
 8009448:	ec41 0b19 	vmov	d9, r0, r1
 800944c:	f1ba 0f00 	cmp.w	sl, #0
 8009450:	d15d      	bne.n	800950e <__ieee754_exp+0x21e>
 8009452:	2200      	movs	r2, #0
 8009454:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009458:	4630      	mov	r0, r6
 800945a:	4639      	mov	r1, r7
 800945c:	f7f6 ff14 	bl	8000288 <__aeabi_dsub>
 8009460:	4602      	mov	r2, r0
 8009462:	460b      	mov	r3, r1
 8009464:	ec51 0b19 	vmov	r0, r1, d9
 8009468:	f7f7 f9f0 	bl	800084c <__aeabi_ddiv>
 800946c:	4622      	mov	r2, r4
 800946e:	462b      	mov	r3, r5
 8009470:	f7f6 ff0a 	bl	8000288 <__aeabi_dsub>
 8009474:	4602      	mov	r2, r0
 8009476:	460b      	mov	r3, r1
 8009478:	2000      	movs	r0, #0
 800947a:	4957      	ldr	r1, [pc, #348]	; (80095d8 <__ieee754_exp+0x2e8>)
 800947c:	f7f6 ff04 	bl	8000288 <__aeabi_dsub>
 8009480:	e753      	b.n	800932a <__ieee754_exp+0x3a>
 8009482:	4856      	ldr	r0, [pc, #344]	; (80095dc <__ieee754_exp+0x2ec>)
 8009484:	a348      	add	r3, pc, #288	; (adr r3, 80095a8 <__ieee754_exp+0x2b8>)
 8009486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800948a:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800948e:	4629      	mov	r1, r5
 8009490:	4620      	mov	r0, r4
 8009492:	f7f7 f8b1 	bl	80005f8 <__aeabi_dmul>
 8009496:	e9d6 2300 	ldrd	r2, r3, [r6]
 800949a:	f7f6 fef7 	bl	800028c <__adddf3>
 800949e:	f7f7 fb5b 	bl	8000b58 <__aeabi_d2iz>
 80094a2:	4682      	mov	sl, r0
 80094a4:	f7f7 f83e 	bl	8000524 <__aeabi_i2d>
 80094a8:	a341      	add	r3, pc, #260	; (adr r3, 80095b0 <__ieee754_exp+0x2c0>)
 80094aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ae:	4606      	mov	r6, r0
 80094b0:	460f      	mov	r7, r1
 80094b2:	f7f7 f8a1 	bl	80005f8 <__aeabi_dmul>
 80094b6:	4602      	mov	r2, r0
 80094b8:	460b      	mov	r3, r1
 80094ba:	4620      	mov	r0, r4
 80094bc:	4629      	mov	r1, r5
 80094be:	f7f6 fee3 	bl	8000288 <__aeabi_dsub>
 80094c2:	a33d      	add	r3, pc, #244	; (adr r3, 80095b8 <__ieee754_exp+0x2c8>)
 80094c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c8:	4680      	mov	r8, r0
 80094ca:	4689      	mov	r9, r1
 80094cc:	4630      	mov	r0, r6
 80094ce:	4639      	mov	r1, r7
 80094d0:	f7f7 f892 	bl	80005f8 <__aeabi_dmul>
 80094d4:	ec41 0b18 	vmov	d8, r0, r1
 80094d8:	e76f      	b.n	80093ba <__ieee754_exp+0xca>
 80094da:	4a41      	ldr	r2, [pc, #260]	; (80095e0 <__ieee754_exp+0x2f0>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d811      	bhi.n	8009504 <__ieee754_exp+0x214>
 80094e0:	a323      	add	r3, pc, #140	; (adr r3, 8009570 <__ieee754_exp+0x280>)
 80094e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e6:	ee10 0a10 	vmov	r0, s0
 80094ea:	4629      	mov	r1, r5
 80094ec:	f7f6 fece 	bl	800028c <__adddf3>
 80094f0:	4b39      	ldr	r3, [pc, #228]	; (80095d8 <__ieee754_exp+0x2e8>)
 80094f2:	2200      	movs	r2, #0
 80094f4:	f7f7 fb10 	bl	8000b18 <__aeabi_dcmpgt>
 80094f8:	b138      	cbz	r0, 800950a <__ieee754_exp+0x21a>
 80094fa:	4b37      	ldr	r3, [pc, #220]	; (80095d8 <__ieee754_exp+0x2e8>)
 80094fc:	2200      	movs	r2, #0
 80094fe:	4620      	mov	r0, r4
 8009500:	4629      	mov	r1, r5
 8009502:	e710      	b.n	8009326 <__ieee754_exp+0x36>
 8009504:	f04f 0a00 	mov.w	sl, #0
 8009508:	e75f      	b.n	80093ca <__ieee754_exp+0xda>
 800950a:	4682      	mov	sl, r0
 800950c:	e75d      	b.n	80093ca <__ieee754_exp+0xda>
 800950e:	4632      	mov	r2, r6
 8009510:	463b      	mov	r3, r7
 8009512:	2000      	movs	r0, #0
 8009514:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009518:	f7f6 feb6 	bl	8000288 <__aeabi_dsub>
 800951c:	4602      	mov	r2, r0
 800951e:	460b      	mov	r3, r1
 8009520:	ec51 0b19 	vmov	r0, r1, d9
 8009524:	f7f7 f992 	bl	800084c <__aeabi_ddiv>
 8009528:	4602      	mov	r2, r0
 800952a:	460b      	mov	r3, r1
 800952c:	ec51 0b18 	vmov	r0, r1, d8
 8009530:	f7f6 feaa 	bl	8000288 <__aeabi_dsub>
 8009534:	4642      	mov	r2, r8
 8009536:	464b      	mov	r3, r9
 8009538:	f7f6 fea6 	bl	8000288 <__aeabi_dsub>
 800953c:	4602      	mov	r2, r0
 800953e:	460b      	mov	r3, r1
 8009540:	2000      	movs	r0, #0
 8009542:	4925      	ldr	r1, [pc, #148]	; (80095d8 <__ieee754_exp+0x2e8>)
 8009544:	f7f6 fea0 	bl	8000288 <__aeabi_dsub>
 8009548:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800954c:	4592      	cmp	sl, r2
 800954e:	db02      	blt.n	8009556 <__ieee754_exp+0x266>
 8009550:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8009554:	e6e9      	b.n	800932a <__ieee754_exp+0x3a>
 8009556:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800955a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800955e:	2200      	movs	r2, #0
 8009560:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8009564:	e6f9      	b.n	800935a <__ieee754_exp+0x6a>
 8009566:	bf00      	nop
 8009568:	fefa39ef 	.word	0xfefa39ef
 800956c:	40862e42 	.word	0x40862e42
 8009570:	8800759c 	.word	0x8800759c
 8009574:	7e37e43c 	.word	0x7e37e43c
 8009578:	d52d3051 	.word	0xd52d3051
 800957c:	c0874910 	.word	0xc0874910
 8009580:	72bea4d0 	.word	0x72bea4d0
 8009584:	3e663769 	.word	0x3e663769
 8009588:	c5d26bf1 	.word	0xc5d26bf1
 800958c:	3ebbbd41 	.word	0x3ebbbd41
 8009590:	af25de2c 	.word	0xaf25de2c
 8009594:	3f11566a 	.word	0x3f11566a
 8009598:	16bebd93 	.word	0x16bebd93
 800959c:	3f66c16c 	.word	0x3f66c16c
 80095a0:	5555553e 	.word	0x5555553e
 80095a4:	3fc55555 	.word	0x3fc55555
 80095a8:	652b82fe 	.word	0x652b82fe
 80095ac:	3ff71547 	.word	0x3ff71547
 80095b0:	fee00000 	.word	0xfee00000
 80095b4:	3fe62e42 	.word	0x3fe62e42
 80095b8:	35793c76 	.word	0x35793c76
 80095bc:	3dea39ef 	.word	0x3dea39ef
 80095c0:	40862e41 	.word	0x40862e41
 80095c4:	7fefffff 	.word	0x7fefffff
 80095c8:	3fd62e42 	.word	0x3fd62e42
 80095cc:	3ff0a2b1 	.word	0x3ff0a2b1
 80095d0:	08009aa8 	.word	0x08009aa8
 80095d4:	08009ab8 	.word	0x08009ab8
 80095d8:	3ff00000 	.word	0x3ff00000
 80095dc:	08009a98 	.word	0x08009a98
 80095e0:	3e2fffff 	.word	0x3e2fffff

080095e4 <finite>:
 80095e4:	b082      	sub	sp, #8
 80095e6:	ed8d 0b00 	vstr	d0, [sp]
 80095ea:	9801      	ldr	r0, [sp, #4]
 80095ec:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80095f0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80095f4:	0fc0      	lsrs	r0, r0, #31
 80095f6:	b002      	add	sp, #8
 80095f8:	4770      	bx	lr
	...

080095fc <_init>:
 80095fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095fe:	bf00      	nop
 8009600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009602:	bc08      	pop	{r3}
 8009604:	469e      	mov	lr, r3
 8009606:	4770      	bx	lr

08009608 <_fini>:
 8009608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800960a:	bf00      	nop
 800960c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800960e:	bc08      	pop	{r3}
 8009610:	469e      	mov	lr, r3
 8009612:	4770      	bx	lr
