
AIGO_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000847c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08008610  08008610  00018610  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a1c  08008a1c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008a1c  08008a1c  00018a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a24  08008a24  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a24  08008a24  00018a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a28  08008a28  00018a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008a2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000500  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200006dc  200006dc  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fa2e  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000246d  00000000  00000000  0002fc3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000da0  00000000  00000000  000320a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ca8  00000000  00000000  00032e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000225ed  00000000  00000000  00033af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f2bc  00000000  00000000  000560dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc30e  00000000  00000000  00065399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001316a7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000049a4  00000000  00000000  001316fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080085f4 	.word	0x080085f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	080085f4 	.word	0x080085f4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <MX_DMA_Init+0x4c>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a0f      	ldr	r2, [pc, #60]	; (8000f8c <MX_DMA_Init+0x4c>)
 8000f50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b0d      	ldr	r3, [pc, #52]	; (8000f8c <MX_DMA_Init+0x4c>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2100      	movs	r1, #0
 8000f66:	2039      	movs	r0, #57	; 0x39
 8000f68:	f001 fa67 	bl	800243a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000f6c:	2039      	movs	r0, #57	; 0x39
 8000f6e:	f001 fa80 	bl	8002472 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2100      	movs	r1, #0
 8000f76:	2045      	movs	r0, #69	; 0x45
 8000f78:	f001 fa5f 	bl	800243a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000f7c:	2045      	movs	r0, #69	; 0x45
 8000f7e:	f001 fa78 	bl	8002472 <HAL_NVIC_EnableIRQ>

}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40023800 	.word	0x40023800

08000f90 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08c      	sub	sp, #48	; 0x30
 8000f94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f96:	f107 031c 	add.w	r3, r7, #28
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
 8000fa4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61bb      	str	r3, [r7, #24]
 8000faa:	4b68      	ldr	r3, [pc, #416]	; (800114c <MX_GPIO_Init+0x1bc>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a67      	ldr	r2, [pc, #412]	; (800114c <MX_GPIO_Init+0x1bc>)
 8000fb0:	f043 0310 	orr.w	r3, r3, #16
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b65      	ldr	r3, [pc, #404]	; (800114c <MX_GPIO_Init+0x1bc>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0310 	and.w	r3, r3, #16
 8000fbe:	61bb      	str	r3, [r7, #24]
 8000fc0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
 8000fc6:	4b61      	ldr	r3, [pc, #388]	; (800114c <MX_GPIO_Init+0x1bc>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a60      	ldr	r2, [pc, #384]	; (800114c <MX_GPIO_Init+0x1bc>)
 8000fcc:	f043 0304 	orr.w	r3, r3, #4
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b5e      	ldr	r3, [pc, #376]	; (800114c <MX_GPIO_Init+0x1bc>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f003 0304 	and.w	r3, r3, #4
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	4b5a      	ldr	r3, [pc, #360]	; (800114c <MX_GPIO_Init+0x1bc>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4a59      	ldr	r2, [pc, #356]	; (800114c <MX_GPIO_Init+0x1bc>)
 8000fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
 8000fee:	4b57      	ldr	r3, [pc, #348]	; (800114c <MX_GPIO_Init+0x1bc>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	4b53      	ldr	r3, [pc, #332]	; (800114c <MX_GPIO_Init+0x1bc>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a52      	ldr	r2, [pc, #328]	; (800114c <MX_GPIO_Init+0x1bc>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b50      	ldr	r3, [pc, #320]	; (800114c <MX_GPIO_Init+0x1bc>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	4b4c      	ldr	r3, [pc, #304]	; (800114c <MX_GPIO_Init+0x1bc>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a4b      	ldr	r2, [pc, #300]	; (800114c <MX_GPIO_Init+0x1bc>)
 8001020:	f043 0302 	orr.w	r3, r3, #2
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b49      	ldr	r3, [pc, #292]	; (800114c <MX_GPIO_Init+0x1bc>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	60bb      	str	r3, [r7, #8]
 8001030:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	4b45      	ldr	r3, [pc, #276]	; (800114c <MX_GPIO_Init+0x1bc>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a44      	ldr	r2, [pc, #272]	; (800114c <MX_GPIO_Init+0x1bc>)
 800103c:	f043 0308 	orr.w	r3, r3, #8
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b42      	ldr	r3, [pc, #264]	; (800114c <MX_GPIO_Init+0x1bc>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0308 	and.w	r3, r3, #8
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	2138      	movs	r1, #56	; 0x38
 8001052:	483f      	ldr	r0, [pc, #252]	; (8001150 <MX_GPIO_Init+0x1c0>)
 8001054:	f001 ffc6 	bl	8002fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001058:	2200      	movs	r2, #0
 800105a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800105e:	483d      	ldr	r0, [pc, #244]	; (8001154 <MX_GPIO_Init+0x1c4>)
 8001060:	f001 ffc0 	bl	8002fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001064:	2201      	movs	r2, #1
 8001066:	2101      	movs	r1, #1
 8001068:	483a      	ldr	r0, [pc, #232]	; (8001154 <MX_GPIO_Init+0x1c4>)
 800106a:	f001 ffbb 	bl	8002fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001074:	4838      	ldr	r0, [pc, #224]	; (8001158 <MX_GPIO_Init+0x1c8>)
 8001076:	f001 ffb5 	bl	8002fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800107a:	2200      	movs	r2, #0
 800107c:	f44f 6171 	mov.w	r1, #3856	; 0xf10
 8001080:	4836      	ldr	r0, [pc, #216]	; (800115c <MX_GPIO_Init+0x1cc>)
 8001082:	f001 ffaf 	bl	8002fe4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PE4 PE5 */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_4|GPIO_PIN_5;
 8001086:	2338      	movs	r3, #56	; 0x38
 8001088:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108a:	2301      	movs	r3, #1
 800108c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2300      	movs	r3, #0
 8001094:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001096:	f107 031c 	add.w	r3, r7, #28
 800109a:	4619      	mov	r1, r3
 800109c:	482c      	ldr	r0, [pc, #176]	; (8001150 <MX_GPIO_Init+0x1c0>)
 800109e:	f001 fe05 	bl	8002cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|OTG_FS_PowerSwitchOn_Pin;
 80010a2:	f242 0301 	movw	r3, #8193	; 0x2001
 80010a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a8:	2301      	movs	r3, #1
 80010aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b0:	2300      	movs	r3, #0
 80010b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	4619      	mov	r1, r3
 80010ba:	4826      	ldr	r0, [pc, #152]	; (8001154 <MX_GPIO_Init+0x1c4>)
 80010bc:	f001 fdf6 	bl	8002cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80010c0:	2304      	movs	r3, #4
 80010c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c4:	2300      	movs	r3, #0
 80010c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80010cc:	f107 031c 	add.w	r3, r7, #28
 80010d0:	4619      	mov	r1, r3
 80010d2:	4821      	ldr	r0, [pc, #132]	; (8001158 <MX_GPIO_Init+0x1c8>)
 80010d4:	f001 fdea 	bl	8002cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80010d8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80010dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010de:	2301      	movs	r3, #1
 80010e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e6:	2300      	movs	r3, #0
 80010e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ea:	f107 031c 	add.w	r3, r7, #28
 80010ee:	4619      	mov	r1, r3
 80010f0:	4819      	ldr	r0, [pc, #100]	; (8001158 <MX_GPIO_Init+0x1c8>)
 80010f2:	f001 fddb 	bl	8002cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80010f6:	f44f 6371 	mov.w	r3, #3856	; 0xf10
 80010fa:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fc:	2301      	movs	r3, #1
 80010fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001104:	2300      	movs	r3, #0
 8001106:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001108:	f107 031c 	add.w	r3, r7, #28
 800110c:	4619      	mov	r1, r3
 800110e:	4813      	ldr	r0, [pc, #76]	; (800115c <MX_GPIO_Init+0x1cc>)
 8001110:	f001 fdcc 	bl	8002cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001114:	2320      	movs	r3, #32
 8001116:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001118:	2300      	movs	r3, #0
 800111a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001120:	f107 031c 	add.w	r3, r7, #28
 8001124:	4619      	mov	r1, r3
 8001126:	480d      	ldr	r0, [pc, #52]	; (800115c <MX_GPIO_Init+0x1cc>)
 8001128:	f001 fdc0 	bl	8002cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800112c:	2302      	movs	r3, #2
 800112e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001130:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <MX_GPIO_Init+0x1d0>)
 8001132:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001138:	f107 031c 	add.w	r3, r7, #28
 800113c:	4619      	mov	r1, r3
 800113e:	4804      	ldr	r0, [pc, #16]	; (8001150 <MX_GPIO_Init+0x1c0>)
 8001140:	f001 fdb4 	bl	8002cac <HAL_GPIO_Init>

}
 8001144:	bf00      	nop
 8001146:	3730      	adds	r7, #48	; 0x30
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40023800 	.word	0x40023800
 8001150:	40021000 	.word	0x40021000
 8001154:	40020800 	.word	0x40020800
 8001158:	40020400 	.word	0x40020400
 800115c:	40020c00 	.word	0x40020c00
 8001160:	10120000 	.word	0x10120000

08001164 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001168:	f000 fff6 	bl	8002158 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800116c:	f000 f88a 	bl	8001284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001170:	f7ff ff0e 	bl	8000f90 <MX_GPIO_Init>
  MX_DMA_Init();
 8001174:	f7ff fee4 	bl	8000f40 <MX_DMA_Init>
  MX_TIM1_Init();
 8001178:	f000 fb1c 	bl	80017b4 <MX_TIM1_Init>
  MX_TIM2_Init();
 800117c:	f000 fbde 	bl	800193c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001180:	f000 fc30 	bl	80019e4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001184:	f000 fc82 	bl	8001a8c <MX_TIM4_Init>
  MX_TIM5_Init();
 8001188:	f000 fcd4 	bl	8001b34 <MX_TIM5_Init>
  MX_TIM6_Init();
 800118c:	f000 fd26 	bl	8001bdc <MX_TIM6_Init>
  MX_USART6_UART_Init();
 8001190:	f000 fed6 	bl	8001f40 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 8001194:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001198:	f001 f850 	bl	800223c <HAL_Delay>
  Initialize_Count();
 800119c:	f000 f8dc 	bl	8001358 <Initialize_Count>
  HAL_UART_Receive_DMA(&huart6, rx_data, 10);
 80011a0:	220a      	movs	r2, #10
 80011a2:	492b      	ldr	r1, [pc, #172]	; (8001250 <main+0xec>)
 80011a4:	482b      	ldr	r0, [pc, #172]	; (8001254 <main+0xf0>)
 80011a6:	f003 fcef 	bl	8004b88 <HAL_UART_Receive_DMA>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80011aa:	213c      	movs	r1, #60	; 0x3c
 80011ac:	482a      	ldr	r0, [pc, #168]	; (8001258 <main+0xf4>)
 80011ae:	f002 fcf5 	bl	8003b9c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80011b2:	213c      	movs	r1, #60	; 0x3c
 80011b4:	4829      	ldr	r0, [pc, #164]	; (800125c <main+0xf8>)
 80011b6:	f002 fcf1 	bl	8003b9c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80011ba:	213c      	movs	r1, #60	; 0x3c
 80011bc:	4828      	ldr	r0, [pc, #160]	; (8001260 <main+0xfc>)
 80011be:	f002 fced 	bl	8003b9c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 80011c2:	213c      	movs	r1, #60	; 0x3c
 80011c4:	4827      	ldr	r0, [pc, #156]	; (8001264 <main+0x100>)
 80011c6:	f002 fce9 	bl	8003b9c <HAL_TIM_Encoder_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  CntR = (TIM3 -> CNT >> 3) + (TIM4 -> CNT >> 3);
 80011ca:	4b27      	ldr	r3, [pc, #156]	; (8001268 <main+0x104>)
 80011cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ce:	08db      	lsrs	r3, r3, #3
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	4b26      	ldr	r3, [pc, #152]	; (800126c <main+0x108>)
 80011d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d6:	08db      	lsrs	r3, r3, #3
 80011d8:	b29b      	uxth	r3, r3
 80011da:	4413      	add	r3, r2
 80011dc:	b29a      	uxth	r2, r3
 80011de:	4b24      	ldr	r3, [pc, #144]	; (8001270 <main+0x10c>)
 80011e0:	801a      	strh	r2, [r3, #0]
	  CntL = (TIM2 -> CNT >> 3) + (TIM5 -> CNT >> 3);
 80011e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e8:	08db      	lsrs	r3, r3, #3
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	4b21      	ldr	r3, [pc, #132]	; (8001274 <main+0x110>)
 80011ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f0:	08db      	lsrs	r3, r3, #3
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	4413      	add	r3, r2
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	4b1f      	ldr	r3, [pc, #124]	; (8001278 <main+0x114>)
 80011fa:	801a      	strh	r2, [r3, #0]

	  Calculate_Velocity(CntR, VelR);
 80011fc:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <main+0x10c>)
 80011fe:	881b      	ldrh	r3, [r3, #0]
 8001200:	4a1e      	ldr	r2, [pc, #120]	; (800127c <main+0x118>)
 8001202:	edd2 7a00 	vldr	s15, [r2]
 8001206:	eeb0 0a67 	vmov.f32	s0, s15
 800120a:	4618      	mov	r0, r3
 800120c:	f000 f8c0 	bl	8001390 <Calculate_Velocity>
	  Calculate_Velocity(CntL, VelL);
 8001210:	4b19      	ldr	r3, [pc, #100]	; (8001278 <main+0x114>)
 8001212:	881b      	ldrh	r3, [r3, #0]
 8001214:	4a1a      	ldr	r2, [pc, #104]	; (8001280 <main+0x11c>)
 8001216:	edd2 7a00 	vldr	s15, [r2]
 800121a:	eeb0 0a67 	vmov.f32	s0, s15
 800121e:	4618      	mov	r0, r3
 8001220:	f000 f8b6 	bl	8001390 <Calculate_Velocity>

	  Transmit_Velocity(VelL);
 8001224:	4b16      	ldr	r3, [pc, #88]	; (8001280 <main+0x11c>)
 8001226:	edd3 7a00 	vldr	s15, [r3]
 800122a:	eeb0 0a67 	vmov.f32	s0, s15
 800122e:	f000 f92f 	bl	8001490 <Transmit_Velocity>
	  Transmit_Velocity(VelR);
 8001232:	4b12      	ldr	r3, [pc, #72]	; (800127c <main+0x118>)
 8001234:	edd3 7a00 	vldr	s15, [r3]
 8001238:	eeb0 0a67 	vmov.f32	s0, s15
 800123c:	f000 f928 	bl	8001490 <Transmit_Velocity>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Initialize_Count();
 8001240:	f000 f88a 	bl	8001358 <Initialize_Count>
	  HAL_Delay(500);
 8001244:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001248:	f000 fff8 	bl	800223c <HAL_Delay>
	  CntR = (TIM3 -> CNT >> 3) + (TIM4 -> CNT >> 3);
 800124c:	e7bd      	b.n	80011ca <main+0x66>
 800124e:	bf00      	nop
 8001250:	200001f8 	.word	0x200001f8
 8001254:	20000684 	.word	0x20000684
 8001258:	2000057c 	.word	0x2000057c
 800125c:	200004a4 	.word	0x200004a4
 8001260:	20000414 	.word	0x20000414
 8001264:	2000045c 	.word	0x2000045c
 8001268:	40000400 	.word	0x40000400
 800126c:	40000800 	.word	0x40000800
 8001270:	200003fe 	.word	0x200003fe
 8001274:	40000c00 	.word	0x40000c00
 8001278:	200003fc 	.word	0x200003fc
 800127c:	20000404 	.word	0x20000404
 8001280:	20000400 	.word	0x20000400

08001284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b094      	sub	sp, #80	; 0x50
 8001288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800128a:	f107 0320 	add.w	r3, r7, #32
 800128e:	2230      	movs	r2, #48	; 0x30
 8001290:	2100      	movs	r1, #0
 8001292:	4618      	mov	r0, r3
 8001294:	f004 fb12 	bl	80058bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001298:	f107 030c 	add.w	r3, r7, #12
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a8:	2300      	movs	r3, #0
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	4b28      	ldr	r3, [pc, #160]	; (8001350 <SystemClock_Config+0xcc>)
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	4a27      	ldr	r2, [pc, #156]	; (8001350 <SystemClock_Config+0xcc>)
 80012b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b6:	6413      	str	r3, [r2, #64]	; 0x40
 80012b8:	4b25      	ldr	r3, [pc, #148]	; (8001350 <SystemClock_Config+0xcc>)
 80012ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012c4:	2300      	movs	r3, #0
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	4b22      	ldr	r3, [pc, #136]	; (8001354 <SystemClock_Config+0xd0>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a21      	ldr	r2, [pc, #132]	; (8001354 <SystemClock_Config+0xd0>)
 80012ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	4b1f      	ldr	r3, [pc, #124]	; (8001354 <SystemClock_Config+0xd0>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012e0:	2301      	movs	r3, #1
 80012e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ea:	2302      	movs	r3, #2
 80012ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012f4:	2304      	movs	r3, #4
 80012f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80012f8:	23a8      	movs	r3, #168	; 0xa8
 80012fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012fc:	2302      	movs	r3, #2
 80012fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001300:	2303      	movs	r3, #3
 8001302:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001304:	f107 0320 	add.w	r3, r7, #32
 8001308:	4618      	mov	r0, r3
 800130a:	f001 fe85 	bl	8003018 <HAL_RCC_OscConfig>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001314:	f000 f8f6 	bl	8001504 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001318:	230f      	movs	r3, #15
 800131a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800131c:	2302      	movs	r3, #2
 800131e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001324:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001328:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800132a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800132e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001330:	f107 030c 	add.w	r3, r7, #12
 8001334:	2105      	movs	r1, #5
 8001336:	4618      	mov	r0, r3
 8001338:	f002 f8e6 	bl	8003508 <HAL_RCC_ClockConfig>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001342:	f000 f8df 	bl	8001504 <Error_Handler>
  }
}
 8001346:	bf00      	nop
 8001348:	3750      	adds	r7, #80	; 0x50
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40023800 	.word	0x40023800
 8001354:	40007000 	.word	0x40007000

08001358 <Initialize_Count>:

/* USER CODE BEGIN 4 */
void Initialize_Count(){
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
	TIM2 -> CNT = 0;
 800135c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001360:	2200      	movs	r2, #0
 8001362:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3 -> CNT = 0;
 8001364:	4b06      	ldr	r3, [pc, #24]	; (8001380 <Initialize_Count+0x28>)
 8001366:	2200      	movs	r2, #0
 8001368:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4 -> CNT = 0;
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <Initialize_Count+0x2c>)
 800136c:	2200      	movs	r2, #0
 800136e:	625a      	str	r2, [r3, #36]	; 0x24
	TIM5 -> CNT = 0;
 8001370:	4b05      	ldr	r3, [pc, #20]	; (8001388 <Initialize_Count+0x30>)
 8001372:	2200      	movs	r2, #0
 8001374:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	40000400 	.word	0x40000400
 8001384:	40000800 	.word	0x40000800
 8001388:	40000c00 	.word	0x40000c00
 800138c:	00000000 	.word	0x00000000

08001390 <Calculate_Velocity>:
void Calculate_Velocity(uint16_t Cnt, float Vel){
 8001390:	b5b0      	push	{r4, r5, r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	ed87 0a00 	vstr	s0, [r7]
 800139c:	80fb      	strh	r3, [r7, #6]
	//Cnt > 2047 : Reverse, Else : Forward
	//Velocity : Meter per Second
	if(Cnt > 2047){
 800139e:	88fb      	ldrh	r3, [r7, #6]
 80013a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80013a4:	d334      	bcc.n	8001410 <Calculate_Velocity+0x80>
		Cnt = 4096 - Cnt;
 80013a6:	88fb      	ldrh	r3, [r7, #6]
 80013a8:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80013ac:	80fb      	strh	r3, [r7, #6]
		Vel = ((-1) * Rad * Cnt * 3.14) / (Cnt_Per_Rotation * 0.5);
 80013ae:	eddf 7a36 	vldr	s15, [pc, #216]	; 8001488 <Calculate_Velocity+0xf8>
 80013b2:	eeb1 7a67 	vneg.f32	s14, s15
 80013b6:	88fb      	ldrh	r3, [r7, #6]
 80013b8:	ee07 3a90 	vmov	s15, r3
 80013bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013c4:	ee17 0a90 	vmov	r0, s15
 80013c8:	f7ff f8be 	bl	8000548 <__aeabi_f2d>
 80013cc:	a32a      	add	r3, pc, #168	; (adr r3, 8001478 <Calculate_Velocity+0xe8>)
 80013ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d2:	f7ff f911 	bl	80005f8 <__aeabi_dmul>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4614      	mov	r4, r2
 80013dc:	461d      	mov	r5, r3
 80013de:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff f89e 	bl	8000524 <__aeabi_i2d>
 80013e8:	f04f 0200 	mov.w	r2, #0
 80013ec:	4b27      	ldr	r3, [pc, #156]	; (800148c <Calculate_Velocity+0xfc>)
 80013ee:	f7ff f903 	bl	80005f8 <__aeabi_dmul>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	4620      	mov	r0, r4
 80013f8:	4629      	mov	r1, r5
 80013fa:	f7ff fa27 	bl	800084c <__aeabi_ddiv>
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	4610      	mov	r0, r2
 8001404:	4619      	mov	r1, r3
 8001406:	f7ff fbcf 	bl	8000ba8 <__aeabi_d2f>
 800140a:	4603      	mov	r3, r0
 800140c:	603b      	str	r3, [r7, #0]
	}
	else
		Vel = (Rad * Cnt * 3.14) / (Cnt_Per_Rotation * 0.1);
}
 800140e:	e02d      	b.n	800146c <Calculate_Velocity+0xdc>
		Vel = (Rad * Cnt * 3.14) / (Cnt_Per_Rotation * 0.1);
 8001410:	88fb      	ldrh	r3, [r7, #6]
 8001412:	ee07 3a90 	vmov	s15, r3
 8001416:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800141a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001488 <Calculate_Velocity+0xf8>
 800141e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001422:	ee17 0a90 	vmov	r0, s15
 8001426:	f7ff f88f 	bl	8000548 <__aeabi_f2d>
 800142a:	a313      	add	r3, pc, #76	; (adr r3, 8001478 <Calculate_Velocity+0xe8>)
 800142c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001430:	f7ff f8e2 	bl	80005f8 <__aeabi_dmul>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	4614      	mov	r4, r2
 800143a:	461d      	mov	r5, r3
 800143c:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff f86f 	bl	8000524 <__aeabi_i2d>
 8001446:	a30e      	add	r3, pc, #56	; (adr r3, 8001480 <Calculate_Velocity+0xf0>)
 8001448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144c:	f7ff f8d4 	bl	80005f8 <__aeabi_dmul>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	4620      	mov	r0, r4
 8001456:	4629      	mov	r1, r5
 8001458:	f7ff f9f8 	bl	800084c <__aeabi_ddiv>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	f7ff fba0 	bl	8000ba8 <__aeabi_d2f>
 8001468:	4603      	mov	r3, r0
 800146a:	603b      	str	r3, [r7, #0]
}
 800146c:	bf00      	nop
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bdb0      	pop	{r4, r5, r7, pc}
 8001474:	f3af 8000 	nop.w
 8001478:	51eb851f 	.word	0x51eb851f
 800147c:	40091eb8 	.word	0x40091eb8
 8001480:	9999999a 	.word	0x9999999a
 8001484:	3fb99999 	.word	0x3fb99999
 8001488:	3dae147b 	.word	0x3dae147b
 800148c:	3fe00000 	.word	0x3fe00000

08001490 <Transmit_Velocity>:
void Transmit_Velocity(float Vel){
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	ed87 0a01 	vstr	s0, [r7, #4]
	sprintf(data, "%f\n\r", Vel);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff f854 	bl	8000548 <__aeabi_f2d>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	4906      	ldr	r1, [pc, #24]	; (80014c0 <Transmit_Velocity+0x30>)
 80014a6:	4807      	ldr	r0, [pc, #28]	; (80014c4 <Transmit_Velocity+0x34>)
 80014a8:	f004 fe7a 	bl	80061a0 <siprintf>
	HAL_UART_Transmit_DMA(&huart6, (uint8_t*)data, 512);
 80014ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014b0:	4904      	ldr	r1, [pc, #16]	; (80014c4 <Transmit_Velocity+0x34>)
 80014b2:	4805      	ldr	r0, [pc, #20]	; (80014c8 <Transmit_Velocity+0x38>)
 80014b4:	f003 fafc 	bl	8004ab0 <HAL_UART_Transmit_DMA>
}
 80014b8:	bf00      	nop
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	08008610 	.word	0x08008610
 80014c4:	200001fc 	.word	0x200001fc
 80014c8:	20000684 	.word	0x20000684

080014cc <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]

}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit_DMA(&huart6, rx_data, 10);
 80014e8:	220a      	movs	r2, #10
 80014ea:	4904      	ldr	r1, [pc, #16]	; (80014fc <HAL_UART_RxCpltCallback+0x1c>)
 80014ec:	4804      	ldr	r0, [pc, #16]	; (8001500 <HAL_UART_RxCpltCallback+0x20>)
 80014ee:	f003 fadf 	bl	8004ab0 <HAL_UART_Transmit_DMA>
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	200001f8 	.word	0x200001f8
 8001500:	20000684 	.word	0x20000684

08001504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001508:	b672      	cpsid	i
}
 800150a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800150c:	e7fe      	b.n	800150c <Error_Handler+0x8>
	...

08001510 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	607b      	str	r3, [r7, #4]
 800151a:	4b10      	ldr	r3, [pc, #64]	; (800155c <HAL_MspInit+0x4c>)
 800151c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151e:	4a0f      	ldr	r2, [pc, #60]	; (800155c <HAL_MspInit+0x4c>)
 8001520:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001524:	6453      	str	r3, [r2, #68]	; 0x44
 8001526:	4b0d      	ldr	r3, [pc, #52]	; (800155c <HAL_MspInit+0x4c>)
 8001528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800152e:	607b      	str	r3, [r7, #4]
 8001530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	603b      	str	r3, [r7, #0]
 8001536:	4b09      	ldr	r3, [pc, #36]	; (800155c <HAL_MspInit+0x4c>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	4a08      	ldr	r2, [pc, #32]	; (800155c <HAL_MspInit+0x4c>)
 800153c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001540:	6413      	str	r3, [r2, #64]	; 0x40
 8001542:	4b06      	ldr	r3, [pc, #24]	; (800155c <HAL_MspInit+0x4c>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154a:	603b      	str	r3, [r7, #0]
 800154c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800154e:	2007      	movs	r0, #7
 8001550:	f000 ff68 	bl	8002424 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001554:	bf00      	nop
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40023800 	.word	0x40023800

08001560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001564:	e7fe      	b.n	8001564 <NMI_Handler+0x4>

08001566 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800156a:	e7fe      	b.n	800156a <HardFault_Handler+0x4>

0800156c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001570:	e7fe      	b.n	8001570 <MemManage_Handler+0x4>

08001572 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001576:	e7fe      	b.n	8001576 <BusFault_Handler+0x4>

08001578 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800157c:	e7fe      	b.n	800157c <UsageFault_Handler+0x4>

0800157e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ac:	f000 fe26 	bl	80021fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015b8:	4802      	ldr	r0, [pc, #8]	; (80015c4 <TIM6_DAC_IRQHandler+0x10>)
 80015ba:	f002 fb7d 	bl	8003cb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	200004ec 	.word	0x200004ec

080015c8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80015cc:	4802      	ldr	r0, [pc, #8]	; (80015d8 <DMA2_Stream1_IRQHandler+0x10>)
 80015ce:	f001 f903 	bl	80027d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	200005c4 	.word	0x200005c4

080015dc <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80015e0:	4802      	ldr	r0, [pc, #8]	; (80015ec <DMA2_Stream6_IRQHandler+0x10>)
 80015e2:	f001 f8f9 	bl	80027d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000624 	.word	0x20000624

080015f0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80015f4:	4802      	ldr	r0, [pc, #8]	; (8001600 <USART6_IRQHandler+0x10>)
 80015f6:	f003 faf7 	bl	8004be8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000684 	.word	0x20000684

08001604 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
	return 1;
 8001608:	2301      	movs	r3, #1
}
 800160a:	4618      	mov	r0, r3
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <_kill>:

int _kill(int pid, int sig)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800161e:	f004 f923 	bl	8005868 <__errno>
 8001622:	4603      	mov	r3, r0
 8001624:	2216      	movs	r2, #22
 8001626:	601a      	str	r2, [r3, #0]
	return -1;
 8001628:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800162c:	4618      	mov	r0, r3
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <_exit>:

void _exit (int status)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800163c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff ffe7 	bl	8001614 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001646:	e7fe      	b.n	8001646 <_exit+0x12>

08001648 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	e00a      	b.n	8001670 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800165a:	f3af 8000 	nop.w
 800165e:	4601      	mov	r1, r0
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	1c5a      	adds	r2, r3, #1
 8001664:	60ba      	str	r2, [r7, #8]
 8001666:	b2ca      	uxtb	r2, r1
 8001668:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	3301      	adds	r3, #1
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	697a      	ldr	r2, [r7, #20]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	429a      	cmp	r2, r3
 8001676:	dbf0      	blt.n	800165a <_read+0x12>
	}

return len;
 8001678:	687b      	ldr	r3, [r7, #4]
}
 800167a:	4618      	mov	r0, r3
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b086      	sub	sp, #24
 8001686:	af00      	add	r7, sp, #0
 8001688:	60f8      	str	r0, [r7, #12]
 800168a:	60b9      	str	r1, [r7, #8]
 800168c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	e009      	b.n	80016a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	60ba      	str	r2, [r7, #8]
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	3301      	adds	r3, #1
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	697a      	ldr	r2, [r7, #20]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	dbf1      	blt.n	8001694 <_write+0x12>
	}
	return len;
 80016b0:	687b      	ldr	r3, [r7, #4]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <_close>:

int _close(int file)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b083      	sub	sp, #12
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
	return -1;
 80016c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
 80016da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016e2:	605a      	str	r2, [r3, #4]
	return 0;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <_isatty>:

int _isatty(int file)
{
 80016f2:	b480      	push	{r7}
 80016f4:	b083      	sub	sp, #12
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
	return 1;
 80016fa:	2301      	movs	r3, #1
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
	return 0;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
	...

08001724 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800172c:	4a14      	ldr	r2, [pc, #80]	; (8001780 <_sbrk+0x5c>)
 800172e:	4b15      	ldr	r3, [pc, #84]	; (8001784 <_sbrk+0x60>)
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001738:	4b13      	ldr	r3, [pc, #76]	; (8001788 <_sbrk+0x64>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d102      	bne.n	8001746 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001740:	4b11      	ldr	r3, [pc, #68]	; (8001788 <_sbrk+0x64>)
 8001742:	4a12      	ldr	r2, [pc, #72]	; (800178c <_sbrk+0x68>)
 8001744:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001746:	4b10      	ldr	r3, [pc, #64]	; (8001788 <_sbrk+0x64>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	429a      	cmp	r2, r3
 8001752:	d207      	bcs.n	8001764 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001754:	f004 f888 	bl	8005868 <__errno>
 8001758:	4603      	mov	r3, r0
 800175a:	220c      	movs	r2, #12
 800175c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800175e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001762:	e009      	b.n	8001778 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001764:	4b08      	ldr	r3, [pc, #32]	; (8001788 <_sbrk+0x64>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800176a:	4b07      	ldr	r3, [pc, #28]	; (8001788 <_sbrk+0x64>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4413      	add	r3, r2
 8001772:	4a05      	ldr	r2, [pc, #20]	; (8001788 <_sbrk+0x64>)
 8001774:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001776:	68fb      	ldr	r3, [r7, #12]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20020000 	.word	0x20020000
 8001784:	00000400 	.word	0x00000400
 8001788:	20000408 	.word	0x20000408
 800178c:	200006e0 	.word	0x200006e0

08001790 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <SystemInit+0x20>)
 8001796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800179a:	4a05      	ldr	r2, [pc, #20]	; (80017b0 <SystemInit+0x20>)
 800179c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b096      	sub	sp, #88	; 0x58
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]
 80017c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	605a      	str	r2, [r3, #4]
 80017dc:	609a      	str	r2, [r3, #8]
 80017de:	60da      	str	r2, [r3, #12]
 80017e0:	611a      	str	r2, [r3, #16]
 80017e2:	615a      	str	r2, [r3, #20]
 80017e4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017e6:	1d3b      	adds	r3, r7, #4
 80017e8:	2220      	movs	r2, #32
 80017ea:	2100      	movs	r1, #0
 80017ec:	4618      	mov	r0, r3
 80017ee:	f004 f865 	bl	80058bc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017f2:	4b50      	ldr	r3, [pc, #320]	; (8001934 <MX_TIM1_Init+0x180>)
 80017f4:	4a50      	ldr	r2, [pc, #320]	; (8001938 <MX_TIM1_Init+0x184>)
 80017f6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 80017f8:	4b4e      	ldr	r3, [pc, #312]	; (8001934 <MX_TIM1_Init+0x180>)
 80017fa:	22a7      	movs	r2, #167	; 0xa7
 80017fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017fe:	4b4d      	ldr	r3, [pc, #308]	; (8001934 <MX_TIM1_Init+0x180>)
 8001800:	2200      	movs	r2, #0
 8001802:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8001804:	4b4b      	ldr	r3, [pc, #300]	; (8001934 <MX_TIM1_Init+0x180>)
 8001806:	f242 720f 	movw	r2, #9999	; 0x270f
 800180a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800180c:	4b49      	ldr	r3, [pc, #292]	; (8001934 <MX_TIM1_Init+0x180>)
 800180e:	2200      	movs	r2, #0
 8001810:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001812:	4b48      	ldr	r3, [pc, #288]	; (8001934 <MX_TIM1_Init+0x180>)
 8001814:	2200      	movs	r2, #0
 8001816:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001818:	4b46      	ldr	r3, [pc, #280]	; (8001934 <MX_TIM1_Init+0x180>)
 800181a:	2200      	movs	r2, #0
 800181c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800181e:	4845      	ldr	r0, [pc, #276]	; (8001934 <MX_TIM1_Init+0x180>)
 8001820:	f002 f86e 	bl	8003900 <HAL_TIM_Base_Init>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800182a:	f7ff fe6b 	bl	8001504 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800182e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001832:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001834:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001838:	4619      	mov	r1, r3
 800183a:	483e      	ldr	r0, [pc, #248]	; (8001934 <MX_TIM1_Init+0x180>)
 800183c:	f002 fc02 	bl	8004044 <HAL_TIM_ConfigClockSource>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001846:	f7ff fe5d 	bl	8001504 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800184a:	483a      	ldr	r0, [pc, #232]	; (8001934 <MX_TIM1_Init+0x180>)
 800184c:	f002 f8a7 	bl	800399e <HAL_TIM_PWM_Init>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001856:	f7ff fe55 	bl	8001504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800185a:	2300      	movs	r3, #0
 800185c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800185e:	2300      	movs	r3, #0
 8001860:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001862:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001866:	4619      	mov	r1, r3
 8001868:	4832      	ldr	r0, [pc, #200]	; (8001934 <MX_TIM1_Init+0x180>)
 800186a:	f002 fff1 	bl	8004850 <HAL_TIMEx_MasterConfigSynchronization>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001874:	f7ff fe46 	bl	8001504 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001878:	2360      	movs	r3, #96	; 0x60
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001880:	2300      	movs	r3, #0
 8001882:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001884:	2300      	movs	r3, #0
 8001886:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001888:	2300      	movs	r3, #0
 800188a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800188c:	2300      	movs	r3, #0
 800188e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001890:	2300      	movs	r3, #0
 8001892:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001898:	2200      	movs	r2, #0
 800189a:	4619      	mov	r1, r3
 800189c:	4825      	ldr	r0, [pc, #148]	; (8001934 <MX_TIM1_Init+0x180>)
 800189e:	f002 fb13 	bl	8003ec8 <HAL_TIM_PWM_ConfigChannel>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80018a8:	f7ff fe2c 	bl	8001504 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b0:	2204      	movs	r2, #4
 80018b2:	4619      	mov	r1, r3
 80018b4:	481f      	ldr	r0, [pc, #124]	; (8001934 <MX_TIM1_Init+0x180>)
 80018b6:	f002 fb07 	bl	8003ec8 <HAL_TIM_PWM_ConfigChannel>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80018c0:	f7ff fe20 	bl	8001504 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018c8:	2208      	movs	r2, #8
 80018ca:	4619      	mov	r1, r3
 80018cc:	4819      	ldr	r0, [pc, #100]	; (8001934 <MX_TIM1_Init+0x180>)
 80018ce:	f002 fafb 	bl	8003ec8 <HAL_TIM_PWM_ConfigChannel>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80018d8:	f7ff fe14 	bl	8001504 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e0:	220c      	movs	r2, #12
 80018e2:	4619      	mov	r1, r3
 80018e4:	4813      	ldr	r0, [pc, #76]	; (8001934 <MX_TIM1_Init+0x180>)
 80018e6:	f002 faef 	bl	8003ec8 <HAL_TIM_PWM_ConfigChannel>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80018f0:	f7ff fe08 	bl	8001504 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018f4:	2300      	movs	r3, #0
 80018f6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018f8:	2300      	movs	r3, #0
 80018fa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018fc:	2300      	movs	r3, #0
 80018fe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001900:	2300      	movs	r3, #0
 8001902:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001908:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800190c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800190e:	2300      	movs	r3, #0
 8001910:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001912:	1d3b      	adds	r3, r7, #4
 8001914:	4619      	mov	r1, r3
 8001916:	4807      	ldr	r0, [pc, #28]	; (8001934 <MX_TIM1_Init+0x180>)
 8001918:	f003 f816 	bl	8004948 <HAL_TIMEx_ConfigBreakDeadTime>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8001922:	f7ff fdef 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001926:	4803      	ldr	r0, [pc, #12]	; (8001934 <MX_TIM1_Init+0x180>)
 8001928:	f000 fad0 	bl	8001ecc <HAL_TIM_MspPostInit>

}
 800192c:	bf00      	nop
 800192e:	3758      	adds	r7, #88	; 0x58
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20000534 	.word	0x20000534
 8001938:	40010000 	.word	0x40010000

0800193c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08c      	sub	sp, #48	; 0x30
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001942:	f107 030c 	add.w	r3, r7, #12
 8001946:	2224      	movs	r2, #36	; 0x24
 8001948:	2100      	movs	r1, #0
 800194a:	4618      	mov	r0, r3
 800194c:	f003 ffb6 	bl	80058bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001950:	1d3b      	adds	r3, r7, #4
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001958:	4b21      	ldr	r3, [pc, #132]	; (80019e0 <MX_TIM2_Init+0xa4>)
 800195a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800195e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001960:	4b1f      	ldr	r3, [pc, #124]	; (80019e0 <MX_TIM2_Init+0xa4>)
 8001962:	2200      	movs	r2, #0
 8001964:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001966:	4b1e      	ldr	r3, [pc, #120]	; (80019e0 <MX_TIM2_Init+0xa4>)
 8001968:	2200      	movs	r2, #0
 800196a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800196c:	4b1c      	ldr	r3, [pc, #112]	; (80019e0 <MX_TIM2_Init+0xa4>)
 800196e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001972:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001974:	4b1a      	ldr	r3, [pc, #104]	; (80019e0 <MX_TIM2_Init+0xa4>)
 8001976:	2200      	movs	r2, #0
 8001978:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800197a:	4b19      	ldr	r3, [pc, #100]	; (80019e0 <MX_TIM2_Init+0xa4>)
 800197c:	2280      	movs	r2, #128	; 0x80
 800197e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001980:	2303      	movs	r3, #3
 8001982:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001984:	2300      	movs	r3, #0
 8001986:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001988:	2301      	movs	r3, #1
 800198a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800198c:	2300      	movs	r3, #0
 800198e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001990:	230a      	movs	r3, #10
 8001992:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001994:	2300      	movs	r3, #0
 8001996:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001998:	2301      	movs	r3, #1
 800199a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800199c:	2300      	movs	r3, #0
 800199e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80019a0:	230a      	movs	r3, #10
 80019a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80019a4:	f107 030c 	add.w	r3, r7, #12
 80019a8:	4619      	mov	r1, r3
 80019aa:	480d      	ldr	r0, [pc, #52]	; (80019e0 <MX_TIM2_Init+0xa4>)
 80019ac:	f002 f850 	bl	8003a50 <HAL_TIM_Encoder_Init>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80019b6:	f7ff fda5 	bl	8001504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ba:	2300      	movs	r3, #0
 80019bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019be:	2300      	movs	r3, #0
 80019c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019c2:	1d3b      	adds	r3, r7, #4
 80019c4:	4619      	mov	r1, r3
 80019c6:	4806      	ldr	r0, [pc, #24]	; (80019e0 <MX_TIM2_Init+0xa4>)
 80019c8:	f002 ff42 	bl	8004850 <HAL_TIMEx_MasterConfigSynchronization>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80019d2:	f7ff fd97 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019d6:	bf00      	nop
 80019d8:	3730      	adds	r7, #48	; 0x30
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	2000057c 	.word	0x2000057c

080019e4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08c      	sub	sp, #48	; 0x30
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019ea:	f107 030c 	add.w	r3, r7, #12
 80019ee:	2224      	movs	r2, #36	; 0x24
 80019f0:	2100      	movs	r1, #0
 80019f2:	4618      	mov	r0, r3
 80019f4:	f003 ff62 	bl	80058bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f8:	1d3b      	adds	r3, r7, #4
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a00:	4b20      	ldr	r3, [pc, #128]	; (8001a84 <MX_TIM3_Init+0xa0>)
 8001a02:	4a21      	ldr	r2, [pc, #132]	; (8001a88 <MX_TIM3_Init+0xa4>)
 8001a04:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a06:	4b1f      	ldr	r3, [pc, #124]	; (8001a84 <MX_TIM3_Init+0xa0>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a0c:	4b1d      	ldr	r3, [pc, #116]	; (8001a84 <MX_TIM3_Init+0xa0>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a12:	4b1c      	ldr	r3, [pc, #112]	; (8001a84 <MX_TIM3_Init+0xa0>)
 8001a14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a18:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a1a:	4b1a      	ldr	r3, [pc, #104]	; (8001a84 <MX_TIM3_Init+0xa0>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a20:	4b18      	ldr	r3, [pc, #96]	; (8001a84 <MX_TIM3_Init+0xa0>)
 8001a22:	2280      	movs	r2, #128	; 0x80
 8001a24:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a26:	2303      	movs	r3, #3
 8001a28:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a32:	2300      	movs	r3, #0
 8001a34:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001a36:	230a      	movs	r3, #10
 8001a38:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a42:	2300      	movs	r3, #0
 8001a44:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001a46:	230a      	movs	r3, #10
 8001a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001a4a:	f107 030c 	add.w	r3, r7, #12
 8001a4e:	4619      	mov	r1, r3
 8001a50:	480c      	ldr	r0, [pc, #48]	; (8001a84 <MX_TIM3_Init+0xa0>)
 8001a52:	f001 fffd 	bl	8003a50 <HAL_TIM_Encoder_Init>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001a5c:	f7ff fd52 	bl	8001504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a60:	2300      	movs	r3, #0
 8001a62:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a64:	2300      	movs	r3, #0
 8001a66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a68:	1d3b      	adds	r3, r7, #4
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4805      	ldr	r0, [pc, #20]	; (8001a84 <MX_TIM3_Init+0xa0>)
 8001a6e:	f002 feef 	bl	8004850 <HAL_TIMEx_MasterConfigSynchronization>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001a78:	f7ff fd44 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a7c:	bf00      	nop
 8001a7e:	3730      	adds	r7, #48	; 0x30
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	200004a4 	.word	0x200004a4
 8001a88:	40000400 	.word	0x40000400

08001a8c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08c      	sub	sp, #48	; 0x30
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a92:	f107 030c 	add.w	r3, r7, #12
 8001a96:	2224      	movs	r2, #36	; 0x24
 8001a98:	2100      	movs	r1, #0
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f003 ff0e 	bl	80058bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa0:	1d3b      	adds	r3, r7, #4
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001aa8:	4b20      	ldr	r3, [pc, #128]	; (8001b2c <MX_TIM4_Init+0xa0>)
 8001aaa:	4a21      	ldr	r2, [pc, #132]	; (8001b30 <MX_TIM4_Init+0xa4>)
 8001aac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001aae:	4b1f      	ldr	r3, [pc, #124]	; (8001b2c <MX_TIM4_Init+0xa0>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab4:	4b1d      	ldr	r3, [pc, #116]	; (8001b2c <MX_TIM4_Init+0xa0>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001aba:	4b1c      	ldr	r3, [pc, #112]	; (8001b2c <MX_TIM4_Init+0xa0>)
 8001abc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ac0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac2:	4b1a      	ldr	r3, [pc, #104]	; (8001b2c <MX_TIM4_Init+0xa0>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ac8:	4b18      	ldr	r3, [pc, #96]	; (8001b2c <MX_TIM4_Init+0xa0>)
 8001aca:	2280      	movs	r2, #128	; 0x80
 8001acc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001ade:	230a      	movs	r3, #10
 8001ae0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001aea:	2300      	movs	r3, #0
 8001aec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001aee:	230a      	movs	r3, #10
 8001af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001af2:	f107 030c 	add.w	r3, r7, #12
 8001af6:	4619      	mov	r1, r3
 8001af8:	480c      	ldr	r0, [pc, #48]	; (8001b2c <MX_TIM4_Init+0xa0>)
 8001afa:	f001 ffa9 	bl	8003a50 <HAL_TIM_Encoder_Init>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001b04:	f7ff fcfe 	bl	8001504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b10:	1d3b      	adds	r3, r7, #4
 8001b12:	4619      	mov	r1, r3
 8001b14:	4805      	ldr	r0, [pc, #20]	; (8001b2c <MX_TIM4_Init+0xa0>)
 8001b16:	f002 fe9b 	bl	8004850 <HAL_TIMEx_MasterConfigSynchronization>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001b20:	f7ff fcf0 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b24:	bf00      	nop
 8001b26:	3730      	adds	r7, #48	; 0x30
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20000414 	.word	0x20000414
 8001b30:	40000800 	.word	0x40000800

08001b34 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08c      	sub	sp, #48	; 0x30
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b3a:	f107 030c 	add.w	r3, r7, #12
 8001b3e:	2224      	movs	r2, #36	; 0x24
 8001b40:	2100      	movs	r1, #0
 8001b42:	4618      	mov	r0, r3
 8001b44:	f003 feba 	bl	80058bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b48:	1d3b      	adds	r3, r7, #4
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001b50:	4b20      	ldr	r3, [pc, #128]	; (8001bd4 <MX_TIM5_Init+0xa0>)
 8001b52:	4a21      	ldr	r2, [pc, #132]	; (8001bd8 <MX_TIM5_Init+0xa4>)
 8001b54:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001b56:	4b1f      	ldr	r3, [pc, #124]	; (8001bd4 <MX_TIM5_Init+0xa0>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b5c:	4b1d      	ldr	r3, [pc, #116]	; (8001bd4 <MX_TIM5_Init+0xa0>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001b62:	4b1c      	ldr	r3, [pc, #112]	; (8001bd4 <MX_TIM5_Init+0xa0>)
 8001b64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b68:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b6a:	4b1a      	ldr	r3, [pc, #104]	; (8001bd4 <MX_TIM5_Init+0xa0>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b70:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <MX_TIM5_Init+0xa0>)
 8001b72:	2280      	movs	r2, #128	; 0x80
 8001b74:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001b76:	2301      	movs	r3, #1
 8001b78:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b82:	2300      	movs	r3, #0
 8001b84:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001b86:	230a      	movs	r3, #10
 8001b88:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b92:	2300      	movs	r3, #0
 8001b94:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001b96:	230a      	movs	r3, #10
 8001b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001b9a:	f107 030c 	add.w	r3, r7, #12
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	480c      	ldr	r0, [pc, #48]	; (8001bd4 <MX_TIM5_Init+0xa0>)
 8001ba2:	f001 ff55 	bl	8003a50 <HAL_TIM_Encoder_Init>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001bac:	f7ff fcaa 	bl	8001504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001bb8:	1d3b      	adds	r3, r7, #4
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4805      	ldr	r0, [pc, #20]	; (8001bd4 <MX_TIM5_Init+0xa0>)
 8001bbe:	f002 fe47 	bl	8004850 <HAL_TIMEx_MasterConfigSynchronization>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001bc8:	f7ff fc9c 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001bcc:	bf00      	nop
 8001bce:	3730      	adds	r7, #48	; 0x30
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	2000045c 	.word	0x2000045c
 8001bd8:	40000c00 	.word	0x40000c00

08001bdc <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be2:	463b      	mov	r3, r7
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001bea:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <MX_TIM6_Init+0x64>)
 8001bec:	4a15      	ldr	r2, [pc, #84]	; (8001c44 <MX_TIM6_Init+0x68>)
 8001bee:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 35999;
 8001bf0:	4b13      	ldr	r3, [pc, #76]	; (8001c40 <MX_TIM6_Init+0x64>)
 8001bf2:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8001bf6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf8:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <MX_TIM6_Init+0x64>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1999;
 8001bfe:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <MX_TIM6_Init+0x64>)
 8001c00:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001c04:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c06:	4b0e      	ldr	r3, [pc, #56]	; (8001c40 <MX_TIM6_Init+0x64>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c0c:	480c      	ldr	r0, [pc, #48]	; (8001c40 <MX_TIM6_Init+0x64>)
 8001c0e:	f001 fe77 	bl	8003900 <HAL_TIM_Base_Init>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001c18:	f7ff fc74 	bl	8001504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c20:	2300      	movs	r3, #0
 8001c22:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c24:	463b      	mov	r3, r7
 8001c26:	4619      	mov	r1, r3
 8001c28:	4805      	ldr	r0, [pc, #20]	; (8001c40 <MX_TIM6_Init+0x64>)
 8001c2a:	f002 fe11 	bl	8004850 <HAL_TIMEx_MasterConfigSynchronization>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001c34:	f7ff fc66 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c38:	bf00      	nop
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	200004ec 	.word	0x200004ec
 8001c44:	40001000 	.word	0x40001000

08001c48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a18      	ldr	r2, [pc, #96]	; (8001cb8 <HAL_TIM_Base_MspInit+0x70>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d10e      	bne.n	8001c78 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	4b17      	ldr	r3, [pc, #92]	; (8001cbc <HAL_TIM_Base_MspInit+0x74>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c62:	4a16      	ldr	r2, [pc, #88]	; (8001cbc <HAL_TIM_Base_MspInit+0x74>)
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	6453      	str	r3, [r2, #68]	; 0x44
 8001c6a:	4b14      	ldr	r3, [pc, #80]	; (8001cbc <HAL_TIM_Base_MspInit+0x74>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001c76:	e01a      	b.n	8001cae <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM6)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a10      	ldr	r2, [pc, #64]	; (8001cc0 <HAL_TIM_Base_MspInit+0x78>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d115      	bne.n	8001cae <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	4b0d      	ldr	r3, [pc, #52]	; (8001cbc <HAL_TIM_Base_MspInit+0x74>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	4a0c      	ldr	r2, [pc, #48]	; (8001cbc <HAL_TIM_Base_MspInit+0x74>)
 8001c8c:	f043 0310 	orr.w	r3, r3, #16
 8001c90:	6413      	str	r3, [r2, #64]	; 0x40
 8001c92:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <HAL_TIM_Base_MspInit+0x74>)
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	f003 0310 	and.w	r3, r3, #16
 8001c9a:	60bb      	str	r3, [r7, #8]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	2036      	movs	r0, #54	; 0x36
 8001ca4:	f000 fbc9 	bl	800243a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ca8:	2036      	movs	r0, #54	; 0x36
 8001caa:	f000 fbe2 	bl	8002472 <HAL_NVIC_EnableIRQ>
}
 8001cae:	bf00      	nop
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40010000 	.word	0x40010000
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	40001000 	.word	0x40001000

08001cc4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b090      	sub	sp, #64	; 0x40
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ccc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ce4:	d14a      	bne.n	8001d7c <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cea:	4b71      	ldr	r3, [pc, #452]	; (8001eb0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	4a70      	ldr	r2, [pc, #448]	; (8001eb0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cf6:	4b6e      	ldr	r3, [pc, #440]	; (8001eb0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d00:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
 8001d06:	4b6a      	ldr	r3, [pc, #424]	; (8001eb0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	4a69      	ldr	r2, [pc, #420]	; (8001eb0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	6313      	str	r3, [r2, #48]	; 0x30
 8001d12:	4b67      	ldr	r3, [pc, #412]	; (8001eb0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	623b      	str	r3, [r7, #32]
 8001d22:	4b63      	ldr	r3, [pc, #396]	; (8001eb0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	4a62      	ldr	r2, [pc, #392]	; (8001eb0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001d28:	f043 0302 	orr.w	r3, r3, #2
 8001d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2e:	4b60      	ldr	r3, [pc, #384]	; (8001eb0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	623b      	str	r3, [r7, #32]
 8001d38:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001d3a:	2320      	movs	r3, #32
 8001d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d46:	2300      	movs	r3, #0
 8001d48:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d52:	4619      	mov	r1, r3
 8001d54:	4857      	ldr	r0, [pc, #348]	; (8001eb4 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8001d56:	f000 ffa9 	bl	8002cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d5a:	2308      	movs	r3, #8
 8001d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d62:	2300      	movs	r3, #0
 8001d64:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d66:	2300      	movs	r3, #0
 8001d68:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d72:	4619      	mov	r1, r3
 8001d74:	4850      	ldr	r0, [pc, #320]	; (8001eb8 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8001d76:	f000 ff99 	bl	8002cac <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001d7a:	e095      	b.n	8001ea8 <HAL_TIM_Encoder_MspInit+0x1e4>
  else if(tim_encoderHandle->Instance==TIM3)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a4e      	ldr	r2, [pc, #312]	; (8001ebc <HAL_TIM_Encoder_MspInit+0x1f8>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d12c      	bne.n	8001de0 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	61fb      	str	r3, [r7, #28]
 8001d8a:	4b49      	ldr	r3, [pc, #292]	; (8001eb0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	4a48      	ldr	r2, [pc, #288]	; (8001eb0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001d90:	f043 0302 	orr.w	r3, r3, #2
 8001d94:	6413      	str	r3, [r2, #64]	; 0x40
 8001d96:	4b46      	ldr	r3, [pc, #280]	; (8001eb0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	61fb      	str	r3, [r7, #28]
 8001da0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	61bb      	str	r3, [r7, #24]
 8001da6:	4b42      	ldr	r3, [pc, #264]	; (8001eb0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	4a41      	ldr	r2, [pc, #260]	; (8001eb0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	6313      	str	r3, [r2, #48]	; 0x30
 8001db2:	4b3f      	ldr	r3, [pc, #252]	; (8001eb0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	61bb      	str	r3, [r7, #24]
 8001dbc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dbe:	23c0      	movs	r3, #192	; 0xc0
 8001dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4836      	ldr	r0, [pc, #216]	; (8001eb4 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8001dda:	f000 ff67 	bl	8002cac <HAL_GPIO_Init>
}
 8001dde:	e063      	b.n	8001ea8 <HAL_TIM_Encoder_MspInit+0x1e4>
  else if(tim_encoderHandle->Instance==TIM4)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a36      	ldr	r2, [pc, #216]	; (8001ec0 <HAL_TIM_Encoder_MspInit+0x1fc>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d12d      	bne.n	8001e46 <HAL_TIM_Encoder_MspInit+0x182>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]
 8001dee:	4b30      	ldr	r3, [pc, #192]	; (8001eb0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	4a2f      	ldr	r2, [pc, #188]	; (8001eb0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001df4:	f043 0304 	orr.w	r3, r3, #4
 8001df8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dfa:	4b2d      	ldr	r3, [pc, #180]	; (8001eb0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	f003 0304 	and.w	r3, r3, #4
 8001e02:	617b      	str	r3, [r7, #20]
 8001e04:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	613b      	str	r3, [r7, #16]
 8001e0a:	4b29      	ldr	r3, [pc, #164]	; (8001eb0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	4a28      	ldr	r2, [pc, #160]	; (8001eb0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001e10:	f043 0308 	orr.w	r3, r3, #8
 8001e14:	6313      	str	r3, [r2, #48]	; 0x30
 8001e16:	4b26      	ldr	r3, [pc, #152]	; (8001eb0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	f003 0308 	and.w	r3, r3, #8
 8001e1e:	613b      	str	r3, [r7, #16]
 8001e20:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001e22:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001e26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e30:	2300      	movs	r3, #0
 8001e32:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e34:	2302      	movs	r3, #2
 8001e36:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4821      	ldr	r0, [pc, #132]	; (8001ec4 <HAL_TIM_Encoder_MspInit+0x200>)
 8001e40:	f000 ff34 	bl	8002cac <HAL_GPIO_Init>
}
 8001e44:	e030      	b.n	8001ea8 <HAL_TIM_Encoder_MspInit+0x1e4>
  else if(tim_encoderHandle->Instance==TIM5)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a1f      	ldr	r2, [pc, #124]	; (8001ec8 <HAL_TIM_Encoder_MspInit+0x204>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d12b      	bne.n	8001ea8 <HAL_TIM_Encoder_MspInit+0x1e4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e50:	2300      	movs	r3, #0
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	4b16      	ldr	r3, [pc, #88]	; (8001eb0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e58:	4a15      	ldr	r2, [pc, #84]	; (8001eb0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001e5a:	f043 0308 	orr.w	r3, r3, #8
 8001e5e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e60:	4b13      	ldr	r3, [pc, #76]	; (8001eb0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e64:	f003 0308 	and.w	r3, r3, #8
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	4b0f      	ldr	r3, [pc, #60]	; (8001eb0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e74:	4a0e      	ldr	r2, [pc, #56]	; (8001eb0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001e76:	f043 0301 	orr.w	r3, r3, #1
 8001e7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	60bb      	str	r3, [r7, #8]
 8001e86:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e94:	2300      	movs	r3, #0
 8001e96:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4804      	ldr	r0, [pc, #16]	; (8001eb4 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8001ea4:	f000 ff02 	bl	8002cac <HAL_GPIO_Init>
}
 8001ea8:	bf00      	nop
 8001eaa:	3740      	adds	r7, #64	; 0x40
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	40020000 	.word	0x40020000
 8001eb8:	40020400 	.word	0x40020400
 8001ebc:	40000400 	.word	0x40000400
 8001ec0:	40000800 	.word	0x40000800
 8001ec4:	40020c00 	.word	0x40020c00
 8001ec8:	40000c00 	.word	0x40000c00

08001ecc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b088      	sub	sp, #32
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed4:	f107 030c 	add.w	r3, r7, #12
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	60da      	str	r2, [r3, #12]
 8001ee2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a12      	ldr	r2, [pc, #72]	; (8001f34 <HAL_TIM_MspPostInit+0x68>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d11e      	bne.n	8001f2c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60bb      	str	r3, [r7, #8]
 8001ef2:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <HAL_TIM_MspPostInit+0x6c>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	4a10      	ldr	r2, [pc, #64]	; (8001f38 <HAL_TIM_MspPostInit+0x6c>)
 8001ef8:	f043 0310 	orr.w	r3, r3, #16
 8001efc:	6313      	str	r3, [r2, #48]	; 0x30
 8001efe:	4b0e      	ldr	r3, [pc, #56]	; (8001f38 <HAL_TIM_MspPostInit+0x6c>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	f003 0310 	and.w	r3, r3, #16
 8001f06:	60bb      	str	r3, [r7, #8]
 8001f08:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8001f0a:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8001f0e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f10:	2302      	movs	r3, #2
 8001f12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f20:	f107 030c 	add.w	r3, r7, #12
 8001f24:	4619      	mov	r1, r3
 8001f26:	4805      	ldr	r0, [pc, #20]	; (8001f3c <HAL_TIM_MspPostInit+0x70>)
 8001f28:	f000 fec0 	bl	8002cac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001f2c:	bf00      	nop
 8001f2e:	3720      	adds	r7, #32
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40010000 	.word	0x40010000
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	40021000 	.word	0x40021000

08001f40 <MX_USART6_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001f44:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <MX_USART6_UART_Init+0x4c>)
 8001f46:	4a12      	ldr	r2, [pc, #72]	; (8001f90 <MX_USART6_UART_Init+0x50>)
 8001f48:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001f4a:	4b10      	ldr	r3, [pc, #64]	; (8001f8c <MX_USART6_UART_Init+0x4c>)
 8001f4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f50:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001f52:	4b0e      	ldr	r3, [pc, #56]	; (8001f8c <MX_USART6_UART_Init+0x4c>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001f58:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <MX_USART6_UART_Init+0x4c>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001f5e:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <MX_USART6_UART_Init+0x4c>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001f64:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <MX_USART6_UART_Init+0x4c>)
 8001f66:	220c      	movs	r2, #12
 8001f68:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f6a:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <MX_USART6_UART_Init+0x4c>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f70:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <MX_USART6_UART_Init+0x4c>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001f76:	4805      	ldr	r0, [pc, #20]	; (8001f8c <MX_USART6_UART_Init+0x4c>)
 8001f78:	f002 fd4c 	bl	8004a14 <HAL_UART_Init>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001f82:	f7ff fabf 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001f86:	bf00      	nop
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000684 	.word	0x20000684
 8001f90:	40011400 	.word	0x40011400

08001f94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b08a      	sub	sp, #40	; 0x28
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9c:	f107 0314 	add.w	r3, r7, #20
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a4d      	ldr	r2, [pc, #308]	; (80020e8 <HAL_UART_MspInit+0x154>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	f040 8094 	bne.w	80020e0 <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001fb8:	2300      	movs	r3, #0
 8001fba:	613b      	str	r3, [r7, #16]
 8001fbc:	4b4b      	ldr	r3, [pc, #300]	; (80020ec <HAL_UART_MspInit+0x158>)
 8001fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc0:	4a4a      	ldr	r2, [pc, #296]	; (80020ec <HAL_UART_MspInit+0x158>)
 8001fc2:	f043 0320 	orr.w	r3, r3, #32
 8001fc6:	6453      	str	r3, [r2, #68]	; 0x44
 8001fc8:	4b48      	ldr	r3, [pc, #288]	; (80020ec <HAL_UART_MspInit+0x158>)
 8001fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fcc:	f003 0320 	and.w	r3, r3, #32
 8001fd0:	613b      	str	r3, [r7, #16]
 8001fd2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	4b44      	ldr	r3, [pc, #272]	; (80020ec <HAL_UART_MspInit+0x158>)
 8001fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fdc:	4a43      	ldr	r2, [pc, #268]	; (80020ec <HAL_UART_MspInit+0x158>)
 8001fde:	f043 0304 	orr.w	r3, r3, #4
 8001fe2:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe4:	4b41      	ldr	r3, [pc, #260]	; (80020ec <HAL_UART_MspInit+0x158>)
 8001fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe8:	f003 0304 	and.w	r3, r3, #4
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ff0:	23c0      	movs	r3, #192	; 0xc0
 8001ff2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002000:	2308      	movs	r3, #8
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002004:	f107 0314 	add.w	r3, r7, #20
 8002008:	4619      	mov	r1, r3
 800200a:	4839      	ldr	r0, [pc, #228]	; (80020f0 <HAL_UART_MspInit+0x15c>)
 800200c:	f000 fe4e 	bl	8002cac <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002010:	4b38      	ldr	r3, [pc, #224]	; (80020f4 <HAL_UART_MspInit+0x160>)
 8002012:	4a39      	ldr	r2, [pc, #228]	; (80020f8 <HAL_UART_MspInit+0x164>)
 8002014:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002016:	4b37      	ldr	r3, [pc, #220]	; (80020f4 <HAL_UART_MspInit+0x160>)
 8002018:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800201c:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800201e:	4b35      	ldr	r3, [pc, #212]	; (80020f4 <HAL_UART_MspInit+0x160>)
 8002020:	2200      	movs	r2, #0
 8002022:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002024:	4b33      	ldr	r3, [pc, #204]	; (80020f4 <HAL_UART_MspInit+0x160>)
 8002026:	2200      	movs	r2, #0
 8002028:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800202a:	4b32      	ldr	r3, [pc, #200]	; (80020f4 <HAL_UART_MspInit+0x160>)
 800202c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002030:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002032:	4b30      	ldr	r3, [pc, #192]	; (80020f4 <HAL_UART_MspInit+0x160>)
 8002034:	2200      	movs	r2, #0
 8002036:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002038:	4b2e      	ldr	r3, [pc, #184]	; (80020f4 <HAL_UART_MspInit+0x160>)
 800203a:	2200      	movs	r2, #0
 800203c:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 800203e:	4b2d      	ldr	r3, [pc, #180]	; (80020f4 <HAL_UART_MspInit+0x160>)
 8002040:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002044:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002046:	4b2b      	ldr	r3, [pc, #172]	; (80020f4 <HAL_UART_MspInit+0x160>)
 8002048:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800204c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800204e:	4b29      	ldr	r3, [pc, #164]	; (80020f4 <HAL_UART_MspInit+0x160>)
 8002050:	2200      	movs	r2, #0
 8002052:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002054:	4827      	ldr	r0, [pc, #156]	; (80020f4 <HAL_UART_MspInit+0x160>)
 8002056:	f000 fa27 	bl	80024a8 <HAL_DMA_Init>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002060:	f7ff fa50 	bl	8001504 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a23      	ldr	r2, [pc, #140]	; (80020f4 <HAL_UART_MspInit+0x160>)
 8002068:	639a      	str	r2, [r3, #56]	; 0x38
 800206a:	4a22      	ldr	r2, [pc, #136]	; (80020f4 <HAL_UART_MspInit+0x160>)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8002070:	4b22      	ldr	r3, [pc, #136]	; (80020fc <HAL_UART_MspInit+0x168>)
 8002072:	4a23      	ldr	r2, [pc, #140]	; (8002100 <HAL_UART_MspInit+0x16c>)
 8002074:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8002076:	4b21      	ldr	r3, [pc, #132]	; (80020fc <HAL_UART_MspInit+0x168>)
 8002078:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800207c:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800207e:	4b1f      	ldr	r3, [pc, #124]	; (80020fc <HAL_UART_MspInit+0x168>)
 8002080:	2240      	movs	r2, #64	; 0x40
 8002082:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002084:	4b1d      	ldr	r3, [pc, #116]	; (80020fc <HAL_UART_MspInit+0x168>)
 8002086:	2200      	movs	r2, #0
 8002088:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800208a:	4b1c      	ldr	r3, [pc, #112]	; (80020fc <HAL_UART_MspInit+0x168>)
 800208c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002090:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002092:	4b1a      	ldr	r3, [pc, #104]	; (80020fc <HAL_UART_MspInit+0x168>)
 8002094:	2200      	movs	r2, #0
 8002096:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002098:	4b18      	ldr	r3, [pc, #96]	; (80020fc <HAL_UART_MspInit+0x168>)
 800209a:	2200      	movs	r2, #0
 800209c:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_CIRCULAR;
 800209e:	4b17      	ldr	r3, [pc, #92]	; (80020fc <HAL_UART_MspInit+0x168>)
 80020a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020a4:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80020a6:	4b15      	ldr	r3, [pc, #84]	; (80020fc <HAL_UART_MspInit+0x168>)
 80020a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020ac:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020ae:	4b13      	ldr	r3, [pc, #76]	; (80020fc <HAL_UART_MspInit+0x168>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80020b4:	4811      	ldr	r0, [pc, #68]	; (80020fc <HAL_UART_MspInit+0x168>)
 80020b6:	f000 f9f7 	bl	80024a8 <HAL_DMA_Init>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <HAL_UART_MspInit+0x130>
    {
      Error_Handler();
 80020c0:	f7ff fa20 	bl	8001504 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a0d      	ldr	r2, [pc, #52]	; (80020fc <HAL_UART_MspInit+0x168>)
 80020c8:	635a      	str	r2, [r3, #52]	; 0x34
 80020ca:	4a0c      	ldr	r2, [pc, #48]	; (80020fc <HAL_UART_MspInit+0x168>)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80020d0:	2200      	movs	r2, #0
 80020d2:	2100      	movs	r1, #0
 80020d4:	2047      	movs	r0, #71	; 0x47
 80020d6:	f000 f9b0 	bl	800243a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80020da:	2047      	movs	r0, #71	; 0x47
 80020dc:	f000 f9c9 	bl	8002472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80020e0:	bf00      	nop
 80020e2:	3728      	adds	r7, #40	; 0x28
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40011400 	.word	0x40011400
 80020ec:	40023800 	.word	0x40023800
 80020f0:	40020800 	.word	0x40020800
 80020f4:	200005c4 	.word	0x200005c4
 80020f8:	40026428 	.word	0x40026428
 80020fc:	20000624 	.word	0x20000624
 8002100:	400264a0 	.word	0x400264a0

08002104 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002104:	f8df d034 	ldr.w	sp, [pc, #52]	; 800213c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002108:	480d      	ldr	r0, [pc, #52]	; (8002140 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800210a:	490e      	ldr	r1, [pc, #56]	; (8002144 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800210c:	4a0e      	ldr	r2, [pc, #56]	; (8002148 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800210e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002110:	e002      	b.n	8002118 <LoopCopyDataInit>

08002112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002116:	3304      	adds	r3, #4

08002118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800211a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800211c:	d3f9      	bcc.n	8002112 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800211e:	4a0b      	ldr	r2, [pc, #44]	; (800214c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002120:	4c0b      	ldr	r4, [pc, #44]	; (8002150 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002124:	e001      	b.n	800212a <LoopFillZerobss>

08002126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002128:	3204      	adds	r2, #4

0800212a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800212a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800212c:	d3fb      	bcc.n	8002126 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800212e:	f7ff fb2f 	bl	8001790 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002132:	f003 fb9f 	bl	8005874 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002136:	f7ff f815 	bl	8001164 <main>
  bx  lr    
 800213a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800213c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002144:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002148:	08008a2c 	.word	0x08008a2c
  ldr r2, =_sbss
 800214c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002150:	200006dc 	.word	0x200006dc

08002154 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002154:	e7fe      	b.n	8002154 <ADC_IRQHandler>
	...

08002158 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800215c:	4b0e      	ldr	r3, [pc, #56]	; (8002198 <HAL_Init+0x40>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a0d      	ldr	r2, [pc, #52]	; (8002198 <HAL_Init+0x40>)
 8002162:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002166:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002168:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <HAL_Init+0x40>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a0a      	ldr	r2, [pc, #40]	; (8002198 <HAL_Init+0x40>)
 800216e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002172:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002174:	4b08      	ldr	r3, [pc, #32]	; (8002198 <HAL_Init+0x40>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a07      	ldr	r2, [pc, #28]	; (8002198 <HAL_Init+0x40>)
 800217a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800217e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002180:	2003      	movs	r0, #3
 8002182:	f000 f94f 	bl	8002424 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002186:	2000      	movs	r0, #0
 8002188:	f000 f808 	bl	800219c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800218c:	f7ff f9c0 	bl	8001510 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40023c00 	.word	0x40023c00

0800219c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021a4:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <HAL_InitTick+0x54>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	4b12      	ldr	r3, [pc, #72]	; (80021f4 <HAL_InitTick+0x58>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	4619      	mov	r1, r3
 80021ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80021b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 f967 	bl	800248e <HAL_SYSTICK_Config>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e00e      	b.n	80021e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2b0f      	cmp	r3, #15
 80021ce:	d80a      	bhi.n	80021e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021d0:	2200      	movs	r2, #0
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021d8:	f000 f92f 	bl	800243a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021dc:	4a06      	ldr	r2, [pc, #24]	; (80021f8 <HAL_InitTick+0x5c>)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
 80021e4:	e000      	b.n	80021e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	20000000 	.word	0x20000000
 80021f4:	20000008 	.word	0x20000008
 80021f8:	20000004 	.word	0x20000004

080021fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002200:	4b06      	ldr	r3, [pc, #24]	; (800221c <HAL_IncTick+0x20>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	461a      	mov	r2, r3
 8002206:	4b06      	ldr	r3, [pc, #24]	; (8002220 <HAL_IncTick+0x24>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4413      	add	r3, r2
 800220c:	4a04      	ldr	r2, [pc, #16]	; (8002220 <HAL_IncTick+0x24>)
 800220e:	6013      	str	r3, [r2, #0]
}
 8002210:	bf00      	nop
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	20000008 	.word	0x20000008
 8002220:	200006c8 	.word	0x200006c8

08002224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  return uwTick;
 8002228:	4b03      	ldr	r3, [pc, #12]	; (8002238 <HAL_GetTick+0x14>)
 800222a:	681b      	ldr	r3, [r3, #0]
}
 800222c:	4618      	mov	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	200006c8 	.word	0x200006c8

0800223c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002244:	f7ff ffee 	bl	8002224 <HAL_GetTick>
 8002248:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002254:	d005      	beq.n	8002262 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002256:	4b0a      	ldr	r3, [pc, #40]	; (8002280 <HAL_Delay+0x44>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	461a      	mov	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	4413      	add	r3, r2
 8002260:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002262:	bf00      	nop
 8002264:	f7ff ffde 	bl	8002224 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	429a      	cmp	r2, r3
 8002272:	d8f7      	bhi.n	8002264 <HAL_Delay+0x28>
  {
  }
}
 8002274:	bf00      	nop
 8002276:	bf00      	nop
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	20000008 	.word	0x20000008

08002284 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002294:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022a0:	4013      	ands	r3, r2
 80022a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022b6:	4a04      	ldr	r2, [pc, #16]	; (80022c8 <__NVIC_SetPriorityGrouping+0x44>)
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	60d3      	str	r3, [r2, #12]
}
 80022bc:	bf00      	nop
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022d0:	4b04      	ldr	r3, [pc, #16]	; (80022e4 <__NVIC_GetPriorityGrouping+0x18>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	0a1b      	lsrs	r3, r3, #8
 80022d6:	f003 0307 	and.w	r3, r3, #7
}
 80022da:	4618      	mov	r0, r3
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	e000ed00 	.word	0xe000ed00

080022e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	db0b      	blt.n	8002312 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	f003 021f 	and.w	r2, r3, #31
 8002300:	4907      	ldr	r1, [pc, #28]	; (8002320 <__NVIC_EnableIRQ+0x38>)
 8002302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002306:	095b      	lsrs	r3, r3, #5
 8002308:	2001      	movs	r0, #1
 800230a:	fa00 f202 	lsl.w	r2, r0, r2
 800230e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	e000e100 	.word	0xe000e100

08002324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	6039      	str	r1, [r7, #0]
 800232e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002334:	2b00      	cmp	r3, #0
 8002336:	db0a      	blt.n	800234e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	b2da      	uxtb	r2, r3
 800233c:	490c      	ldr	r1, [pc, #48]	; (8002370 <__NVIC_SetPriority+0x4c>)
 800233e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002342:	0112      	lsls	r2, r2, #4
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	440b      	add	r3, r1
 8002348:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800234c:	e00a      	b.n	8002364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	b2da      	uxtb	r2, r3
 8002352:	4908      	ldr	r1, [pc, #32]	; (8002374 <__NVIC_SetPriority+0x50>)
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	3b04      	subs	r3, #4
 800235c:	0112      	lsls	r2, r2, #4
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	440b      	add	r3, r1
 8002362:	761a      	strb	r2, [r3, #24]
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	e000e100 	.word	0xe000e100
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002378:	b480      	push	{r7}
 800237a:	b089      	sub	sp, #36	; 0x24
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f1c3 0307 	rsb	r3, r3, #7
 8002392:	2b04      	cmp	r3, #4
 8002394:	bf28      	it	cs
 8002396:	2304      	movcs	r3, #4
 8002398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	3304      	adds	r3, #4
 800239e:	2b06      	cmp	r3, #6
 80023a0:	d902      	bls.n	80023a8 <NVIC_EncodePriority+0x30>
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	3b03      	subs	r3, #3
 80023a6:	e000      	b.n	80023aa <NVIC_EncodePriority+0x32>
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43da      	mvns	r2, r3
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	401a      	ands	r2, r3
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ca:	43d9      	mvns	r1, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d0:	4313      	orrs	r3, r2
         );
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3724      	adds	r7, #36	; 0x24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
	...

080023e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023f0:	d301      	bcc.n	80023f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023f2:	2301      	movs	r3, #1
 80023f4:	e00f      	b.n	8002416 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023f6:	4a0a      	ldr	r2, [pc, #40]	; (8002420 <SysTick_Config+0x40>)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023fe:	210f      	movs	r1, #15
 8002400:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002404:	f7ff ff8e 	bl	8002324 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002408:	4b05      	ldr	r3, [pc, #20]	; (8002420 <SysTick_Config+0x40>)
 800240a:	2200      	movs	r2, #0
 800240c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800240e:	4b04      	ldr	r3, [pc, #16]	; (8002420 <SysTick_Config+0x40>)
 8002410:	2207      	movs	r2, #7
 8002412:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	e000e010 	.word	0xe000e010

08002424 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f7ff ff29 	bl	8002284 <__NVIC_SetPriorityGrouping>
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800243a:	b580      	push	{r7, lr}
 800243c:	b086      	sub	sp, #24
 800243e:	af00      	add	r7, sp, #0
 8002440:	4603      	mov	r3, r0
 8002442:	60b9      	str	r1, [r7, #8]
 8002444:	607a      	str	r2, [r7, #4]
 8002446:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800244c:	f7ff ff3e 	bl	80022cc <__NVIC_GetPriorityGrouping>
 8002450:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	68b9      	ldr	r1, [r7, #8]
 8002456:	6978      	ldr	r0, [r7, #20]
 8002458:	f7ff ff8e 	bl	8002378 <NVIC_EncodePriority>
 800245c:	4602      	mov	r2, r0
 800245e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002462:	4611      	mov	r1, r2
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff ff5d 	bl	8002324 <__NVIC_SetPriority>
}
 800246a:	bf00      	nop
 800246c:	3718      	adds	r7, #24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b082      	sub	sp, #8
 8002476:	af00      	add	r7, sp, #0
 8002478:	4603      	mov	r3, r0
 800247a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800247c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff ff31 	bl	80022e8 <__NVIC_EnableIRQ>
}
 8002486:	bf00      	nop
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b082      	sub	sp, #8
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7ff ffa2 	bl	80023e0 <SysTick_Config>
 800249c:	4603      	mov	r3, r0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
	...

080024a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80024b4:	f7ff feb6 	bl	8002224 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d101      	bne.n	80024c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e099      	b.n	80025f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2202      	movs	r2, #2
 80024d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 0201 	bic.w	r2, r2, #1
 80024e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024e4:	e00f      	b.n	8002506 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024e6:	f7ff fe9d 	bl	8002224 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b05      	cmp	r3, #5
 80024f2:	d908      	bls.n	8002506 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2220      	movs	r2, #32
 80024f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2203      	movs	r2, #3
 80024fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e078      	b.n	80025f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1e8      	bne.n	80024e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	4b38      	ldr	r3, [pc, #224]	; (8002600 <HAL_DMA_Init+0x158>)
 8002520:	4013      	ands	r3, r2
 8002522:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002532:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800253e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800254a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	4313      	orrs	r3, r2
 8002556:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255c:	2b04      	cmp	r3, #4
 800255e:	d107      	bne.n	8002570 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002568:	4313      	orrs	r3, r2
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	4313      	orrs	r3, r2
 800256e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	697a      	ldr	r2, [r7, #20]
 8002576:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	f023 0307 	bic.w	r3, r3, #7
 8002586:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	4313      	orrs	r3, r2
 8002590:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002596:	2b04      	cmp	r3, #4
 8002598:	d117      	bne.n	80025ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00e      	beq.n	80025ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 fb01 	bl	8002bb4 <DMA_CheckFifoParam>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d008      	beq.n	80025ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2240      	movs	r2, #64	; 0x40
 80025bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80025c6:	2301      	movs	r3, #1
 80025c8:	e016      	b.n	80025f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 fab8 	bl	8002b48 <DMA_CalcBaseAndBitshift>
 80025d8:	4603      	mov	r3, r0
 80025da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e0:	223f      	movs	r2, #63	; 0x3f
 80025e2:	409a      	lsls	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3718      	adds	r7, #24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	f010803f 	.word	0xf010803f

08002604 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
 8002610:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002612:	2300      	movs	r3, #0
 8002614:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002622:	2b01      	cmp	r3, #1
 8002624:	d101      	bne.n	800262a <HAL_DMA_Start_IT+0x26>
 8002626:	2302      	movs	r3, #2
 8002628:	e040      	b.n	80026ac <HAL_DMA_Start_IT+0xa8>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b01      	cmp	r3, #1
 800263c:	d12f      	bne.n	800269e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2202      	movs	r2, #2
 8002642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	68b9      	ldr	r1, [r7, #8]
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 fa4a 	bl	8002aec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265c:	223f      	movs	r2, #63	; 0x3f
 800265e:	409a      	lsls	r2, r3
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f042 0216 	orr.w	r2, r2, #22
 8002672:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002678:	2b00      	cmp	r3, #0
 800267a:	d007      	beq.n	800268c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 0208 	orr.w	r2, r2, #8
 800268a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0201 	orr.w	r2, r2, #1
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	e005      	b.n	80026aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80026a6:	2302      	movs	r3, #2
 80026a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80026aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80026c2:	f7ff fdaf 	bl	8002224 <HAL_GetTick>
 80026c6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d008      	beq.n	80026e6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2280      	movs	r2, #128	; 0x80
 80026d8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e052      	b.n	800278c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 0216 	bic.w	r2, r2, #22
 80026f4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	695a      	ldr	r2, [r3, #20]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002704:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	2b00      	cmp	r3, #0
 800270c:	d103      	bne.n	8002716 <HAL_DMA_Abort+0x62>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002712:	2b00      	cmp	r3, #0
 8002714:	d007      	beq.n	8002726 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 0208 	bic.w	r2, r2, #8
 8002724:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 0201 	bic.w	r2, r2, #1
 8002734:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002736:	e013      	b.n	8002760 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002738:	f7ff fd74 	bl	8002224 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b05      	cmp	r3, #5
 8002744:	d90c      	bls.n	8002760 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2220      	movs	r2, #32
 800274a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2203      	movs	r2, #3
 8002758:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e015      	b.n	800278c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1e4      	bne.n	8002738 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002772:	223f      	movs	r2, #63	; 0x3f
 8002774:	409a      	lsls	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d004      	beq.n	80027b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2280      	movs	r2, #128	; 0x80
 80027ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e00c      	b.n	80027cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2205      	movs	r2, #5
 80027b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 0201 	bic.w	r2, r2, #1
 80027c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80027e0:	2300      	movs	r3, #0
 80027e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027e4:	4b92      	ldr	r3, [pc, #584]	; (8002a30 <HAL_DMA_IRQHandler+0x258>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a92      	ldr	r2, [pc, #584]	; (8002a34 <HAL_DMA_IRQHandler+0x25c>)
 80027ea:	fba2 2303 	umull	r2, r3, r2, r3
 80027ee:	0a9b      	lsrs	r3, r3, #10
 80027f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002802:	2208      	movs	r2, #8
 8002804:	409a      	lsls	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	4013      	ands	r3, r2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d01a      	beq.n	8002844 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	d013      	beq.n	8002844 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 0204 	bic.w	r2, r2, #4
 800282a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002830:	2208      	movs	r2, #8
 8002832:	409a      	lsls	r2, r3
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283c:	f043 0201 	orr.w	r2, r3, #1
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002848:	2201      	movs	r2, #1
 800284a:	409a      	lsls	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4013      	ands	r3, r2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d012      	beq.n	800287a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00b      	beq.n	800287a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002866:	2201      	movs	r2, #1
 8002868:	409a      	lsls	r2, r3
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002872:	f043 0202 	orr.w	r2, r3, #2
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287e:	2204      	movs	r2, #4
 8002880:	409a      	lsls	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	4013      	ands	r3, r2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d012      	beq.n	80028b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00b      	beq.n	80028b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800289c:	2204      	movs	r2, #4
 800289e:	409a      	lsls	r2, r3
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a8:	f043 0204 	orr.w	r2, r3, #4
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b4:	2210      	movs	r2, #16
 80028b6:	409a      	lsls	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	4013      	ands	r3, r2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d043      	beq.n	8002948 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0308 	and.w	r3, r3, #8
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d03c      	beq.n	8002948 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d2:	2210      	movs	r2, #16
 80028d4:	409a      	lsls	r2, r3
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d018      	beq.n	800291a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d108      	bne.n	8002908 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d024      	beq.n	8002948 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	4798      	blx	r3
 8002906:	e01f      	b.n	8002948 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800290c:	2b00      	cmp	r3, #0
 800290e:	d01b      	beq.n	8002948 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	4798      	blx	r3
 8002918:	e016      	b.n	8002948 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002924:	2b00      	cmp	r3, #0
 8002926:	d107      	bne.n	8002938 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 0208 	bic.w	r2, r2, #8
 8002936:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293c:	2b00      	cmp	r3, #0
 800293e:	d003      	beq.n	8002948 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800294c:	2220      	movs	r2, #32
 800294e:	409a      	lsls	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4013      	ands	r3, r2
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 808e 	beq.w	8002a76 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0310 	and.w	r3, r3, #16
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 8086 	beq.w	8002a76 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800296e:	2220      	movs	r2, #32
 8002970:	409a      	lsls	r2, r3
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b05      	cmp	r3, #5
 8002980:	d136      	bne.n	80029f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 0216 	bic.w	r2, r2, #22
 8002990:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	695a      	ldr	r2, [r3, #20]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d103      	bne.n	80029b2 <HAL_DMA_IRQHandler+0x1da>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d007      	beq.n	80029c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0208 	bic.w	r2, r2, #8
 80029c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c6:	223f      	movs	r2, #63	; 0x3f
 80029c8:	409a      	lsls	r2, r3
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d07d      	beq.n	8002ae2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	4798      	blx	r3
        }
        return;
 80029ee:	e078      	b.n	8002ae2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d01c      	beq.n	8002a38 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d108      	bne.n	8002a1e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d030      	beq.n	8002a76 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	4798      	blx	r3
 8002a1c:	e02b      	b.n	8002a76 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d027      	beq.n	8002a76 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	4798      	blx	r3
 8002a2e:	e022      	b.n	8002a76 <HAL_DMA_IRQHandler+0x29e>
 8002a30:	20000000 	.word	0x20000000
 8002a34:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10f      	bne.n	8002a66 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 0210 	bic.w	r2, r2, #16
 8002a54:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d032      	beq.n	8002ae4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d022      	beq.n	8002ad0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2205      	movs	r2, #5
 8002a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 0201 	bic.w	r2, r2, #1
 8002aa0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	60bb      	str	r3, [r7, #8]
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d307      	bcc.n	8002abe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1f2      	bne.n	8002aa2 <HAL_DMA_IRQHandler+0x2ca>
 8002abc:	e000      	b.n	8002ac0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002abe:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d005      	beq.n	8002ae4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	4798      	blx	r3
 8002ae0:	e000      	b.n	8002ae4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002ae2:	bf00      	nop
    }
  }
}
 8002ae4:	3718      	adds	r7, #24
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop

08002aec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
 8002af8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b08:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	2b40      	cmp	r3, #64	; 0x40
 8002b18:	d108      	bne.n	8002b2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b2a:	e007      	b.n	8002b3c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	60da      	str	r2, [r3, #12]
}
 8002b3c:	bf00      	nop
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	3b10      	subs	r3, #16
 8002b58:	4a14      	ldr	r2, [pc, #80]	; (8002bac <DMA_CalcBaseAndBitshift+0x64>)
 8002b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5e:	091b      	lsrs	r3, r3, #4
 8002b60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b62:	4a13      	ldr	r2, [pc, #76]	; (8002bb0 <DMA_CalcBaseAndBitshift+0x68>)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4413      	add	r3, r2
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2b03      	cmp	r3, #3
 8002b74:	d909      	bls.n	8002b8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b7e:	f023 0303 	bic.w	r3, r3, #3
 8002b82:	1d1a      	adds	r2, r3, #4
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	659a      	str	r2, [r3, #88]	; 0x58
 8002b88:	e007      	b.n	8002b9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b92:	f023 0303 	bic.w	r3, r3, #3
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3714      	adds	r7, #20
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	aaaaaaab 	.word	0xaaaaaaab
 8002bb0:	08008630 	.word	0x08008630

08002bb4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d11f      	bne.n	8002c0e <DMA_CheckFifoParam+0x5a>
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	2b03      	cmp	r3, #3
 8002bd2:	d856      	bhi.n	8002c82 <DMA_CheckFifoParam+0xce>
 8002bd4:	a201      	add	r2, pc, #4	; (adr r2, 8002bdc <DMA_CheckFifoParam+0x28>)
 8002bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bda:	bf00      	nop
 8002bdc:	08002bed 	.word	0x08002bed
 8002be0:	08002bff 	.word	0x08002bff
 8002be4:	08002bed 	.word	0x08002bed
 8002be8:	08002c83 	.word	0x08002c83
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d046      	beq.n	8002c86 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bfc:	e043      	b.n	8002c86 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c06:	d140      	bne.n	8002c8a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c0c:	e03d      	b.n	8002c8a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c16:	d121      	bne.n	8002c5c <DMA_CheckFifoParam+0xa8>
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2b03      	cmp	r3, #3
 8002c1c:	d837      	bhi.n	8002c8e <DMA_CheckFifoParam+0xda>
 8002c1e:	a201      	add	r2, pc, #4	; (adr r2, 8002c24 <DMA_CheckFifoParam+0x70>)
 8002c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c24:	08002c35 	.word	0x08002c35
 8002c28:	08002c3b 	.word	0x08002c3b
 8002c2c:	08002c35 	.word	0x08002c35
 8002c30:	08002c4d 	.word	0x08002c4d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	73fb      	strb	r3, [r7, #15]
      break;
 8002c38:	e030      	b.n	8002c9c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d025      	beq.n	8002c92 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c4a:	e022      	b.n	8002c92 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c54:	d11f      	bne.n	8002c96 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c5a:	e01c      	b.n	8002c96 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d903      	bls.n	8002c6a <DMA_CheckFifoParam+0xb6>
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	2b03      	cmp	r3, #3
 8002c66:	d003      	beq.n	8002c70 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c68:	e018      	b.n	8002c9c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	73fb      	strb	r3, [r7, #15]
      break;
 8002c6e:	e015      	b.n	8002c9c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00e      	beq.n	8002c9a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c80:	e00b      	b.n	8002c9a <DMA_CheckFifoParam+0xe6>
      break;
 8002c82:	bf00      	nop
 8002c84:	e00a      	b.n	8002c9c <DMA_CheckFifoParam+0xe8>
      break;
 8002c86:	bf00      	nop
 8002c88:	e008      	b.n	8002c9c <DMA_CheckFifoParam+0xe8>
      break;
 8002c8a:	bf00      	nop
 8002c8c:	e006      	b.n	8002c9c <DMA_CheckFifoParam+0xe8>
      break;
 8002c8e:	bf00      	nop
 8002c90:	e004      	b.n	8002c9c <DMA_CheckFifoParam+0xe8>
      break;
 8002c92:	bf00      	nop
 8002c94:	e002      	b.n	8002c9c <DMA_CheckFifoParam+0xe8>
      break;   
 8002c96:	bf00      	nop
 8002c98:	e000      	b.n	8002c9c <DMA_CheckFifoParam+0xe8>
      break;
 8002c9a:	bf00      	nop
    }
  } 
  
  return status; 
 8002c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop

08002cac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b089      	sub	sp, #36	; 0x24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	61fb      	str	r3, [r7, #28]
 8002cc6:	e16b      	b.n	8002fa0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cc8:	2201      	movs	r2, #1
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	f040 815a 	bne.w	8002f9a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f003 0303 	and.w	r3, r3, #3
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d005      	beq.n	8002cfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d130      	bne.n	8002d60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	2203      	movs	r2, #3
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4013      	ands	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	68da      	ldr	r2, [r3, #12]
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d34:	2201      	movs	r2, #1
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	4013      	ands	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	091b      	lsrs	r3, r3, #4
 8002d4a:	f003 0201 	and.w	r2, r3, #1
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f003 0303 	and.w	r3, r3, #3
 8002d68:	2b03      	cmp	r3, #3
 8002d6a:	d017      	beq.n	8002d9c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	2203      	movs	r2, #3
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	43db      	mvns	r3, r3
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	4013      	ands	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f003 0303 	and.w	r3, r3, #3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d123      	bne.n	8002df0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	08da      	lsrs	r2, r3, #3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3208      	adds	r2, #8
 8002db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	220f      	movs	r2, #15
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	691a      	ldr	r2, [r3, #16]
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	f003 0307 	and.w	r3, r3, #7
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	08da      	lsrs	r2, r3, #3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	3208      	adds	r2, #8
 8002dea:	69b9      	ldr	r1, [r7, #24]
 8002dec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	2203      	movs	r2, #3
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	43db      	mvns	r3, r3
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4013      	ands	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f003 0203 	and.w	r2, r3, #3
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 80b4 	beq.w	8002f9a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e32:	2300      	movs	r3, #0
 8002e34:	60fb      	str	r3, [r7, #12]
 8002e36:	4b60      	ldr	r3, [pc, #384]	; (8002fb8 <HAL_GPIO_Init+0x30c>)
 8002e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3a:	4a5f      	ldr	r2, [pc, #380]	; (8002fb8 <HAL_GPIO_Init+0x30c>)
 8002e3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e40:	6453      	str	r3, [r2, #68]	; 0x44
 8002e42:	4b5d      	ldr	r3, [pc, #372]	; (8002fb8 <HAL_GPIO_Init+0x30c>)
 8002e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e4e:	4a5b      	ldr	r2, [pc, #364]	; (8002fbc <HAL_GPIO_Init+0x310>)
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	089b      	lsrs	r3, r3, #2
 8002e54:	3302      	adds	r3, #2
 8002e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	f003 0303 	and.w	r3, r3, #3
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	220f      	movs	r2, #15
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a52      	ldr	r2, [pc, #328]	; (8002fc0 <HAL_GPIO_Init+0x314>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d02b      	beq.n	8002ed2 <HAL_GPIO_Init+0x226>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a51      	ldr	r2, [pc, #324]	; (8002fc4 <HAL_GPIO_Init+0x318>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d025      	beq.n	8002ece <HAL_GPIO_Init+0x222>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a50      	ldr	r2, [pc, #320]	; (8002fc8 <HAL_GPIO_Init+0x31c>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d01f      	beq.n	8002eca <HAL_GPIO_Init+0x21e>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a4f      	ldr	r2, [pc, #316]	; (8002fcc <HAL_GPIO_Init+0x320>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d019      	beq.n	8002ec6 <HAL_GPIO_Init+0x21a>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a4e      	ldr	r2, [pc, #312]	; (8002fd0 <HAL_GPIO_Init+0x324>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d013      	beq.n	8002ec2 <HAL_GPIO_Init+0x216>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a4d      	ldr	r2, [pc, #308]	; (8002fd4 <HAL_GPIO_Init+0x328>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d00d      	beq.n	8002ebe <HAL_GPIO_Init+0x212>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a4c      	ldr	r2, [pc, #304]	; (8002fd8 <HAL_GPIO_Init+0x32c>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d007      	beq.n	8002eba <HAL_GPIO_Init+0x20e>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a4b      	ldr	r2, [pc, #300]	; (8002fdc <HAL_GPIO_Init+0x330>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d101      	bne.n	8002eb6 <HAL_GPIO_Init+0x20a>
 8002eb2:	2307      	movs	r3, #7
 8002eb4:	e00e      	b.n	8002ed4 <HAL_GPIO_Init+0x228>
 8002eb6:	2308      	movs	r3, #8
 8002eb8:	e00c      	b.n	8002ed4 <HAL_GPIO_Init+0x228>
 8002eba:	2306      	movs	r3, #6
 8002ebc:	e00a      	b.n	8002ed4 <HAL_GPIO_Init+0x228>
 8002ebe:	2305      	movs	r3, #5
 8002ec0:	e008      	b.n	8002ed4 <HAL_GPIO_Init+0x228>
 8002ec2:	2304      	movs	r3, #4
 8002ec4:	e006      	b.n	8002ed4 <HAL_GPIO_Init+0x228>
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e004      	b.n	8002ed4 <HAL_GPIO_Init+0x228>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e002      	b.n	8002ed4 <HAL_GPIO_Init+0x228>
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e000      	b.n	8002ed4 <HAL_GPIO_Init+0x228>
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	69fa      	ldr	r2, [r7, #28]
 8002ed6:	f002 0203 	and.w	r2, r2, #3
 8002eda:	0092      	lsls	r2, r2, #2
 8002edc:	4093      	lsls	r3, r2
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ee4:	4935      	ldr	r1, [pc, #212]	; (8002fbc <HAL_GPIO_Init+0x310>)
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	089b      	lsrs	r3, r3, #2
 8002eea:	3302      	adds	r3, #2
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ef2:	4b3b      	ldr	r3, [pc, #236]	; (8002fe0 <HAL_GPIO_Init+0x334>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	43db      	mvns	r3, r3
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	4013      	ands	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f16:	4a32      	ldr	r2, [pc, #200]	; (8002fe0 <HAL_GPIO_Init+0x334>)
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f1c:	4b30      	ldr	r3, [pc, #192]	; (8002fe0 <HAL_GPIO_Init+0x334>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	43db      	mvns	r3, r3
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d003      	beq.n	8002f40 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f40:	4a27      	ldr	r2, [pc, #156]	; (8002fe0 <HAL_GPIO_Init+0x334>)
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f46:	4b26      	ldr	r3, [pc, #152]	; (8002fe0 <HAL_GPIO_Init+0x334>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	4013      	ands	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f6a:	4a1d      	ldr	r2, [pc, #116]	; (8002fe0 <HAL_GPIO_Init+0x334>)
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f70:	4b1b      	ldr	r3, [pc, #108]	; (8002fe0 <HAL_GPIO_Init+0x334>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f94:	4a12      	ldr	r2, [pc, #72]	; (8002fe0 <HAL_GPIO_Init+0x334>)
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	61fb      	str	r3, [r7, #28]
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	2b0f      	cmp	r3, #15
 8002fa4:	f67f ae90 	bls.w	8002cc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fa8:	bf00      	nop
 8002faa:	bf00      	nop
 8002fac:	3724      	adds	r7, #36	; 0x24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	40023800 	.word	0x40023800
 8002fbc:	40013800 	.word	0x40013800
 8002fc0:	40020000 	.word	0x40020000
 8002fc4:	40020400 	.word	0x40020400
 8002fc8:	40020800 	.word	0x40020800
 8002fcc:	40020c00 	.word	0x40020c00
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	40021400 	.word	0x40021400
 8002fd8:	40021800 	.word	0x40021800
 8002fdc:	40021c00 	.word	0x40021c00
 8002fe0:	40013c00 	.word	0x40013c00

08002fe4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	460b      	mov	r3, r1
 8002fee:	807b      	strh	r3, [r7, #2]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ff4:	787b      	ldrb	r3, [r7, #1]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ffa:	887a      	ldrh	r2, [r7, #2]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003000:	e003      	b.n	800300a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003002:	887b      	ldrh	r3, [r7, #2]
 8003004:	041a      	lsls	r2, r3, #16
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	619a      	str	r2, [r3, #24]
}
 800300a:	bf00      	nop
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
	...

08003018 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e264      	b.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d075      	beq.n	8003122 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003036:	4ba3      	ldr	r3, [pc, #652]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 030c 	and.w	r3, r3, #12
 800303e:	2b04      	cmp	r3, #4
 8003040:	d00c      	beq.n	800305c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003042:	4ba0      	ldr	r3, [pc, #640]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800304a:	2b08      	cmp	r3, #8
 800304c:	d112      	bne.n	8003074 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800304e:	4b9d      	ldr	r3, [pc, #628]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003056:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800305a:	d10b      	bne.n	8003074 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800305c:	4b99      	ldr	r3, [pc, #612]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d05b      	beq.n	8003120 <HAL_RCC_OscConfig+0x108>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d157      	bne.n	8003120 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e23f      	b.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800307c:	d106      	bne.n	800308c <HAL_RCC_OscConfig+0x74>
 800307e:	4b91      	ldr	r3, [pc, #580]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a90      	ldr	r2, [pc, #576]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 8003084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	e01d      	b.n	80030c8 <HAL_RCC_OscConfig+0xb0>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003094:	d10c      	bne.n	80030b0 <HAL_RCC_OscConfig+0x98>
 8003096:	4b8b      	ldr	r3, [pc, #556]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a8a      	ldr	r2, [pc, #552]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 800309c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	4b88      	ldr	r3, [pc, #544]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a87      	ldr	r2, [pc, #540]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 80030a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ac:	6013      	str	r3, [r2, #0]
 80030ae:	e00b      	b.n	80030c8 <HAL_RCC_OscConfig+0xb0>
 80030b0:	4b84      	ldr	r3, [pc, #528]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a83      	ldr	r2, [pc, #524]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 80030b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ba:	6013      	str	r3, [r2, #0]
 80030bc:	4b81      	ldr	r3, [pc, #516]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a80      	ldr	r2, [pc, #512]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 80030c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d013      	beq.n	80030f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d0:	f7ff f8a8 	bl	8002224 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030d8:	f7ff f8a4 	bl	8002224 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b64      	cmp	r3, #100	; 0x64
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e204      	b.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ea:	4b76      	ldr	r3, [pc, #472]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0f0      	beq.n	80030d8 <HAL_RCC_OscConfig+0xc0>
 80030f6:	e014      	b.n	8003122 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f8:	f7ff f894 	bl	8002224 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003100:	f7ff f890 	bl	8002224 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b64      	cmp	r3, #100	; 0x64
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e1f0      	b.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003112:	4b6c      	ldr	r3, [pc, #432]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1f0      	bne.n	8003100 <HAL_RCC_OscConfig+0xe8>
 800311e:	e000      	b.n	8003122 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d063      	beq.n	80031f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800312e:	4b65      	ldr	r3, [pc, #404]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 030c 	and.w	r3, r3, #12
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00b      	beq.n	8003152 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800313a:	4b62      	ldr	r3, [pc, #392]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003142:	2b08      	cmp	r3, #8
 8003144:	d11c      	bne.n	8003180 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003146:	4b5f      	ldr	r3, [pc, #380]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d116      	bne.n	8003180 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003152:	4b5c      	ldr	r3, [pc, #368]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d005      	beq.n	800316a <HAL_RCC_OscConfig+0x152>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d001      	beq.n	800316a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e1c4      	b.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800316a:	4b56      	ldr	r3, [pc, #344]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	4952      	ldr	r1, [pc, #328]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 800317a:	4313      	orrs	r3, r2
 800317c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800317e:	e03a      	b.n	80031f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d020      	beq.n	80031ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003188:	4b4f      	ldr	r3, [pc, #316]	; (80032c8 <HAL_RCC_OscConfig+0x2b0>)
 800318a:	2201      	movs	r2, #1
 800318c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318e:	f7ff f849 	bl	8002224 <HAL_GetTick>
 8003192:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003194:	e008      	b.n	80031a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003196:	f7ff f845 	bl	8002224 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e1a5      	b.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a8:	4b46      	ldr	r3, [pc, #280]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d0f0      	beq.n	8003196 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b4:	4b43      	ldr	r3, [pc, #268]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	4940      	ldr	r1, [pc, #256]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	600b      	str	r3, [r1, #0]
 80031c8:	e015      	b.n	80031f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031ca:	4b3f      	ldr	r3, [pc, #252]	; (80032c8 <HAL_RCC_OscConfig+0x2b0>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d0:	f7ff f828 	bl	8002224 <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031d8:	f7ff f824 	bl	8002224 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e184      	b.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ea:	4b36      	ldr	r3, [pc, #216]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1f0      	bne.n	80031d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d030      	beq.n	8003264 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d016      	beq.n	8003238 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800320a:	4b30      	ldr	r3, [pc, #192]	; (80032cc <HAL_RCC_OscConfig+0x2b4>)
 800320c:	2201      	movs	r2, #1
 800320e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003210:	f7ff f808 	bl	8002224 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003218:	f7ff f804 	bl	8002224 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e164      	b.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800322a:	4b26      	ldr	r3, [pc, #152]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 800322c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0f0      	beq.n	8003218 <HAL_RCC_OscConfig+0x200>
 8003236:	e015      	b.n	8003264 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003238:	4b24      	ldr	r3, [pc, #144]	; (80032cc <HAL_RCC_OscConfig+0x2b4>)
 800323a:	2200      	movs	r2, #0
 800323c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800323e:	f7fe fff1 	bl	8002224 <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003244:	e008      	b.n	8003258 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003246:	f7fe ffed 	bl	8002224 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d901      	bls.n	8003258 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e14d      	b.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003258:	4b1a      	ldr	r3, [pc, #104]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 800325a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1f0      	bne.n	8003246 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 80a0 	beq.w	80033b2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003272:	2300      	movs	r3, #0
 8003274:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003276:	4b13      	ldr	r3, [pc, #76]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10f      	bne.n	80032a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003282:	2300      	movs	r3, #0
 8003284:	60bb      	str	r3, [r7, #8]
 8003286:	4b0f      	ldr	r3, [pc, #60]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	4a0e      	ldr	r2, [pc, #56]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 800328c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003290:	6413      	str	r3, [r2, #64]	; 0x40
 8003292:	4b0c      	ldr	r3, [pc, #48]	; (80032c4 <HAL_RCC_OscConfig+0x2ac>)
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329a:	60bb      	str	r3, [r7, #8]
 800329c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800329e:	2301      	movs	r3, #1
 80032a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a2:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <HAL_RCC_OscConfig+0x2b8>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d121      	bne.n	80032f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ae:	4b08      	ldr	r3, [pc, #32]	; (80032d0 <HAL_RCC_OscConfig+0x2b8>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a07      	ldr	r2, [pc, #28]	; (80032d0 <HAL_RCC_OscConfig+0x2b8>)
 80032b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ba:	f7fe ffb3 	bl	8002224 <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c0:	e011      	b.n	80032e6 <HAL_RCC_OscConfig+0x2ce>
 80032c2:	bf00      	nop
 80032c4:	40023800 	.word	0x40023800
 80032c8:	42470000 	.word	0x42470000
 80032cc:	42470e80 	.word	0x42470e80
 80032d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032d4:	f7fe ffa6 	bl	8002224 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e106      	b.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e6:	4b85      	ldr	r3, [pc, #532]	; (80034fc <HAL_RCC_OscConfig+0x4e4>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d0f0      	beq.n	80032d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d106      	bne.n	8003308 <HAL_RCC_OscConfig+0x2f0>
 80032fa:	4b81      	ldr	r3, [pc, #516]	; (8003500 <HAL_RCC_OscConfig+0x4e8>)
 80032fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fe:	4a80      	ldr	r2, [pc, #512]	; (8003500 <HAL_RCC_OscConfig+0x4e8>)
 8003300:	f043 0301 	orr.w	r3, r3, #1
 8003304:	6713      	str	r3, [r2, #112]	; 0x70
 8003306:	e01c      	b.n	8003342 <HAL_RCC_OscConfig+0x32a>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	2b05      	cmp	r3, #5
 800330e:	d10c      	bne.n	800332a <HAL_RCC_OscConfig+0x312>
 8003310:	4b7b      	ldr	r3, [pc, #492]	; (8003500 <HAL_RCC_OscConfig+0x4e8>)
 8003312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003314:	4a7a      	ldr	r2, [pc, #488]	; (8003500 <HAL_RCC_OscConfig+0x4e8>)
 8003316:	f043 0304 	orr.w	r3, r3, #4
 800331a:	6713      	str	r3, [r2, #112]	; 0x70
 800331c:	4b78      	ldr	r3, [pc, #480]	; (8003500 <HAL_RCC_OscConfig+0x4e8>)
 800331e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003320:	4a77      	ldr	r2, [pc, #476]	; (8003500 <HAL_RCC_OscConfig+0x4e8>)
 8003322:	f043 0301 	orr.w	r3, r3, #1
 8003326:	6713      	str	r3, [r2, #112]	; 0x70
 8003328:	e00b      	b.n	8003342 <HAL_RCC_OscConfig+0x32a>
 800332a:	4b75      	ldr	r3, [pc, #468]	; (8003500 <HAL_RCC_OscConfig+0x4e8>)
 800332c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332e:	4a74      	ldr	r2, [pc, #464]	; (8003500 <HAL_RCC_OscConfig+0x4e8>)
 8003330:	f023 0301 	bic.w	r3, r3, #1
 8003334:	6713      	str	r3, [r2, #112]	; 0x70
 8003336:	4b72      	ldr	r3, [pc, #456]	; (8003500 <HAL_RCC_OscConfig+0x4e8>)
 8003338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800333a:	4a71      	ldr	r2, [pc, #452]	; (8003500 <HAL_RCC_OscConfig+0x4e8>)
 800333c:	f023 0304 	bic.w	r3, r3, #4
 8003340:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d015      	beq.n	8003376 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800334a:	f7fe ff6b 	bl	8002224 <HAL_GetTick>
 800334e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003350:	e00a      	b.n	8003368 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003352:	f7fe ff67 	bl	8002224 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003360:	4293      	cmp	r3, r2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e0c5      	b.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003368:	4b65      	ldr	r3, [pc, #404]	; (8003500 <HAL_RCC_OscConfig+0x4e8>)
 800336a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d0ee      	beq.n	8003352 <HAL_RCC_OscConfig+0x33a>
 8003374:	e014      	b.n	80033a0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003376:	f7fe ff55 	bl	8002224 <HAL_GetTick>
 800337a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800337c:	e00a      	b.n	8003394 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800337e:	f7fe ff51 	bl	8002224 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	f241 3288 	movw	r2, #5000	; 0x1388
 800338c:	4293      	cmp	r3, r2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e0af      	b.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003394:	4b5a      	ldr	r3, [pc, #360]	; (8003500 <HAL_RCC_OscConfig+0x4e8>)
 8003396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1ee      	bne.n	800337e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033a0:	7dfb      	ldrb	r3, [r7, #23]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d105      	bne.n	80033b2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033a6:	4b56      	ldr	r3, [pc, #344]	; (8003500 <HAL_RCC_OscConfig+0x4e8>)
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	4a55      	ldr	r2, [pc, #340]	; (8003500 <HAL_RCC_OscConfig+0x4e8>)
 80033ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f000 809b 	beq.w	80034f2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033bc:	4b50      	ldr	r3, [pc, #320]	; (8003500 <HAL_RCC_OscConfig+0x4e8>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f003 030c 	and.w	r3, r3, #12
 80033c4:	2b08      	cmp	r3, #8
 80033c6:	d05c      	beq.n	8003482 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d141      	bne.n	8003454 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033d0:	4b4c      	ldr	r3, [pc, #304]	; (8003504 <HAL_RCC_OscConfig+0x4ec>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d6:	f7fe ff25 	bl	8002224 <HAL_GetTick>
 80033da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033dc:	e008      	b.n	80033f0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033de:	f7fe ff21 	bl	8002224 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d901      	bls.n	80033f0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e081      	b.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033f0:	4b43      	ldr	r3, [pc, #268]	; (8003500 <HAL_RCC_OscConfig+0x4e8>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1f0      	bne.n	80033de <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	69da      	ldr	r2, [r3, #28]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	431a      	orrs	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	019b      	lsls	r3, r3, #6
 800340c:	431a      	orrs	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003412:	085b      	lsrs	r3, r3, #1
 8003414:	3b01      	subs	r3, #1
 8003416:	041b      	lsls	r3, r3, #16
 8003418:	431a      	orrs	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341e:	061b      	lsls	r3, r3, #24
 8003420:	4937      	ldr	r1, [pc, #220]	; (8003500 <HAL_RCC_OscConfig+0x4e8>)
 8003422:	4313      	orrs	r3, r2
 8003424:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003426:	4b37      	ldr	r3, [pc, #220]	; (8003504 <HAL_RCC_OscConfig+0x4ec>)
 8003428:	2201      	movs	r2, #1
 800342a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342c:	f7fe fefa 	bl	8002224 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003434:	f7fe fef6 	bl	8002224 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e056      	b.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003446:	4b2e      	ldr	r3, [pc, #184]	; (8003500 <HAL_RCC_OscConfig+0x4e8>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0f0      	beq.n	8003434 <HAL_RCC_OscConfig+0x41c>
 8003452:	e04e      	b.n	80034f2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003454:	4b2b      	ldr	r3, [pc, #172]	; (8003504 <HAL_RCC_OscConfig+0x4ec>)
 8003456:	2200      	movs	r2, #0
 8003458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345a:	f7fe fee3 	bl	8002224 <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003460:	e008      	b.n	8003474 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003462:	f7fe fedf 	bl	8002224 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e03f      	b.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003474:	4b22      	ldr	r3, [pc, #136]	; (8003500 <HAL_RCC_OscConfig+0x4e8>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1f0      	bne.n	8003462 <HAL_RCC_OscConfig+0x44a>
 8003480:	e037      	b.n	80034f2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d101      	bne.n	800348e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e032      	b.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800348e:	4b1c      	ldr	r3, [pc, #112]	; (8003500 <HAL_RCC_OscConfig+0x4e8>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d028      	beq.n	80034ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d121      	bne.n	80034ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d11a      	bne.n	80034ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034be:	4013      	ands	r3, r2
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034c4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d111      	bne.n	80034ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d4:	085b      	lsrs	r3, r3, #1
 80034d6:	3b01      	subs	r3, #1
 80034d8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034da:	429a      	cmp	r2, r3
 80034dc:	d107      	bne.n	80034ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d001      	beq.n	80034f2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e000      	b.n	80034f4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3718      	adds	r7, #24
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	40007000 	.word	0x40007000
 8003500:	40023800 	.word	0x40023800
 8003504:	42470060 	.word	0x42470060

08003508 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e0cc      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800351c:	4b68      	ldr	r3, [pc, #416]	; (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	429a      	cmp	r2, r3
 8003528:	d90c      	bls.n	8003544 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800352a:	4b65      	ldr	r3, [pc, #404]	; (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	b2d2      	uxtb	r2, r2
 8003530:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003532:	4b63      	ldr	r3, [pc, #396]	; (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0307 	and.w	r3, r3, #7
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	429a      	cmp	r2, r3
 800353e:	d001      	beq.n	8003544 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e0b8      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d020      	beq.n	8003592 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	d005      	beq.n	8003568 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800355c:	4b59      	ldr	r3, [pc, #356]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	4a58      	ldr	r2, [pc, #352]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003562:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003566:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0308 	and.w	r3, r3, #8
 8003570:	2b00      	cmp	r3, #0
 8003572:	d005      	beq.n	8003580 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003574:	4b53      	ldr	r3, [pc, #332]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	4a52      	ldr	r2, [pc, #328]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 800357a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800357e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003580:	4b50      	ldr	r3, [pc, #320]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	494d      	ldr	r1, [pc, #308]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 800358e:	4313      	orrs	r3, r2
 8003590:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d044      	beq.n	8003628 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d107      	bne.n	80035b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a6:	4b47      	ldr	r3, [pc, #284]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d119      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e07f      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d003      	beq.n	80035c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035c2:	2b03      	cmp	r3, #3
 80035c4:	d107      	bne.n	80035d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035c6:	4b3f      	ldr	r3, [pc, #252]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d109      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e06f      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d6:	4b3b      	ldr	r3, [pc, #236]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e067      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035e6:	4b37      	ldr	r3, [pc, #220]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f023 0203 	bic.w	r2, r3, #3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	4934      	ldr	r1, [pc, #208]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035f8:	f7fe fe14 	bl	8002224 <HAL_GetTick>
 80035fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035fe:	e00a      	b.n	8003616 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003600:	f7fe fe10 	bl	8002224 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	f241 3288 	movw	r2, #5000	; 0x1388
 800360e:	4293      	cmp	r3, r2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e04f      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003616:	4b2b      	ldr	r3, [pc, #172]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 020c 	and.w	r2, r3, #12
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	429a      	cmp	r2, r3
 8003626:	d1eb      	bne.n	8003600 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003628:	4b25      	ldr	r3, [pc, #148]	; (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	429a      	cmp	r2, r3
 8003634:	d20c      	bcs.n	8003650 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003636:	4b22      	ldr	r3, [pc, #136]	; (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	b2d2      	uxtb	r2, r2
 800363c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800363e:	4b20      	ldr	r3, [pc, #128]	; (80036c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	429a      	cmp	r2, r3
 800364a:	d001      	beq.n	8003650 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e032      	b.n	80036b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b00      	cmp	r3, #0
 800365a:	d008      	beq.n	800366e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800365c:	4b19      	ldr	r3, [pc, #100]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	4916      	ldr	r1, [pc, #88]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 800366a:	4313      	orrs	r3, r2
 800366c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0308 	and.w	r3, r3, #8
 8003676:	2b00      	cmp	r3, #0
 8003678:	d009      	beq.n	800368e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800367a:	4b12      	ldr	r3, [pc, #72]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	490e      	ldr	r1, [pc, #56]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 800368a:	4313      	orrs	r3, r2
 800368c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800368e:	f000 f821 	bl	80036d4 <HAL_RCC_GetSysClockFreq>
 8003692:	4602      	mov	r2, r0
 8003694:	4b0b      	ldr	r3, [pc, #44]	; (80036c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	091b      	lsrs	r3, r3, #4
 800369a:	f003 030f 	and.w	r3, r3, #15
 800369e:	490a      	ldr	r1, [pc, #40]	; (80036c8 <HAL_RCC_ClockConfig+0x1c0>)
 80036a0:	5ccb      	ldrb	r3, [r1, r3]
 80036a2:	fa22 f303 	lsr.w	r3, r2, r3
 80036a6:	4a09      	ldr	r2, [pc, #36]	; (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 80036a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036aa:	4b09      	ldr	r3, [pc, #36]	; (80036d0 <HAL_RCC_ClockConfig+0x1c8>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fe fd74 	bl	800219c <HAL_InitTick>

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	40023c00 	.word	0x40023c00
 80036c4:	40023800 	.word	0x40023800
 80036c8:	08008618 	.word	0x08008618
 80036cc:	20000000 	.word	0x20000000
 80036d0:	20000004 	.word	0x20000004

080036d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80036d8:	b084      	sub	sp, #16
 80036da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036dc:	2300      	movs	r3, #0
 80036de:	607b      	str	r3, [r7, #4]
 80036e0:	2300      	movs	r3, #0
 80036e2:	60fb      	str	r3, [r7, #12]
 80036e4:	2300      	movs	r3, #0
 80036e6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036ec:	4b67      	ldr	r3, [pc, #412]	; (800388c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f003 030c 	and.w	r3, r3, #12
 80036f4:	2b08      	cmp	r3, #8
 80036f6:	d00d      	beq.n	8003714 <HAL_RCC_GetSysClockFreq+0x40>
 80036f8:	2b08      	cmp	r3, #8
 80036fa:	f200 80bd 	bhi.w	8003878 <HAL_RCC_GetSysClockFreq+0x1a4>
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d002      	beq.n	8003708 <HAL_RCC_GetSysClockFreq+0x34>
 8003702:	2b04      	cmp	r3, #4
 8003704:	d003      	beq.n	800370e <HAL_RCC_GetSysClockFreq+0x3a>
 8003706:	e0b7      	b.n	8003878 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003708:	4b61      	ldr	r3, [pc, #388]	; (8003890 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800370a:	60bb      	str	r3, [r7, #8]
       break;
 800370c:	e0b7      	b.n	800387e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800370e:	4b61      	ldr	r3, [pc, #388]	; (8003894 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003710:	60bb      	str	r3, [r7, #8]
      break;
 8003712:	e0b4      	b.n	800387e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003714:	4b5d      	ldr	r3, [pc, #372]	; (800388c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800371c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800371e:	4b5b      	ldr	r3, [pc, #364]	; (800388c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d04d      	beq.n	80037c6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800372a:	4b58      	ldr	r3, [pc, #352]	; (800388c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	099b      	lsrs	r3, r3, #6
 8003730:	461a      	mov	r2, r3
 8003732:	f04f 0300 	mov.w	r3, #0
 8003736:	f240 10ff 	movw	r0, #511	; 0x1ff
 800373a:	f04f 0100 	mov.w	r1, #0
 800373e:	ea02 0800 	and.w	r8, r2, r0
 8003742:	ea03 0901 	and.w	r9, r3, r1
 8003746:	4640      	mov	r0, r8
 8003748:	4649      	mov	r1, r9
 800374a:	f04f 0200 	mov.w	r2, #0
 800374e:	f04f 0300 	mov.w	r3, #0
 8003752:	014b      	lsls	r3, r1, #5
 8003754:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003758:	0142      	lsls	r2, r0, #5
 800375a:	4610      	mov	r0, r2
 800375c:	4619      	mov	r1, r3
 800375e:	ebb0 0008 	subs.w	r0, r0, r8
 8003762:	eb61 0109 	sbc.w	r1, r1, r9
 8003766:	f04f 0200 	mov.w	r2, #0
 800376a:	f04f 0300 	mov.w	r3, #0
 800376e:	018b      	lsls	r3, r1, #6
 8003770:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003774:	0182      	lsls	r2, r0, #6
 8003776:	1a12      	subs	r2, r2, r0
 8003778:	eb63 0301 	sbc.w	r3, r3, r1
 800377c:	f04f 0000 	mov.w	r0, #0
 8003780:	f04f 0100 	mov.w	r1, #0
 8003784:	00d9      	lsls	r1, r3, #3
 8003786:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800378a:	00d0      	lsls	r0, r2, #3
 800378c:	4602      	mov	r2, r0
 800378e:	460b      	mov	r3, r1
 8003790:	eb12 0208 	adds.w	r2, r2, r8
 8003794:	eb43 0309 	adc.w	r3, r3, r9
 8003798:	f04f 0000 	mov.w	r0, #0
 800379c:	f04f 0100 	mov.w	r1, #0
 80037a0:	0259      	lsls	r1, r3, #9
 80037a2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80037a6:	0250      	lsls	r0, r2, #9
 80037a8:	4602      	mov	r2, r0
 80037aa:	460b      	mov	r3, r1
 80037ac:	4610      	mov	r0, r2
 80037ae:	4619      	mov	r1, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	461a      	mov	r2, r3
 80037b4:	f04f 0300 	mov.w	r3, #0
 80037b8:	f7fd fa46 	bl	8000c48 <__aeabi_uldivmod>
 80037bc:	4602      	mov	r2, r0
 80037be:	460b      	mov	r3, r1
 80037c0:	4613      	mov	r3, r2
 80037c2:	60fb      	str	r3, [r7, #12]
 80037c4:	e04a      	b.n	800385c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037c6:	4b31      	ldr	r3, [pc, #196]	; (800388c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	099b      	lsrs	r3, r3, #6
 80037cc:	461a      	mov	r2, r3
 80037ce:	f04f 0300 	mov.w	r3, #0
 80037d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80037d6:	f04f 0100 	mov.w	r1, #0
 80037da:	ea02 0400 	and.w	r4, r2, r0
 80037de:	ea03 0501 	and.w	r5, r3, r1
 80037e2:	4620      	mov	r0, r4
 80037e4:	4629      	mov	r1, r5
 80037e6:	f04f 0200 	mov.w	r2, #0
 80037ea:	f04f 0300 	mov.w	r3, #0
 80037ee:	014b      	lsls	r3, r1, #5
 80037f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80037f4:	0142      	lsls	r2, r0, #5
 80037f6:	4610      	mov	r0, r2
 80037f8:	4619      	mov	r1, r3
 80037fa:	1b00      	subs	r0, r0, r4
 80037fc:	eb61 0105 	sbc.w	r1, r1, r5
 8003800:	f04f 0200 	mov.w	r2, #0
 8003804:	f04f 0300 	mov.w	r3, #0
 8003808:	018b      	lsls	r3, r1, #6
 800380a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800380e:	0182      	lsls	r2, r0, #6
 8003810:	1a12      	subs	r2, r2, r0
 8003812:	eb63 0301 	sbc.w	r3, r3, r1
 8003816:	f04f 0000 	mov.w	r0, #0
 800381a:	f04f 0100 	mov.w	r1, #0
 800381e:	00d9      	lsls	r1, r3, #3
 8003820:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003824:	00d0      	lsls	r0, r2, #3
 8003826:	4602      	mov	r2, r0
 8003828:	460b      	mov	r3, r1
 800382a:	1912      	adds	r2, r2, r4
 800382c:	eb45 0303 	adc.w	r3, r5, r3
 8003830:	f04f 0000 	mov.w	r0, #0
 8003834:	f04f 0100 	mov.w	r1, #0
 8003838:	0299      	lsls	r1, r3, #10
 800383a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800383e:	0290      	lsls	r0, r2, #10
 8003840:	4602      	mov	r2, r0
 8003842:	460b      	mov	r3, r1
 8003844:	4610      	mov	r0, r2
 8003846:	4619      	mov	r1, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	461a      	mov	r2, r3
 800384c:	f04f 0300 	mov.w	r3, #0
 8003850:	f7fd f9fa 	bl	8000c48 <__aeabi_uldivmod>
 8003854:	4602      	mov	r2, r0
 8003856:	460b      	mov	r3, r1
 8003858:	4613      	mov	r3, r2
 800385a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800385c:	4b0b      	ldr	r3, [pc, #44]	; (800388c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	0c1b      	lsrs	r3, r3, #16
 8003862:	f003 0303 	and.w	r3, r3, #3
 8003866:	3301      	adds	r3, #1
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	fbb2 f3f3 	udiv	r3, r2, r3
 8003874:	60bb      	str	r3, [r7, #8]
      break;
 8003876:	e002      	b.n	800387e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003878:	4b05      	ldr	r3, [pc, #20]	; (8003890 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800387a:	60bb      	str	r3, [r7, #8]
      break;
 800387c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800387e:	68bb      	ldr	r3, [r7, #8]
}
 8003880:	4618      	mov	r0, r3
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800388a:	bf00      	nop
 800388c:	40023800 	.word	0x40023800
 8003890:	00f42400 	.word	0x00f42400
 8003894:	007a1200 	.word	0x007a1200

08003898 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800389c:	4b03      	ldr	r3, [pc, #12]	; (80038ac <HAL_RCC_GetHCLKFreq+0x14>)
 800389e:	681b      	ldr	r3, [r3, #0]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	20000000 	.word	0x20000000

080038b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038b4:	f7ff fff0 	bl	8003898 <HAL_RCC_GetHCLKFreq>
 80038b8:	4602      	mov	r2, r0
 80038ba:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	0a9b      	lsrs	r3, r3, #10
 80038c0:	f003 0307 	and.w	r3, r3, #7
 80038c4:	4903      	ldr	r1, [pc, #12]	; (80038d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038c6:	5ccb      	ldrb	r3, [r1, r3]
 80038c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40023800 	.word	0x40023800
 80038d4:	08008628 	.word	0x08008628

080038d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038dc:	f7ff ffdc 	bl	8003898 <HAL_RCC_GetHCLKFreq>
 80038e0:	4602      	mov	r2, r0
 80038e2:	4b05      	ldr	r3, [pc, #20]	; (80038f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	0b5b      	lsrs	r3, r3, #13
 80038e8:	f003 0307 	and.w	r3, r3, #7
 80038ec:	4903      	ldr	r1, [pc, #12]	; (80038fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80038ee:	5ccb      	ldrb	r3, [r1, r3]
 80038f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	40023800 	.word	0x40023800
 80038fc:	08008628 	.word	0x08008628

08003900 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e041      	b.n	8003996 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d106      	bne.n	800392c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7fe f98e 	bl	8001c48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2202      	movs	r2, #2
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	3304      	adds	r3, #4
 800393c:	4619      	mov	r1, r3
 800393e:	4610      	mov	r0, r2
 8003940:	f000 fc76 	bl	8004230 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b082      	sub	sp, #8
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d101      	bne.n	80039b0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e041      	b.n	8003a34 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d106      	bne.n	80039ca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 f839 	bl	8003a3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2202      	movs	r2, #2
 80039ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	3304      	adds	r3, #4
 80039da:	4619      	mov	r1, r3
 80039dc:	4610      	mov	r0, r2
 80039de:	f000 fc27 	bl	8004230 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3708      	adds	r7, #8
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d101      	bne.n	8003a64 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e097      	b.n	8003b94 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d106      	bne.n	8003a7e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f7fe f923 	bl	8001cc4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2202      	movs	r2, #2
 8003a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6812      	ldr	r2, [r2, #0]
 8003a90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a94:	f023 0307 	bic.w	r3, r3, #7
 8003a98:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	4610      	mov	r0, r2
 8003aa6:	f000 fbc3 	bl	8004230 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ad2:	f023 0303 	bic.w	r3, r3, #3
 8003ad6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	021b      	lsls	r3, r3, #8
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003af0:	f023 030c 	bic.w	r3, r3, #12
 8003af4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003afc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	68da      	ldr	r2, [r3, #12]
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	69db      	ldr	r3, [r3, #28]
 8003b0a:	021b      	lsls	r3, r3, #8
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	011a      	lsls	r2, r3, #4
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	031b      	lsls	r3, r3, #12
 8003b20:	4313      	orrs	r3, r2
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003b2e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003b36:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	011b      	lsls	r3, r3, #4
 8003b42:	4313      	orrs	r3, r2
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3718      	adds	r7, #24
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bac:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003bb4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003bbc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003bc4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d110      	bne.n	8003bee <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003bcc:	7bfb      	ldrb	r3, [r7, #15]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d102      	bne.n	8003bd8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003bd2:	7b7b      	ldrb	r3, [r7, #13]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d001      	beq.n	8003bdc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e069      	b.n	8003cb0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2202      	movs	r2, #2
 8003be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2202      	movs	r2, #2
 8003be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bec:	e031      	b.n	8003c52 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	2b04      	cmp	r3, #4
 8003bf2:	d110      	bne.n	8003c16 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003bf4:	7bbb      	ldrb	r3, [r7, #14]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d102      	bne.n	8003c00 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003bfa:	7b3b      	ldrb	r3, [r7, #12]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d001      	beq.n	8003c04 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e055      	b.n	8003cb0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2202      	movs	r2, #2
 8003c08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2202      	movs	r2, #2
 8003c10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c14:	e01d      	b.n	8003c52 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c16:	7bfb      	ldrb	r3, [r7, #15]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d108      	bne.n	8003c2e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c1c:	7bbb      	ldrb	r3, [r7, #14]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d105      	bne.n	8003c2e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c22:	7b7b      	ldrb	r3, [r7, #13]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d102      	bne.n	8003c2e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c28:	7b3b      	ldrb	r3, [r7, #12]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d001      	beq.n	8003c32 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e03e      	b.n	8003cb0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2202      	movs	r2, #2
 8003c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2202      	movs	r2, #2
 8003c46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2202      	movs	r2, #2
 8003c4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d003      	beq.n	8003c60 <HAL_TIM_Encoder_Start+0xc4>
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	2b04      	cmp	r3, #4
 8003c5c:	d008      	beq.n	8003c70 <HAL_TIM_Encoder_Start+0xd4>
 8003c5e:	e00f      	b.n	8003c80 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2201      	movs	r2, #1
 8003c66:	2100      	movs	r1, #0
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f000 fdcb 	bl	8004804 <TIM_CCxChannelCmd>
      break;
 8003c6e:	e016      	b.n	8003c9e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2201      	movs	r2, #1
 8003c76:	2104      	movs	r1, #4
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f000 fdc3 	bl	8004804 <TIM_CCxChannelCmd>
      break;
 8003c7e:	e00e      	b.n	8003c9e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2201      	movs	r2, #1
 8003c86:	2100      	movs	r1, #0
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 fdbb 	bl	8004804 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2201      	movs	r2, #1
 8003c94:	2104      	movs	r1, #4
 8003c96:	4618      	mov	r0, r3
 8003c98:	f000 fdb4 	bl	8004804 <TIM_CCxChannelCmd>
      break;
 8003c9c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f042 0201 	orr.w	r2, r2, #1
 8003cac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d122      	bne.n	8003d14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d11b      	bne.n	8003d14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f06f 0202 	mvn.w	r2, #2
 8003ce4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	f003 0303 	and.w	r3, r3, #3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 fa7a 	bl	80041f4 <HAL_TIM_IC_CaptureCallback>
 8003d00:	e005      	b.n	8003d0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 fa6c 	bl	80041e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 fa7d 	bl	8004208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	f003 0304 	and.w	r3, r3, #4
 8003d1e:	2b04      	cmp	r3, #4
 8003d20:	d122      	bne.n	8003d68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	f003 0304 	and.w	r3, r3, #4
 8003d2c:	2b04      	cmp	r3, #4
 8003d2e:	d11b      	bne.n	8003d68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f06f 0204 	mvn.w	r2, #4
 8003d38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2202      	movs	r2, #2
 8003d3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d003      	beq.n	8003d56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 fa50 	bl	80041f4 <HAL_TIM_IC_CaptureCallback>
 8003d54:	e005      	b.n	8003d62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 fa42 	bl	80041e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 fa53 	bl	8004208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	f003 0308 	and.w	r3, r3, #8
 8003d72:	2b08      	cmp	r3, #8
 8003d74:	d122      	bne.n	8003dbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f003 0308 	and.w	r3, r3, #8
 8003d80:	2b08      	cmp	r3, #8
 8003d82:	d11b      	bne.n	8003dbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f06f 0208 	mvn.w	r2, #8
 8003d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2204      	movs	r2, #4
 8003d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	69db      	ldr	r3, [r3, #28]
 8003d9a:	f003 0303 	and.w	r3, r3, #3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 fa26 	bl	80041f4 <HAL_TIM_IC_CaptureCallback>
 8003da8:	e005      	b.n	8003db6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 fa18 	bl	80041e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 fa29 	bl	8004208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	f003 0310 	and.w	r3, r3, #16
 8003dc6:	2b10      	cmp	r3, #16
 8003dc8:	d122      	bne.n	8003e10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f003 0310 	and.w	r3, r3, #16
 8003dd4:	2b10      	cmp	r3, #16
 8003dd6:	d11b      	bne.n	8003e10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f06f 0210 	mvn.w	r2, #16
 8003de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2208      	movs	r2, #8
 8003de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f9fc 	bl	80041f4 <HAL_TIM_IC_CaptureCallback>
 8003dfc:	e005      	b.n	8003e0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f9ee 	bl	80041e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 f9ff 	bl	8004208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d10e      	bne.n	8003e3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d107      	bne.n	8003e3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f06f 0201 	mvn.w	r2, #1
 8003e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f9c8 	bl	80041cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e46:	2b80      	cmp	r3, #128	; 0x80
 8003e48:	d10e      	bne.n	8003e68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e54:	2b80      	cmp	r3, #128	; 0x80
 8003e56:	d107      	bne.n	8003e68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 fdcc 	bl	8004a00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e72:	2b40      	cmp	r3, #64	; 0x40
 8003e74:	d10e      	bne.n	8003e94 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e80:	2b40      	cmp	r3, #64	; 0x40
 8003e82:	d107      	bne.n	8003e94 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f9c4 	bl	800421c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	f003 0320 	and.w	r3, r3, #32
 8003e9e:	2b20      	cmp	r3, #32
 8003ea0:	d10e      	bne.n	8003ec0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f003 0320 	and.w	r3, r3, #32
 8003eac:	2b20      	cmp	r3, #32
 8003eae:	d107      	bne.n	8003ec0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f06f 0220 	mvn.w	r2, #32
 8003eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 fd96 	bl	80049ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ec0:	bf00      	nop
 8003ec2:	3708      	adds	r7, #8
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d101      	bne.n	8003ee2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003ede:	2302      	movs	r3, #2
 8003ee0:	e0ac      	b.n	800403c <HAL_TIM_PWM_ConfigChannel+0x174>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2b0c      	cmp	r3, #12
 8003eee:	f200 809f 	bhi.w	8004030 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003ef2:	a201      	add	r2, pc, #4	; (adr r2, 8003ef8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef8:	08003f2d 	.word	0x08003f2d
 8003efc:	08004031 	.word	0x08004031
 8003f00:	08004031 	.word	0x08004031
 8003f04:	08004031 	.word	0x08004031
 8003f08:	08003f6d 	.word	0x08003f6d
 8003f0c:	08004031 	.word	0x08004031
 8003f10:	08004031 	.word	0x08004031
 8003f14:	08004031 	.word	0x08004031
 8003f18:	08003faf 	.word	0x08003faf
 8003f1c:	08004031 	.word	0x08004031
 8003f20:	08004031 	.word	0x08004031
 8003f24:	08004031 	.word	0x08004031
 8003f28:	08003fef 	.word	0x08003fef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68b9      	ldr	r1, [r7, #8]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 fa1c 	bl	8004370 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	699a      	ldr	r2, [r3, #24]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f042 0208 	orr.w	r2, r2, #8
 8003f46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	699a      	ldr	r2, [r3, #24]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 0204 	bic.w	r2, r2, #4
 8003f56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6999      	ldr	r1, [r3, #24]
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	691a      	ldr	r2, [r3, #16]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	619a      	str	r2, [r3, #24]
      break;
 8003f6a:	e062      	b.n	8004032 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68b9      	ldr	r1, [r7, #8]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f000 fa6c 	bl	8004450 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	699a      	ldr	r2, [r3, #24]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	699a      	ldr	r2, [r3, #24]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6999      	ldr	r1, [r3, #24]
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	021a      	lsls	r2, r3, #8
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	619a      	str	r2, [r3, #24]
      break;
 8003fac:	e041      	b.n	8004032 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68b9      	ldr	r1, [r7, #8]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f000 fac1 	bl	800453c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	69da      	ldr	r2, [r3, #28]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f042 0208 	orr.w	r2, r2, #8
 8003fc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	69da      	ldr	r2, [r3, #28]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 0204 	bic.w	r2, r2, #4
 8003fd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	69d9      	ldr	r1, [r3, #28]
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	691a      	ldr	r2, [r3, #16]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	61da      	str	r2, [r3, #28]
      break;
 8003fec:	e021      	b.n	8004032 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68b9      	ldr	r1, [r7, #8]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f000 fb15 	bl	8004624 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	69da      	ldr	r2, [r3, #28]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004008:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	69da      	ldr	r2, [r3, #28]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004018:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	69d9      	ldr	r1, [r3, #28]
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	021a      	lsls	r2, r3, #8
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	430a      	orrs	r2, r1
 800402c:	61da      	str	r2, [r3, #28]
      break;
 800402e:	e000      	b.n	8004032 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004030:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004054:	2b01      	cmp	r3, #1
 8004056:	d101      	bne.n	800405c <HAL_TIM_ConfigClockSource+0x18>
 8004058:	2302      	movs	r3, #2
 800405a:	e0b3      	b.n	80041c4 <HAL_TIM_ConfigClockSource+0x180>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2202      	movs	r2, #2
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800407a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004082:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004094:	d03e      	beq.n	8004114 <HAL_TIM_ConfigClockSource+0xd0>
 8004096:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800409a:	f200 8087 	bhi.w	80041ac <HAL_TIM_ConfigClockSource+0x168>
 800409e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040a2:	f000 8085 	beq.w	80041b0 <HAL_TIM_ConfigClockSource+0x16c>
 80040a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040aa:	d87f      	bhi.n	80041ac <HAL_TIM_ConfigClockSource+0x168>
 80040ac:	2b70      	cmp	r3, #112	; 0x70
 80040ae:	d01a      	beq.n	80040e6 <HAL_TIM_ConfigClockSource+0xa2>
 80040b0:	2b70      	cmp	r3, #112	; 0x70
 80040b2:	d87b      	bhi.n	80041ac <HAL_TIM_ConfigClockSource+0x168>
 80040b4:	2b60      	cmp	r3, #96	; 0x60
 80040b6:	d050      	beq.n	800415a <HAL_TIM_ConfigClockSource+0x116>
 80040b8:	2b60      	cmp	r3, #96	; 0x60
 80040ba:	d877      	bhi.n	80041ac <HAL_TIM_ConfigClockSource+0x168>
 80040bc:	2b50      	cmp	r3, #80	; 0x50
 80040be:	d03c      	beq.n	800413a <HAL_TIM_ConfigClockSource+0xf6>
 80040c0:	2b50      	cmp	r3, #80	; 0x50
 80040c2:	d873      	bhi.n	80041ac <HAL_TIM_ConfigClockSource+0x168>
 80040c4:	2b40      	cmp	r3, #64	; 0x40
 80040c6:	d058      	beq.n	800417a <HAL_TIM_ConfigClockSource+0x136>
 80040c8:	2b40      	cmp	r3, #64	; 0x40
 80040ca:	d86f      	bhi.n	80041ac <HAL_TIM_ConfigClockSource+0x168>
 80040cc:	2b30      	cmp	r3, #48	; 0x30
 80040ce:	d064      	beq.n	800419a <HAL_TIM_ConfigClockSource+0x156>
 80040d0:	2b30      	cmp	r3, #48	; 0x30
 80040d2:	d86b      	bhi.n	80041ac <HAL_TIM_ConfigClockSource+0x168>
 80040d4:	2b20      	cmp	r3, #32
 80040d6:	d060      	beq.n	800419a <HAL_TIM_ConfigClockSource+0x156>
 80040d8:	2b20      	cmp	r3, #32
 80040da:	d867      	bhi.n	80041ac <HAL_TIM_ConfigClockSource+0x168>
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d05c      	beq.n	800419a <HAL_TIM_ConfigClockSource+0x156>
 80040e0:	2b10      	cmp	r3, #16
 80040e2:	d05a      	beq.n	800419a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80040e4:	e062      	b.n	80041ac <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6818      	ldr	r0, [r3, #0]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	6899      	ldr	r1, [r3, #8]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	f000 fb65 	bl	80047c4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004108:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	609a      	str	r2, [r3, #8]
      break;
 8004112:	e04e      	b.n	80041b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6818      	ldr	r0, [r3, #0]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	6899      	ldr	r1, [r3, #8]
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	f000 fb4e 	bl	80047c4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689a      	ldr	r2, [r3, #8]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004136:	609a      	str	r2, [r3, #8]
      break;
 8004138:	e03b      	b.n	80041b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6818      	ldr	r0, [r3, #0]
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	6859      	ldr	r1, [r3, #4]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	461a      	mov	r2, r3
 8004148:	f000 fac2 	bl	80046d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2150      	movs	r1, #80	; 0x50
 8004152:	4618      	mov	r0, r3
 8004154:	f000 fb1b 	bl	800478e <TIM_ITRx_SetConfig>
      break;
 8004158:	e02b      	b.n	80041b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6818      	ldr	r0, [r3, #0]
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	6859      	ldr	r1, [r3, #4]
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	461a      	mov	r2, r3
 8004168:	f000 fae1 	bl	800472e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2160      	movs	r1, #96	; 0x60
 8004172:	4618      	mov	r0, r3
 8004174:	f000 fb0b 	bl	800478e <TIM_ITRx_SetConfig>
      break;
 8004178:	e01b      	b.n	80041b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6818      	ldr	r0, [r3, #0]
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	6859      	ldr	r1, [r3, #4]
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	461a      	mov	r2, r3
 8004188:	f000 faa2 	bl	80046d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2140      	movs	r1, #64	; 0x40
 8004192:	4618      	mov	r0, r3
 8004194:	f000 fafb 	bl	800478e <TIM_ITRx_SetConfig>
      break;
 8004198:	e00b      	b.n	80041b2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4619      	mov	r1, r3
 80041a4:	4610      	mov	r0, r2
 80041a6:	f000 faf2 	bl	800478e <TIM_ITRx_SetConfig>
        break;
 80041aa:	e002      	b.n	80041b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80041ac:	bf00      	nop
 80041ae:	e000      	b.n	80041b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80041b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a40      	ldr	r2, [pc, #256]	; (8004344 <TIM_Base_SetConfig+0x114>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d013      	beq.n	8004270 <TIM_Base_SetConfig+0x40>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800424e:	d00f      	beq.n	8004270 <TIM_Base_SetConfig+0x40>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a3d      	ldr	r2, [pc, #244]	; (8004348 <TIM_Base_SetConfig+0x118>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d00b      	beq.n	8004270 <TIM_Base_SetConfig+0x40>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a3c      	ldr	r2, [pc, #240]	; (800434c <TIM_Base_SetConfig+0x11c>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d007      	beq.n	8004270 <TIM_Base_SetConfig+0x40>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a3b      	ldr	r2, [pc, #236]	; (8004350 <TIM_Base_SetConfig+0x120>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d003      	beq.n	8004270 <TIM_Base_SetConfig+0x40>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a3a      	ldr	r2, [pc, #232]	; (8004354 <TIM_Base_SetConfig+0x124>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d108      	bne.n	8004282 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004276:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	4313      	orrs	r3, r2
 8004280:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a2f      	ldr	r2, [pc, #188]	; (8004344 <TIM_Base_SetConfig+0x114>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d02b      	beq.n	80042e2 <TIM_Base_SetConfig+0xb2>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004290:	d027      	beq.n	80042e2 <TIM_Base_SetConfig+0xb2>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a2c      	ldr	r2, [pc, #176]	; (8004348 <TIM_Base_SetConfig+0x118>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d023      	beq.n	80042e2 <TIM_Base_SetConfig+0xb2>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a2b      	ldr	r2, [pc, #172]	; (800434c <TIM_Base_SetConfig+0x11c>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d01f      	beq.n	80042e2 <TIM_Base_SetConfig+0xb2>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a2a      	ldr	r2, [pc, #168]	; (8004350 <TIM_Base_SetConfig+0x120>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d01b      	beq.n	80042e2 <TIM_Base_SetConfig+0xb2>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a29      	ldr	r2, [pc, #164]	; (8004354 <TIM_Base_SetConfig+0x124>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d017      	beq.n	80042e2 <TIM_Base_SetConfig+0xb2>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a28      	ldr	r2, [pc, #160]	; (8004358 <TIM_Base_SetConfig+0x128>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d013      	beq.n	80042e2 <TIM_Base_SetConfig+0xb2>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a27      	ldr	r2, [pc, #156]	; (800435c <TIM_Base_SetConfig+0x12c>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d00f      	beq.n	80042e2 <TIM_Base_SetConfig+0xb2>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a26      	ldr	r2, [pc, #152]	; (8004360 <TIM_Base_SetConfig+0x130>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d00b      	beq.n	80042e2 <TIM_Base_SetConfig+0xb2>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a25      	ldr	r2, [pc, #148]	; (8004364 <TIM_Base_SetConfig+0x134>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d007      	beq.n	80042e2 <TIM_Base_SetConfig+0xb2>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a24      	ldr	r2, [pc, #144]	; (8004368 <TIM_Base_SetConfig+0x138>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d003      	beq.n	80042e2 <TIM_Base_SetConfig+0xb2>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a23      	ldr	r2, [pc, #140]	; (800436c <TIM_Base_SetConfig+0x13c>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d108      	bne.n	80042f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	4313      	orrs	r3, r2
 8004300:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	689a      	ldr	r2, [r3, #8]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a0a      	ldr	r2, [pc, #40]	; (8004344 <TIM_Base_SetConfig+0x114>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d003      	beq.n	8004328 <TIM_Base_SetConfig+0xf8>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a0c      	ldr	r2, [pc, #48]	; (8004354 <TIM_Base_SetConfig+0x124>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d103      	bne.n	8004330 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	691a      	ldr	r2, [r3, #16]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	615a      	str	r2, [r3, #20]
}
 8004336:	bf00      	nop
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	40010000 	.word	0x40010000
 8004348:	40000400 	.word	0x40000400
 800434c:	40000800 	.word	0x40000800
 8004350:	40000c00 	.word	0x40000c00
 8004354:	40010400 	.word	0x40010400
 8004358:	40014000 	.word	0x40014000
 800435c:	40014400 	.word	0x40014400
 8004360:	40014800 	.word	0x40014800
 8004364:	40001800 	.word	0x40001800
 8004368:	40001c00 	.word	0x40001c00
 800436c:	40002000 	.word	0x40002000

08004370 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004370:	b480      	push	{r7}
 8004372:	b087      	sub	sp, #28
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	f023 0201 	bic.w	r2, r3, #1
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800439e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f023 0303 	bic.w	r3, r3, #3
 80043a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	f023 0302 	bic.w	r3, r3, #2
 80043b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a20      	ldr	r2, [pc, #128]	; (8004448 <TIM_OC1_SetConfig+0xd8>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d003      	beq.n	80043d4 <TIM_OC1_SetConfig+0x64>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a1f      	ldr	r2, [pc, #124]	; (800444c <TIM_OC1_SetConfig+0xdc>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d10c      	bne.n	80043ee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	f023 0308 	bic.w	r3, r3, #8
 80043da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	f023 0304 	bic.w	r3, r3, #4
 80043ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a15      	ldr	r2, [pc, #84]	; (8004448 <TIM_OC1_SetConfig+0xd8>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d003      	beq.n	80043fe <TIM_OC1_SetConfig+0x8e>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a14      	ldr	r2, [pc, #80]	; (800444c <TIM_OC1_SetConfig+0xdc>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d111      	bne.n	8004422 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004404:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800440c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	4313      	orrs	r3, r2
 8004416:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	4313      	orrs	r3, r2
 8004420:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	685a      	ldr	r2, [r3, #4]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	621a      	str	r2, [r3, #32]
}
 800443c:	bf00      	nop
 800443e:	371c      	adds	r7, #28
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr
 8004448:	40010000 	.word	0x40010000
 800444c:	40010400 	.word	0x40010400

08004450 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004450:	b480      	push	{r7}
 8004452:	b087      	sub	sp, #28
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	f023 0210 	bic.w	r2, r3, #16
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800447e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004486:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	021b      	lsls	r3, r3, #8
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	4313      	orrs	r3, r2
 8004492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	f023 0320 	bic.w	r3, r3, #32
 800449a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	011b      	lsls	r3, r3, #4
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a22      	ldr	r2, [pc, #136]	; (8004534 <TIM_OC2_SetConfig+0xe4>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d003      	beq.n	80044b8 <TIM_OC2_SetConfig+0x68>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a21      	ldr	r2, [pc, #132]	; (8004538 <TIM_OC2_SetConfig+0xe8>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d10d      	bne.n	80044d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	011b      	lsls	r3, r3, #4
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a17      	ldr	r2, [pc, #92]	; (8004534 <TIM_OC2_SetConfig+0xe4>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d003      	beq.n	80044e4 <TIM_OC2_SetConfig+0x94>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a16      	ldr	r2, [pc, #88]	; (8004538 <TIM_OC2_SetConfig+0xe8>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d113      	bne.n	800450c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	4313      	orrs	r3, r2
 800450a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	621a      	str	r2, [r3, #32]
}
 8004526:	bf00      	nop
 8004528:	371c      	adds	r7, #28
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	40010000 	.word	0x40010000
 8004538:	40010400 	.word	0x40010400

0800453c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800453c:	b480      	push	{r7}
 800453e:	b087      	sub	sp, #28
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800456a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f023 0303 	bic.w	r3, r3, #3
 8004572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	4313      	orrs	r3, r2
 800457c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004584:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	021b      	lsls	r3, r3, #8
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	4313      	orrs	r3, r2
 8004590:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a21      	ldr	r2, [pc, #132]	; (800461c <TIM_OC3_SetConfig+0xe0>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d003      	beq.n	80045a2 <TIM_OC3_SetConfig+0x66>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a20      	ldr	r2, [pc, #128]	; (8004620 <TIM_OC3_SetConfig+0xe4>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d10d      	bne.n	80045be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	021b      	lsls	r3, r3, #8
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a16      	ldr	r2, [pc, #88]	; (800461c <TIM_OC3_SetConfig+0xe0>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d003      	beq.n	80045ce <TIM_OC3_SetConfig+0x92>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a15      	ldr	r2, [pc, #84]	; (8004620 <TIM_OC3_SetConfig+0xe4>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d113      	bne.n	80045f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	011b      	lsls	r3, r3, #4
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	011b      	lsls	r3, r3, #4
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	621a      	str	r2, [r3, #32]
}
 8004610:	bf00      	nop
 8004612:	371c      	adds	r7, #28
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr
 800461c:	40010000 	.word	0x40010000
 8004620:	40010400 	.word	0x40010400

08004624 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004624:	b480      	push	{r7}
 8004626:	b087      	sub	sp, #28
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	69db      	ldr	r3, [r3, #28]
 800464a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800465a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	021b      	lsls	r3, r3, #8
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	4313      	orrs	r3, r2
 8004666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800466e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	031b      	lsls	r3, r3, #12
 8004676:	693a      	ldr	r2, [r7, #16]
 8004678:	4313      	orrs	r3, r2
 800467a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a12      	ldr	r2, [pc, #72]	; (80046c8 <TIM_OC4_SetConfig+0xa4>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d003      	beq.n	800468c <TIM_OC4_SetConfig+0x68>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a11      	ldr	r2, [pc, #68]	; (80046cc <TIM_OC4_SetConfig+0xa8>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d109      	bne.n	80046a0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004692:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	019b      	lsls	r3, r3, #6
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	4313      	orrs	r3, r2
 800469e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	685a      	ldr	r2, [r3, #4]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	621a      	str	r2, [r3, #32]
}
 80046ba:	bf00      	nop
 80046bc:	371c      	adds	r7, #28
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	40010000 	.word	0x40010000
 80046cc:	40010400 	.word	0x40010400

080046d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b087      	sub	sp, #28
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	f023 0201 	bic.w	r2, r3, #1
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	011b      	lsls	r3, r3, #4
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	4313      	orrs	r3, r2
 8004704:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	f023 030a 	bic.w	r3, r3, #10
 800470c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	4313      	orrs	r3, r2
 8004714:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	621a      	str	r2, [r3, #32]
}
 8004722:	bf00      	nop
 8004724:	371c      	adds	r7, #28
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr

0800472e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800472e:	b480      	push	{r7}
 8004730:	b087      	sub	sp, #28
 8004732:	af00      	add	r7, sp, #0
 8004734:	60f8      	str	r0, [r7, #12]
 8004736:	60b9      	str	r1, [r7, #8]
 8004738:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	f023 0210 	bic.w	r2, r3, #16
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004758:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	031b      	lsls	r3, r3, #12
 800475e:	697a      	ldr	r2, [r7, #20]
 8004760:	4313      	orrs	r3, r2
 8004762:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800476a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	011b      	lsls	r3, r3, #4
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	4313      	orrs	r3, r2
 8004774:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	697a      	ldr	r2, [r7, #20]
 800477a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	621a      	str	r2, [r3, #32]
}
 8004782:	bf00      	nop
 8004784:	371c      	adds	r7, #28
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr

0800478e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800478e:	b480      	push	{r7}
 8004790:	b085      	sub	sp, #20
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
 8004796:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	f043 0307 	orr.w	r3, r3, #7
 80047b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	609a      	str	r2, [r3, #8]
}
 80047b8:	bf00      	nop
 80047ba:	3714      	adds	r7, #20
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b087      	sub	sp, #28
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
 80047d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	021a      	lsls	r2, r3, #8
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	431a      	orrs	r2, r3
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	609a      	str	r2, [r3, #8]
}
 80047f8:	bf00      	nop
 80047fa:	371c      	adds	r7, #28
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004804:	b480      	push	{r7}
 8004806:	b087      	sub	sp, #28
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	f003 031f 	and.w	r3, r3, #31
 8004816:	2201      	movs	r2, #1
 8004818:	fa02 f303 	lsl.w	r3, r2, r3
 800481c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6a1a      	ldr	r2, [r3, #32]
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	43db      	mvns	r3, r3
 8004826:	401a      	ands	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6a1a      	ldr	r2, [r3, #32]
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	f003 031f 	and.w	r3, r3, #31
 8004836:	6879      	ldr	r1, [r7, #4]
 8004838:	fa01 f303 	lsl.w	r3, r1, r3
 800483c:	431a      	orrs	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	621a      	str	r2, [r3, #32]
}
 8004842:	bf00      	nop
 8004844:	371c      	adds	r7, #28
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
	...

08004850 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004860:	2b01      	cmp	r3, #1
 8004862:	d101      	bne.n	8004868 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004864:	2302      	movs	r3, #2
 8004866:	e05a      	b.n	800491e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2202      	movs	r2, #2
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800488e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	4313      	orrs	r3, r2
 8004898:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a21      	ldr	r2, [pc, #132]	; (800492c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d022      	beq.n	80048f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b4:	d01d      	beq.n	80048f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a1d      	ldr	r2, [pc, #116]	; (8004930 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d018      	beq.n	80048f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a1b      	ldr	r2, [pc, #108]	; (8004934 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d013      	beq.n	80048f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a1a      	ldr	r2, [pc, #104]	; (8004938 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d00e      	beq.n	80048f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a18      	ldr	r2, [pc, #96]	; (800493c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d009      	beq.n	80048f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a17      	ldr	r2, [pc, #92]	; (8004940 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d004      	beq.n	80048f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a15      	ldr	r2, [pc, #84]	; (8004944 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d10c      	bne.n	800490c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	68ba      	ldr	r2, [r7, #8]
 8004900:	4313      	orrs	r3, r2
 8004902:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68ba      	ldr	r2, [r7, #8]
 800490a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	40010000 	.word	0x40010000
 8004930:	40000400 	.word	0x40000400
 8004934:	40000800 	.word	0x40000800
 8004938:	40000c00 	.word	0x40000c00
 800493c:	40010400 	.word	0x40010400
 8004940:	40014000 	.word	0x40014000
 8004944:	40001800 	.word	0x40001800

08004948 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004952:	2300      	movs	r3, #0
 8004954:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800495c:	2b01      	cmp	r3, #1
 800495e:	d101      	bne.n	8004964 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004960:	2302      	movs	r3, #2
 8004962:	e03d      	b.n	80049e0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	4313      	orrs	r3, r2
 8004978:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	4313      	orrs	r3, r2
 8004986:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	4313      	orrs	r3, r2
 8004994:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	4313      	orrs	r3, r2
 80049be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3714      	adds	r7, #20
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e03f      	b.n	8004aa6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d106      	bne.n	8004a40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f7fd faaa 	bl	8001f94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2224      	movs	r2, #36	; 0x24
 8004a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68da      	ldr	r2, [r3, #12]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 fd3d 	bl	80054d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	691a      	ldr	r2, [r3, #16]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	695a      	ldr	r2, [r3, #20]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68da      	ldr	r2, [r3, #12]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2220      	movs	r2, #32
 8004a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2220      	movs	r2, #32
 8004aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3708      	adds	r7, #8
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
	...

08004ab0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	4613      	mov	r3, r2
 8004abc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b20      	cmp	r3, #32
 8004ac8:	d153      	bne.n	8004b72 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d002      	beq.n	8004ad6 <HAL_UART_Transmit_DMA+0x26>
 8004ad0:	88fb      	ldrh	r3, [r7, #6]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e04c      	b.n	8004b74 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d101      	bne.n	8004ae8 <HAL_UART_Transmit_DMA+0x38>
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	e045      	b.n	8004b74 <HAL_UART_Transmit_DMA+0xc4>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	88fa      	ldrh	r2, [r7, #6]
 8004afa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	88fa      	ldrh	r2, [r7, #6]
 8004b00:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2221      	movs	r2, #33	; 0x21
 8004b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b14:	4a19      	ldr	r2, [pc, #100]	; (8004b7c <HAL_UART_Transmit_DMA+0xcc>)
 8004b16:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b1c:	4a18      	ldr	r2, [pc, #96]	; (8004b80 <HAL_UART_Transmit_DMA+0xd0>)
 8004b1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b24:	4a17      	ldr	r2, [pc, #92]	; (8004b84 <HAL_UART_Transmit_DMA+0xd4>)
 8004b26:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8004b30:	f107 0308 	add.w	r3, r7, #8
 8004b34:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	6819      	ldr	r1, [r3, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	3304      	adds	r3, #4
 8004b44:	461a      	mov	r2, r3
 8004b46:	88fb      	ldrh	r3, [r7, #6]
 8004b48:	f7fd fd5c 	bl	8002604 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b54:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	695a      	ldr	r2, [r3, #20]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b6c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	e000      	b.n	8004b74 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8004b72:	2302      	movs	r3, #2
  }
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3718      	adds	r7, #24
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	08004f95 	.word	0x08004f95
 8004b80:	08004fe7 	.word	0x08004fe7
 8004b84:	080050cf 	.word	0x080050cf

08004b88 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	4613      	mov	r3, r2
 8004b94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b20      	cmp	r3, #32
 8004ba0:	d11d      	bne.n	8004bde <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d002      	beq.n	8004bae <HAL_UART_Receive_DMA+0x26>
 8004ba8:	88fb      	ldrh	r3, [r7, #6]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d101      	bne.n	8004bb2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e016      	b.n	8004be0 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d101      	bne.n	8004bc0 <HAL_UART_Receive_DMA+0x38>
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	e00f      	b.n	8004be0 <HAL_UART_Receive_DMA+0x58>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8004bce:	88fb      	ldrh	r3, [r7, #6]
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	68b9      	ldr	r1, [r7, #8]
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f000 fac5 	bl	8005164 <UART_Start_Receive_DMA>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	e000      	b.n	8004be0 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004bde:	2302      	movs	r3, #2
  }
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b08a      	sub	sp, #40	; 0x28
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	f003 030f 	and.w	r3, r3, #15
 8004c16:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10d      	bne.n	8004c3a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c20:	f003 0320 	and.w	r3, r3, #32
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d008      	beq.n	8004c3a <HAL_UART_IRQHandler+0x52>
 8004c28:	6a3b      	ldr	r3, [r7, #32]
 8004c2a:	f003 0320 	and.w	r3, r3, #32
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d003      	beq.n	8004c3a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 fbb9 	bl	80053aa <UART_Receive_IT>
      return;
 8004c38:	e17c      	b.n	8004f34 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f000 80b1 	beq.w	8004da4 <HAL_UART_IRQHandler+0x1bc>
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	f003 0301 	and.w	r3, r3, #1
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d105      	bne.n	8004c58 <HAL_UART_IRQHandler+0x70>
 8004c4c:	6a3b      	ldr	r3, [r7, #32]
 8004c4e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f000 80a6 	beq.w	8004da4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00a      	beq.n	8004c78 <HAL_UART_IRQHandler+0x90>
 8004c62:	6a3b      	ldr	r3, [r7, #32]
 8004c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d005      	beq.n	8004c78 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c70:	f043 0201 	orr.w	r2, r3, #1
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7a:	f003 0304 	and.w	r3, r3, #4
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00a      	beq.n	8004c98 <HAL_UART_IRQHandler+0xb0>
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d005      	beq.n	8004c98 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c90:	f043 0202 	orr.w	r2, r3, #2
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9a:	f003 0302 	and.w	r3, r3, #2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00a      	beq.n	8004cb8 <HAL_UART_IRQHandler+0xd0>
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d005      	beq.n	8004cb8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb0:	f043 0204 	orr.w	r2, r3, #4
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cba:	f003 0308 	and.w	r3, r3, #8
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00f      	beq.n	8004ce2 <HAL_UART_IRQHandler+0xfa>
 8004cc2:	6a3b      	ldr	r3, [r7, #32]
 8004cc4:	f003 0320 	and.w	r3, r3, #32
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d104      	bne.n	8004cd6 <HAL_UART_IRQHandler+0xee>
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d005      	beq.n	8004ce2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cda:	f043 0208 	orr.w	r2, r3, #8
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	f000 811f 	beq.w	8004f2a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cee:	f003 0320 	and.w	r3, r3, #32
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d007      	beq.n	8004d06 <HAL_UART_IRQHandler+0x11e>
 8004cf6:	6a3b      	ldr	r3, [r7, #32]
 8004cf8:	f003 0320 	and.w	r3, r3, #32
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d002      	beq.n	8004d06 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 fb52 	bl	80053aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d10:	2b40      	cmp	r3, #64	; 0x40
 8004d12:	bf0c      	ite	eq
 8004d14:	2301      	moveq	r3, #1
 8004d16:	2300      	movne	r3, #0
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d20:	f003 0308 	and.w	r3, r3, #8
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d102      	bne.n	8004d2e <HAL_UART_IRQHandler+0x146>
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d031      	beq.n	8004d92 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 fa92 	bl	8005258 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d3e:	2b40      	cmp	r3, #64	; 0x40
 8004d40:	d123      	bne.n	8004d8a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	695a      	ldr	r2, [r3, #20]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d50:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d013      	beq.n	8004d82 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5e:	4a77      	ldr	r2, [pc, #476]	; (8004f3c <HAL_UART_IRQHandler+0x354>)
 8004d60:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7fd fd14 	bl	8002794 <HAL_DMA_Abort_IT>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d016      	beq.n	8004da0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d7c:	4610      	mov	r0, r2
 8004d7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d80:	e00e      	b.n	8004da0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f8f0 	bl	8004f68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d88:	e00a      	b.n	8004da0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f8ec 	bl	8004f68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d90:	e006      	b.n	8004da0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 f8e8 	bl	8004f68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004d9e:	e0c4      	b.n	8004f2a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004da0:	bf00      	nop
    return;
 8004da2:	e0c2      	b.n	8004f2a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	f040 80a2 	bne.w	8004ef2 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db0:	f003 0310 	and.w	r3, r3, #16
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f000 809c 	beq.w	8004ef2 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004dba:	6a3b      	ldr	r3, [r7, #32]
 8004dbc:	f003 0310 	and.w	r3, r3, #16
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f000 8096 	beq.w	8004ef2 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	60fb      	str	r3, [r7, #12]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	60fb      	str	r3, [r7, #12]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	60fb      	str	r3, [r7, #12]
 8004dda:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de6:	2b40      	cmp	r3, #64	; 0x40
 8004de8:	d14f      	bne.n	8004e8a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004df4:	8a3b      	ldrh	r3, [r7, #16]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	f000 8099 	beq.w	8004f2e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e00:	8a3a      	ldrh	r2, [r7, #16]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	f080 8093 	bcs.w	8004f2e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	8a3a      	ldrh	r2, [r7, #16]
 8004e0c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e12:	69db      	ldr	r3, [r3, #28]
 8004e14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e18:	d02b      	beq.n	8004e72 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68da      	ldr	r2, [r3, #12]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e28:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	695a      	ldr	r2, [r3, #20]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f022 0201 	bic.w	r2, r2, #1
 8004e38:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	695a      	ldr	r2, [r3, #20]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e48:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2220      	movs	r2, #32
 8004e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68da      	ldr	r2, [r3, #12]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f022 0210 	bic.w	r2, r2, #16
 8004e66:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7fd fc21 	bl	80026b4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	4619      	mov	r1, r3
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 f87a 	bl	8004f7c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004e88:	e051      	b.n	8004f2e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d047      	beq.n	8004f32 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8004ea2:	8a7b      	ldrh	r3, [r7, #18]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d044      	beq.n	8004f32 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68da      	ldr	r2, [r3, #12]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004eb6:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	695a      	ldr	r2, [r3, #20]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f022 0201 	bic.w	r2, r2, #1
 8004ec6:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68da      	ldr	r2, [r3, #12]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f022 0210 	bic.w	r2, r2, #16
 8004ee4:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ee6:	8a7b      	ldrh	r3, [r7, #18]
 8004ee8:	4619      	mov	r1, r3
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f846 	bl	8004f7c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004ef0:	e01f      	b.n	8004f32 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d008      	beq.n	8004f0e <HAL_UART_IRQHandler+0x326>
 8004efc:	6a3b      	ldr	r3, [r7, #32]
 8004efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d003      	beq.n	8004f0e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 f9e7 	bl	80052da <UART_Transmit_IT>
    return;
 8004f0c:	e012      	b.n	8004f34 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00d      	beq.n	8004f34 <HAL_UART_IRQHandler+0x34c>
 8004f18:	6a3b      	ldr	r3, [r7, #32]
 8004f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d008      	beq.n	8004f34 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 fa29 	bl	800537a <UART_EndTransmit_IT>
    return;
 8004f28:	e004      	b.n	8004f34 <HAL_UART_IRQHandler+0x34c>
    return;
 8004f2a:	bf00      	nop
 8004f2c:	e002      	b.n	8004f34 <HAL_UART_IRQHandler+0x34c>
      return;
 8004f2e:	bf00      	nop
 8004f30:	e000      	b.n	8004f34 <HAL_UART_IRQHandler+0x34c>
      return;
 8004f32:	bf00      	nop
  }
}
 8004f34:	3728      	adds	r7, #40	; 0x28
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	080052b3 	.word	0x080052b3

08004f40 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	460b      	mov	r3, r1
 8004f86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d113      	bne.n	8004fd8 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	695a      	ldr	r2, [r3, #20]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fc4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68da      	ldr	r2, [r3, #12]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fd4:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004fd6:	e002      	b.n	8004fde <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f7fc fa77 	bl	80014cc <HAL_UART_TxCpltCallback>
}
 8004fde:	bf00      	nop
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004fe6:	b580      	push	{r7, lr}
 8004fe8:	b084      	sub	sp, #16
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f7ff ffa3 	bl	8004f40 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ffa:	bf00      	nop
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b084      	sub	sp, #16
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800501a:	2b00      	cmp	r3, #0
 800501c:	d12a      	bne.n	8005074 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68da      	ldr	r2, [r3, #12]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005032:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	695a      	ldr	r2, [r3, #20]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f022 0201 	bic.w	r2, r2, #1
 8005042:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	695a      	ldr	r2, [r3, #20]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005052:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2220      	movs	r2, #32
 8005058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005060:	2b01      	cmp	r3, #1
 8005062:	d107      	bne.n	8005074 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68da      	ldr	r2, [r3, #12]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f022 0210 	bic.w	r2, r2, #16
 8005072:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005078:	2b01      	cmp	r3, #1
 800507a:	d106      	bne.n	800508a <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005080:	4619      	mov	r1, r3
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f7ff ff7a 	bl	8004f7c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005088:	e002      	b.n	8005090 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f7fc fa28 	bl	80014e0 <HAL_UART_RxCpltCallback>
}
 8005090:	bf00      	nop
 8005092:	3710      	adds	r7, #16
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d108      	bne.n	80050c0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050b2:	085b      	lsrs	r3, r3, #1
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	4619      	mov	r1, r3
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	f7ff ff5f 	bl	8004f7c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80050be:	e002      	b.n	80050c6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	f7ff ff47 	bl	8004f54 <HAL_UART_RxHalfCpltCallback>
}
 80050c6:	bf00      	nop
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b084      	sub	sp, #16
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80050d6:	2300      	movs	r3, #0
 80050d8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050de:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ea:	2b80      	cmp	r3, #128	; 0x80
 80050ec:	bf0c      	ite	eq
 80050ee:	2301      	moveq	r3, #1
 80050f0:	2300      	movne	r3, #0
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b21      	cmp	r3, #33	; 0x21
 8005100:	d108      	bne.n	8005114 <UART_DMAError+0x46>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d005      	beq.n	8005114 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	2200      	movs	r2, #0
 800510c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800510e:	68b8      	ldr	r0, [r7, #8]
 8005110:	f000 f88c 	bl	800522c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800511e:	2b40      	cmp	r3, #64	; 0x40
 8005120:	bf0c      	ite	eq
 8005122:	2301      	moveq	r3, #1
 8005124:	2300      	movne	r3, #0
 8005126:	b2db      	uxtb	r3, r3
 8005128:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b22      	cmp	r3, #34	; 0x22
 8005134:	d108      	bne.n	8005148 <UART_DMAError+0x7a>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d005      	beq.n	8005148 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	2200      	movs	r2, #0
 8005140:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005142:	68b8      	ldr	r0, [r7, #8]
 8005144:	f000 f888 	bl	8005258 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514c:	f043 0210 	orr.w	r2, r3, #16
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005154:	68b8      	ldr	r0, [r7, #8]
 8005156:	f7ff ff07 	bl	8004f68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800515a:	bf00      	nop
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
	...

08005164 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b086      	sub	sp, #24
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	4613      	mov	r3, r2
 8005170:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005172:	68ba      	ldr	r2, [r7, #8]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	88fa      	ldrh	r2, [r7, #6]
 800517c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2222      	movs	r2, #34	; 0x22
 8005188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005190:	4a23      	ldr	r2, [pc, #140]	; (8005220 <UART_Start_Receive_DMA+0xbc>)
 8005192:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005198:	4a22      	ldr	r2, [pc, #136]	; (8005224 <UART_Start_Receive_DMA+0xc0>)
 800519a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a0:	4a21      	ldr	r2, [pc, #132]	; (8005228 <UART_Start_Receive_DMA+0xc4>)
 80051a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a8:	2200      	movs	r2, #0
 80051aa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80051ac:	f107 0308 	add.w	r3, r7, #8
 80051b0:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	3304      	adds	r3, #4
 80051bc:	4619      	mov	r1, r3
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	88fb      	ldrh	r3, [r7, #6]
 80051c4:	f7fd fa1e 	bl	8002604 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80051c8:	2300      	movs	r3, #0
 80051ca:	613b      	str	r3, [r7, #16]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	613b      	str	r3, [r7, #16]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	613b      	str	r3, [r7, #16]
 80051dc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68da      	ldr	r2, [r3, #12]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051f4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	695a      	ldr	r2, [r3, #20]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f042 0201 	orr.w	r2, r2, #1
 8005204:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	695a      	ldr	r2, [r3, #20]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005214:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3718      	adds	r7, #24
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	08005003 	.word	0x08005003
 8005224:	08005099 	.word	0x08005099
 8005228:	080050cf 	.word	0x080050cf

0800522c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68da      	ldr	r2, [r3, #12]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005242:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2220      	movs	r2, #32
 8005248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68da      	ldr	r2, [r3, #12]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800526e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	695a      	ldr	r2, [r3, #20]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f022 0201 	bic.w	r2, r2, #1
 800527e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005284:	2b01      	cmp	r3, #1
 8005286:	d107      	bne.n	8005298 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68da      	ldr	r2, [r3, #12]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 0210 	bic.w	r2, r2, #16
 8005296:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2220      	movs	r2, #32
 800529c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80052a6:	bf00      	nop
 80052a8:	370c      	adds	r7, #12
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr

080052b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b084      	sub	sp, #16
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f7ff fe4b 	bl	8004f68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052d2:	bf00      	nop
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80052da:	b480      	push	{r7}
 80052dc:	b085      	sub	sp, #20
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	2b21      	cmp	r3, #33	; 0x21
 80052ec:	d13e      	bne.n	800536c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052f6:	d114      	bne.n	8005322 <UART_Transmit_IT+0x48>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d110      	bne.n	8005322 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a1b      	ldr	r3, [r3, #32]
 8005304:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	881b      	ldrh	r3, [r3, #0]
 800530a:	461a      	mov	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005314:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a1b      	ldr	r3, [r3, #32]
 800531a:	1c9a      	adds	r2, r3, #2
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	621a      	str	r2, [r3, #32]
 8005320:	e008      	b.n	8005334 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	1c59      	adds	r1, r3, #1
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	6211      	str	r1, [r2, #32]
 800532c:	781a      	ldrb	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005338:	b29b      	uxth	r3, r3
 800533a:	3b01      	subs	r3, #1
 800533c:	b29b      	uxth	r3, r3
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	4619      	mov	r1, r3
 8005342:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005344:	2b00      	cmp	r3, #0
 8005346:	d10f      	bne.n	8005368 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68da      	ldr	r2, [r3, #12]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005356:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68da      	ldr	r2, [r3, #12]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005366:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005368:	2300      	movs	r3, #0
 800536a:	e000      	b.n	800536e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800536c:	2302      	movs	r3, #2
  }
}
 800536e:	4618      	mov	r0, r3
 8005370:	3714      	adds	r7, #20
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr

0800537a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800537a:	b580      	push	{r7, lr}
 800537c:	b082      	sub	sp, #8
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68da      	ldr	r2, [r3, #12]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005390:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2220      	movs	r2, #32
 8005396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f7fc f896 	bl	80014cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3708      	adds	r7, #8
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b084      	sub	sp, #16
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b22      	cmp	r3, #34	; 0x22
 80053bc:	f040 8087 	bne.w	80054ce <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053c8:	d117      	bne.n	80053fa <UART_Receive_IT+0x50>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d113      	bne.n	80053fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80053d2:	2300      	movs	r3, #0
 80053d4:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053da:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f2:	1c9a      	adds	r2, r3, #2
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	629a      	str	r2, [r3, #40]	; 0x28
 80053f8:	e026      	b.n	8005448 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053fe:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8005400:	2300      	movs	r3, #0
 8005402:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800540c:	d007      	beq.n	800541e <UART_Receive_IT+0x74>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d10a      	bne.n	800542c <UART_Receive_IT+0x82>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d106      	bne.n	800542c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	b2da      	uxtb	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	701a      	strb	r2, [r3, #0]
 800542a:	e008      	b.n	800543e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	b2db      	uxtb	r3, r3
 8005434:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005438:	b2da      	uxtb	r2, r3
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005442:	1c5a      	adds	r2, r3, #1
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800544c:	b29b      	uxth	r3, r3
 800544e:	3b01      	subs	r3, #1
 8005450:	b29b      	uxth	r3, r3
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	4619      	mov	r1, r3
 8005456:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005458:	2b00      	cmp	r3, #0
 800545a:	d136      	bne.n	80054ca <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68da      	ldr	r2, [r3, #12]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f022 0220 	bic.w	r2, r2, #32
 800546a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68da      	ldr	r2, [r3, #12]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800547a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	695a      	ldr	r2, [r3, #20]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f022 0201 	bic.w	r2, r2, #1
 800548a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2220      	movs	r2, #32
 8005490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005498:	2b01      	cmp	r3, #1
 800549a:	d10e      	bne.n	80054ba <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68da      	ldr	r2, [r3, #12]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f022 0210 	bic.w	r2, r2, #16
 80054aa:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80054b0:	4619      	mov	r1, r3
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f7ff fd62 	bl	8004f7c <HAL_UARTEx_RxEventCallback>
 80054b8:	e002      	b.n	80054c0 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f7fc f810 	bl	80014e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80054c6:	2300      	movs	r3, #0
 80054c8:	e002      	b.n	80054d0 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80054ca:	2300      	movs	r3, #0
 80054cc:	e000      	b.n	80054d0 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80054ce:	2302      	movs	r3, #2
  }
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3710      	adds	r7, #16
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054dc:	b09f      	sub	sp, #124	; 0x7c
 80054de:	af00      	add	r7, sp, #0
 80054e0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80054ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054ee:	68d9      	ldr	r1, [r3, #12]
 80054f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	ea40 0301 	orr.w	r3, r0, r1
 80054f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80054fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054fc:	689a      	ldr	r2, [r3, #8]
 80054fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	431a      	orrs	r2, r3
 8005504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005506:	695b      	ldr	r3, [r3, #20]
 8005508:	431a      	orrs	r2, r3
 800550a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800550c:	69db      	ldr	r3, [r3, #28]
 800550e:	4313      	orrs	r3, r2
 8005510:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800551c:	f021 010c 	bic.w	r1, r1, #12
 8005520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005526:	430b      	orrs	r3, r1
 8005528:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800552a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	695b      	ldr	r3, [r3, #20]
 8005530:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005536:	6999      	ldr	r1, [r3, #24]
 8005538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	ea40 0301 	orr.w	r3, r0, r1
 8005540:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005542:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	4bc5      	ldr	r3, [pc, #788]	; (800585c <UART_SetConfig+0x384>)
 8005548:	429a      	cmp	r2, r3
 800554a:	d004      	beq.n	8005556 <UART_SetConfig+0x7e>
 800554c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	4bc3      	ldr	r3, [pc, #780]	; (8005860 <UART_SetConfig+0x388>)
 8005552:	429a      	cmp	r2, r3
 8005554:	d103      	bne.n	800555e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005556:	f7fe f9bf 	bl	80038d8 <HAL_RCC_GetPCLK2Freq>
 800555a:	6778      	str	r0, [r7, #116]	; 0x74
 800555c:	e002      	b.n	8005564 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800555e:	f7fe f9a7 	bl	80038b0 <HAL_RCC_GetPCLK1Freq>
 8005562:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005566:	69db      	ldr	r3, [r3, #28]
 8005568:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800556c:	f040 80b6 	bne.w	80056dc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005570:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005572:	461c      	mov	r4, r3
 8005574:	f04f 0500 	mov.w	r5, #0
 8005578:	4622      	mov	r2, r4
 800557a:	462b      	mov	r3, r5
 800557c:	1891      	adds	r1, r2, r2
 800557e:	6439      	str	r1, [r7, #64]	; 0x40
 8005580:	415b      	adcs	r3, r3
 8005582:	647b      	str	r3, [r7, #68]	; 0x44
 8005584:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005588:	1912      	adds	r2, r2, r4
 800558a:	eb45 0303 	adc.w	r3, r5, r3
 800558e:	f04f 0000 	mov.w	r0, #0
 8005592:	f04f 0100 	mov.w	r1, #0
 8005596:	00d9      	lsls	r1, r3, #3
 8005598:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800559c:	00d0      	lsls	r0, r2, #3
 800559e:	4602      	mov	r2, r0
 80055a0:	460b      	mov	r3, r1
 80055a2:	1911      	adds	r1, r2, r4
 80055a4:	6639      	str	r1, [r7, #96]	; 0x60
 80055a6:	416b      	adcs	r3, r5
 80055a8:	667b      	str	r3, [r7, #100]	; 0x64
 80055aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	461a      	mov	r2, r3
 80055b0:	f04f 0300 	mov.w	r3, #0
 80055b4:	1891      	adds	r1, r2, r2
 80055b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80055b8:	415b      	adcs	r3, r3
 80055ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80055c0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80055c4:	f7fb fb40 	bl	8000c48 <__aeabi_uldivmod>
 80055c8:	4602      	mov	r2, r0
 80055ca:	460b      	mov	r3, r1
 80055cc:	4ba5      	ldr	r3, [pc, #660]	; (8005864 <UART_SetConfig+0x38c>)
 80055ce:	fba3 2302 	umull	r2, r3, r3, r2
 80055d2:	095b      	lsrs	r3, r3, #5
 80055d4:	011e      	lsls	r6, r3, #4
 80055d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055d8:	461c      	mov	r4, r3
 80055da:	f04f 0500 	mov.w	r5, #0
 80055de:	4622      	mov	r2, r4
 80055e0:	462b      	mov	r3, r5
 80055e2:	1891      	adds	r1, r2, r2
 80055e4:	6339      	str	r1, [r7, #48]	; 0x30
 80055e6:	415b      	adcs	r3, r3
 80055e8:	637b      	str	r3, [r7, #52]	; 0x34
 80055ea:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80055ee:	1912      	adds	r2, r2, r4
 80055f0:	eb45 0303 	adc.w	r3, r5, r3
 80055f4:	f04f 0000 	mov.w	r0, #0
 80055f8:	f04f 0100 	mov.w	r1, #0
 80055fc:	00d9      	lsls	r1, r3, #3
 80055fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005602:	00d0      	lsls	r0, r2, #3
 8005604:	4602      	mov	r2, r0
 8005606:	460b      	mov	r3, r1
 8005608:	1911      	adds	r1, r2, r4
 800560a:	65b9      	str	r1, [r7, #88]	; 0x58
 800560c:	416b      	adcs	r3, r5
 800560e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	461a      	mov	r2, r3
 8005616:	f04f 0300 	mov.w	r3, #0
 800561a:	1891      	adds	r1, r2, r2
 800561c:	62b9      	str	r1, [r7, #40]	; 0x28
 800561e:	415b      	adcs	r3, r3
 8005620:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005622:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005626:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800562a:	f7fb fb0d 	bl	8000c48 <__aeabi_uldivmod>
 800562e:	4602      	mov	r2, r0
 8005630:	460b      	mov	r3, r1
 8005632:	4b8c      	ldr	r3, [pc, #560]	; (8005864 <UART_SetConfig+0x38c>)
 8005634:	fba3 1302 	umull	r1, r3, r3, r2
 8005638:	095b      	lsrs	r3, r3, #5
 800563a:	2164      	movs	r1, #100	; 0x64
 800563c:	fb01 f303 	mul.w	r3, r1, r3
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	00db      	lsls	r3, r3, #3
 8005644:	3332      	adds	r3, #50	; 0x32
 8005646:	4a87      	ldr	r2, [pc, #540]	; (8005864 <UART_SetConfig+0x38c>)
 8005648:	fba2 2303 	umull	r2, r3, r2, r3
 800564c:	095b      	lsrs	r3, r3, #5
 800564e:	005b      	lsls	r3, r3, #1
 8005650:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005654:	441e      	add	r6, r3
 8005656:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005658:	4618      	mov	r0, r3
 800565a:	f04f 0100 	mov.w	r1, #0
 800565e:	4602      	mov	r2, r0
 8005660:	460b      	mov	r3, r1
 8005662:	1894      	adds	r4, r2, r2
 8005664:	623c      	str	r4, [r7, #32]
 8005666:	415b      	adcs	r3, r3
 8005668:	627b      	str	r3, [r7, #36]	; 0x24
 800566a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800566e:	1812      	adds	r2, r2, r0
 8005670:	eb41 0303 	adc.w	r3, r1, r3
 8005674:	f04f 0400 	mov.w	r4, #0
 8005678:	f04f 0500 	mov.w	r5, #0
 800567c:	00dd      	lsls	r5, r3, #3
 800567e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005682:	00d4      	lsls	r4, r2, #3
 8005684:	4622      	mov	r2, r4
 8005686:	462b      	mov	r3, r5
 8005688:	1814      	adds	r4, r2, r0
 800568a:	653c      	str	r4, [r7, #80]	; 0x50
 800568c:	414b      	adcs	r3, r1
 800568e:	657b      	str	r3, [r7, #84]	; 0x54
 8005690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	461a      	mov	r2, r3
 8005696:	f04f 0300 	mov.w	r3, #0
 800569a:	1891      	adds	r1, r2, r2
 800569c:	61b9      	str	r1, [r7, #24]
 800569e:	415b      	adcs	r3, r3
 80056a0:	61fb      	str	r3, [r7, #28]
 80056a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056a6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80056aa:	f7fb facd 	bl	8000c48 <__aeabi_uldivmod>
 80056ae:	4602      	mov	r2, r0
 80056b0:	460b      	mov	r3, r1
 80056b2:	4b6c      	ldr	r3, [pc, #432]	; (8005864 <UART_SetConfig+0x38c>)
 80056b4:	fba3 1302 	umull	r1, r3, r3, r2
 80056b8:	095b      	lsrs	r3, r3, #5
 80056ba:	2164      	movs	r1, #100	; 0x64
 80056bc:	fb01 f303 	mul.w	r3, r1, r3
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	00db      	lsls	r3, r3, #3
 80056c4:	3332      	adds	r3, #50	; 0x32
 80056c6:	4a67      	ldr	r2, [pc, #412]	; (8005864 <UART_SetConfig+0x38c>)
 80056c8:	fba2 2303 	umull	r2, r3, r2, r3
 80056cc:	095b      	lsrs	r3, r3, #5
 80056ce:	f003 0207 	and.w	r2, r3, #7
 80056d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4432      	add	r2, r6
 80056d8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80056da:	e0b9      	b.n	8005850 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80056dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056de:	461c      	mov	r4, r3
 80056e0:	f04f 0500 	mov.w	r5, #0
 80056e4:	4622      	mov	r2, r4
 80056e6:	462b      	mov	r3, r5
 80056e8:	1891      	adds	r1, r2, r2
 80056ea:	6139      	str	r1, [r7, #16]
 80056ec:	415b      	adcs	r3, r3
 80056ee:	617b      	str	r3, [r7, #20]
 80056f0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80056f4:	1912      	adds	r2, r2, r4
 80056f6:	eb45 0303 	adc.w	r3, r5, r3
 80056fa:	f04f 0000 	mov.w	r0, #0
 80056fe:	f04f 0100 	mov.w	r1, #0
 8005702:	00d9      	lsls	r1, r3, #3
 8005704:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005708:	00d0      	lsls	r0, r2, #3
 800570a:	4602      	mov	r2, r0
 800570c:	460b      	mov	r3, r1
 800570e:	eb12 0804 	adds.w	r8, r2, r4
 8005712:	eb43 0905 	adc.w	r9, r3, r5
 8005716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	4618      	mov	r0, r3
 800571c:	f04f 0100 	mov.w	r1, #0
 8005720:	f04f 0200 	mov.w	r2, #0
 8005724:	f04f 0300 	mov.w	r3, #0
 8005728:	008b      	lsls	r3, r1, #2
 800572a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800572e:	0082      	lsls	r2, r0, #2
 8005730:	4640      	mov	r0, r8
 8005732:	4649      	mov	r1, r9
 8005734:	f7fb fa88 	bl	8000c48 <__aeabi_uldivmod>
 8005738:	4602      	mov	r2, r0
 800573a:	460b      	mov	r3, r1
 800573c:	4b49      	ldr	r3, [pc, #292]	; (8005864 <UART_SetConfig+0x38c>)
 800573e:	fba3 2302 	umull	r2, r3, r3, r2
 8005742:	095b      	lsrs	r3, r3, #5
 8005744:	011e      	lsls	r6, r3, #4
 8005746:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005748:	4618      	mov	r0, r3
 800574a:	f04f 0100 	mov.w	r1, #0
 800574e:	4602      	mov	r2, r0
 8005750:	460b      	mov	r3, r1
 8005752:	1894      	adds	r4, r2, r2
 8005754:	60bc      	str	r4, [r7, #8]
 8005756:	415b      	adcs	r3, r3
 8005758:	60fb      	str	r3, [r7, #12]
 800575a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800575e:	1812      	adds	r2, r2, r0
 8005760:	eb41 0303 	adc.w	r3, r1, r3
 8005764:	f04f 0400 	mov.w	r4, #0
 8005768:	f04f 0500 	mov.w	r5, #0
 800576c:	00dd      	lsls	r5, r3, #3
 800576e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005772:	00d4      	lsls	r4, r2, #3
 8005774:	4622      	mov	r2, r4
 8005776:	462b      	mov	r3, r5
 8005778:	1814      	adds	r4, r2, r0
 800577a:	64bc      	str	r4, [r7, #72]	; 0x48
 800577c:	414b      	adcs	r3, r1
 800577e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	4618      	mov	r0, r3
 8005786:	f04f 0100 	mov.w	r1, #0
 800578a:	f04f 0200 	mov.w	r2, #0
 800578e:	f04f 0300 	mov.w	r3, #0
 8005792:	008b      	lsls	r3, r1, #2
 8005794:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005798:	0082      	lsls	r2, r0, #2
 800579a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800579e:	f7fb fa53 	bl	8000c48 <__aeabi_uldivmod>
 80057a2:	4602      	mov	r2, r0
 80057a4:	460b      	mov	r3, r1
 80057a6:	4b2f      	ldr	r3, [pc, #188]	; (8005864 <UART_SetConfig+0x38c>)
 80057a8:	fba3 1302 	umull	r1, r3, r3, r2
 80057ac:	095b      	lsrs	r3, r3, #5
 80057ae:	2164      	movs	r1, #100	; 0x64
 80057b0:	fb01 f303 	mul.w	r3, r1, r3
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	011b      	lsls	r3, r3, #4
 80057b8:	3332      	adds	r3, #50	; 0x32
 80057ba:	4a2a      	ldr	r2, [pc, #168]	; (8005864 <UART_SetConfig+0x38c>)
 80057bc:	fba2 2303 	umull	r2, r3, r2, r3
 80057c0:	095b      	lsrs	r3, r3, #5
 80057c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057c6:	441e      	add	r6, r3
 80057c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057ca:	4618      	mov	r0, r3
 80057cc:	f04f 0100 	mov.w	r1, #0
 80057d0:	4602      	mov	r2, r0
 80057d2:	460b      	mov	r3, r1
 80057d4:	1894      	adds	r4, r2, r2
 80057d6:	603c      	str	r4, [r7, #0]
 80057d8:	415b      	adcs	r3, r3
 80057da:	607b      	str	r3, [r7, #4]
 80057dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057e0:	1812      	adds	r2, r2, r0
 80057e2:	eb41 0303 	adc.w	r3, r1, r3
 80057e6:	f04f 0400 	mov.w	r4, #0
 80057ea:	f04f 0500 	mov.w	r5, #0
 80057ee:	00dd      	lsls	r5, r3, #3
 80057f0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80057f4:	00d4      	lsls	r4, r2, #3
 80057f6:	4622      	mov	r2, r4
 80057f8:	462b      	mov	r3, r5
 80057fa:	eb12 0a00 	adds.w	sl, r2, r0
 80057fe:	eb43 0b01 	adc.w	fp, r3, r1
 8005802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	4618      	mov	r0, r3
 8005808:	f04f 0100 	mov.w	r1, #0
 800580c:	f04f 0200 	mov.w	r2, #0
 8005810:	f04f 0300 	mov.w	r3, #0
 8005814:	008b      	lsls	r3, r1, #2
 8005816:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800581a:	0082      	lsls	r2, r0, #2
 800581c:	4650      	mov	r0, sl
 800581e:	4659      	mov	r1, fp
 8005820:	f7fb fa12 	bl	8000c48 <__aeabi_uldivmod>
 8005824:	4602      	mov	r2, r0
 8005826:	460b      	mov	r3, r1
 8005828:	4b0e      	ldr	r3, [pc, #56]	; (8005864 <UART_SetConfig+0x38c>)
 800582a:	fba3 1302 	umull	r1, r3, r3, r2
 800582e:	095b      	lsrs	r3, r3, #5
 8005830:	2164      	movs	r1, #100	; 0x64
 8005832:	fb01 f303 	mul.w	r3, r1, r3
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	011b      	lsls	r3, r3, #4
 800583a:	3332      	adds	r3, #50	; 0x32
 800583c:	4a09      	ldr	r2, [pc, #36]	; (8005864 <UART_SetConfig+0x38c>)
 800583e:	fba2 2303 	umull	r2, r3, r2, r3
 8005842:	095b      	lsrs	r3, r3, #5
 8005844:	f003 020f 	and.w	r2, r3, #15
 8005848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4432      	add	r2, r6
 800584e:	609a      	str	r2, [r3, #8]
}
 8005850:	bf00      	nop
 8005852:	377c      	adds	r7, #124	; 0x7c
 8005854:	46bd      	mov	sp, r7
 8005856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800585a:	bf00      	nop
 800585c:	40011000 	.word	0x40011000
 8005860:	40011400 	.word	0x40011400
 8005864:	51eb851f 	.word	0x51eb851f

08005868 <__errno>:
 8005868:	4b01      	ldr	r3, [pc, #4]	; (8005870 <__errno+0x8>)
 800586a:	6818      	ldr	r0, [r3, #0]
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	2000000c 	.word	0x2000000c

08005874 <__libc_init_array>:
 8005874:	b570      	push	{r4, r5, r6, lr}
 8005876:	4d0d      	ldr	r5, [pc, #52]	; (80058ac <__libc_init_array+0x38>)
 8005878:	4c0d      	ldr	r4, [pc, #52]	; (80058b0 <__libc_init_array+0x3c>)
 800587a:	1b64      	subs	r4, r4, r5
 800587c:	10a4      	asrs	r4, r4, #2
 800587e:	2600      	movs	r6, #0
 8005880:	42a6      	cmp	r6, r4
 8005882:	d109      	bne.n	8005898 <__libc_init_array+0x24>
 8005884:	4d0b      	ldr	r5, [pc, #44]	; (80058b4 <__libc_init_array+0x40>)
 8005886:	4c0c      	ldr	r4, [pc, #48]	; (80058b8 <__libc_init_array+0x44>)
 8005888:	f002 feb4 	bl	80085f4 <_init>
 800588c:	1b64      	subs	r4, r4, r5
 800588e:	10a4      	asrs	r4, r4, #2
 8005890:	2600      	movs	r6, #0
 8005892:	42a6      	cmp	r6, r4
 8005894:	d105      	bne.n	80058a2 <__libc_init_array+0x2e>
 8005896:	bd70      	pop	{r4, r5, r6, pc}
 8005898:	f855 3b04 	ldr.w	r3, [r5], #4
 800589c:	4798      	blx	r3
 800589e:	3601      	adds	r6, #1
 80058a0:	e7ee      	b.n	8005880 <__libc_init_array+0xc>
 80058a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80058a6:	4798      	blx	r3
 80058a8:	3601      	adds	r6, #1
 80058aa:	e7f2      	b.n	8005892 <__libc_init_array+0x1e>
 80058ac:	08008a24 	.word	0x08008a24
 80058b0:	08008a24 	.word	0x08008a24
 80058b4:	08008a24 	.word	0x08008a24
 80058b8:	08008a28 	.word	0x08008a28

080058bc <memset>:
 80058bc:	4402      	add	r2, r0
 80058be:	4603      	mov	r3, r0
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d100      	bne.n	80058c6 <memset+0xa>
 80058c4:	4770      	bx	lr
 80058c6:	f803 1b01 	strb.w	r1, [r3], #1
 80058ca:	e7f9      	b.n	80058c0 <memset+0x4>

080058cc <__cvt>:
 80058cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058d0:	ec55 4b10 	vmov	r4, r5, d0
 80058d4:	2d00      	cmp	r5, #0
 80058d6:	460e      	mov	r6, r1
 80058d8:	4619      	mov	r1, r3
 80058da:	462b      	mov	r3, r5
 80058dc:	bfbb      	ittet	lt
 80058de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80058e2:	461d      	movlt	r5, r3
 80058e4:	2300      	movge	r3, #0
 80058e6:	232d      	movlt	r3, #45	; 0x2d
 80058e8:	700b      	strb	r3, [r1, #0]
 80058ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80058f0:	4691      	mov	r9, r2
 80058f2:	f023 0820 	bic.w	r8, r3, #32
 80058f6:	bfbc      	itt	lt
 80058f8:	4622      	movlt	r2, r4
 80058fa:	4614      	movlt	r4, r2
 80058fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005900:	d005      	beq.n	800590e <__cvt+0x42>
 8005902:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005906:	d100      	bne.n	800590a <__cvt+0x3e>
 8005908:	3601      	adds	r6, #1
 800590a:	2102      	movs	r1, #2
 800590c:	e000      	b.n	8005910 <__cvt+0x44>
 800590e:	2103      	movs	r1, #3
 8005910:	ab03      	add	r3, sp, #12
 8005912:	9301      	str	r3, [sp, #4]
 8005914:	ab02      	add	r3, sp, #8
 8005916:	9300      	str	r3, [sp, #0]
 8005918:	ec45 4b10 	vmov	d0, r4, r5
 800591c:	4653      	mov	r3, sl
 800591e:	4632      	mov	r2, r6
 8005920:	f000 fcea 	bl	80062f8 <_dtoa_r>
 8005924:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005928:	4607      	mov	r7, r0
 800592a:	d102      	bne.n	8005932 <__cvt+0x66>
 800592c:	f019 0f01 	tst.w	r9, #1
 8005930:	d022      	beq.n	8005978 <__cvt+0xac>
 8005932:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005936:	eb07 0906 	add.w	r9, r7, r6
 800593a:	d110      	bne.n	800595e <__cvt+0x92>
 800593c:	783b      	ldrb	r3, [r7, #0]
 800593e:	2b30      	cmp	r3, #48	; 0x30
 8005940:	d10a      	bne.n	8005958 <__cvt+0x8c>
 8005942:	2200      	movs	r2, #0
 8005944:	2300      	movs	r3, #0
 8005946:	4620      	mov	r0, r4
 8005948:	4629      	mov	r1, r5
 800594a:	f7fb f8bd 	bl	8000ac8 <__aeabi_dcmpeq>
 800594e:	b918      	cbnz	r0, 8005958 <__cvt+0x8c>
 8005950:	f1c6 0601 	rsb	r6, r6, #1
 8005954:	f8ca 6000 	str.w	r6, [sl]
 8005958:	f8da 3000 	ldr.w	r3, [sl]
 800595c:	4499      	add	r9, r3
 800595e:	2200      	movs	r2, #0
 8005960:	2300      	movs	r3, #0
 8005962:	4620      	mov	r0, r4
 8005964:	4629      	mov	r1, r5
 8005966:	f7fb f8af 	bl	8000ac8 <__aeabi_dcmpeq>
 800596a:	b108      	cbz	r0, 8005970 <__cvt+0xa4>
 800596c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005970:	2230      	movs	r2, #48	; 0x30
 8005972:	9b03      	ldr	r3, [sp, #12]
 8005974:	454b      	cmp	r3, r9
 8005976:	d307      	bcc.n	8005988 <__cvt+0xbc>
 8005978:	9b03      	ldr	r3, [sp, #12]
 800597a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800597c:	1bdb      	subs	r3, r3, r7
 800597e:	4638      	mov	r0, r7
 8005980:	6013      	str	r3, [r2, #0]
 8005982:	b004      	add	sp, #16
 8005984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005988:	1c59      	adds	r1, r3, #1
 800598a:	9103      	str	r1, [sp, #12]
 800598c:	701a      	strb	r2, [r3, #0]
 800598e:	e7f0      	b.n	8005972 <__cvt+0xa6>

08005990 <__exponent>:
 8005990:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005992:	4603      	mov	r3, r0
 8005994:	2900      	cmp	r1, #0
 8005996:	bfb8      	it	lt
 8005998:	4249      	neglt	r1, r1
 800599a:	f803 2b02 	strb.w	r2, [r3], #2
 800599e:	bfb4      	ite	lt
 80059a0:	222d      	movlt	r2, #45	; 0x2d
 80059a2:	222b      	movge	r2, #43	; 0x2b
 80059a4:	2909      	cmp	r1, #9
 80059a6:	7042      	strb	r2, [r0, #1]
 80059a8:	dd2a      	ble.n	8005a00 <__exponent+0x70>
 80059aa:	f10d 0407 	add.w	r4, sp, #7
 80059ae:	46a4      	mov	ip, r4
 80059b0:	270a      	movs	r7, #10
 80059b2:	46a6      	mov	lr, r4
 80059b4:	460a      	mov	r2, r1
 80059b6:	fb91 f6f7 	sdiv	r6, r1, r7
 80059ba:	fb07 1516 	mls	r5, r7, r6, r1
 80059be:	3530      	adds	r5, #48	; 0x30
 80059c0:	2a63      	cmp	r2, #99	; 0x63
 80059c2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80059c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80059ca:	4631      	mov	r1, r6
 80059cc:	dcf1      	bgt.n	80059b2 <__exponent+0x22>
 80059ce:	3130      	adds	r1, #48	; 0x30
 80059d0:	f1ae 0502 	sub.w	r5, lr, #2
 80059d4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80059d8:	1c44      	adds	r4, r0, #1
 80059da:	4629      	mov	r1, r5
 80059dc:	4561      	cmp	r1, ip
 80059de:	d30a      	bcc.n	80059f6 <__exponent+0x66>
 80059e0:	f10d 0209 	add.w	r2, sp, #9
 80059e4:	eba2 020e 	sub.w	r2, r2, lr
 80059e8:	4565      	cmp	r5, ip
 80059ea:	bf88      	it	hi
 80059ec:	2200      	movhi	r2, #0
 80059ee:	4413      	add	r3, r2
 80059f0:	1a18      	subs	r0, r3, r0
 80059f2:	b003      	add	sp, #12
 80059f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059fa:	f804 2f01 	strb.w	r2, [r4, #1]!
 80059fe:	e7ed      	b.n	80059dc <__exponent+0x4c>
 8005a00:	2330      	movs	r3, #48	; 0x30
 8005a02:	3130      	adds	r1, #48	; 0x30
 8005a04:	7083      	strb	r3, [r0, #2]
 8005a06:	70c1      	strb	r1, [r0, #3]
 8005a08:	1d03      	adds	r3, r0, #4
 8005a0a:	e7f1      	b.n	80059f0 <__exponent+0x60>

08005a0c <_printf_float>:
 8005a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a10:	ed2d 8b02 	vpush	{d8}
 8005a14:	b08d      	sub	sp, #52	; 0x34
 8005a16:	460c      	mov	r4, r1
 8005a18:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005a1c:	4616      	mov	r6, r2
 8005a1e:	461f      	mov	r7, r3
 8005a20:	4605      	mov	r5, r0
 8005a22:	f001 fa55 	bl	8006ed0 <_localeconv_r>
 8005a26:	f8d0 a000 	ldr.w	sl, [r0]
 8005a2a:	4650      	mov	r0, sl
 8005a2c:	f7fa fbd0 	bl	80001d0 <strlen>
 8005a30:	2300      	movs	r3, #0
 8005a32:	930a      	str	r3, [sp, #40]	; 0x28
 8005a34:	6823      	ldr	r3, [r4, #0]
 8005a36:	9305      	str	r3, [sp, #20]
 8005a38:	f8d8 3000 	ldr.w	r3, [r8]
 8005a3c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005a40:	3307      	adds	r3, #7
 8005a42:	f023 0307 	bic.w	r3, r3, #7
 8005a46:	f103 0208 	add.w	r2, r3, #8
 8005a4a:	f8c8 2000 	str.w	r2, [r8]
 8005a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a52:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005a56:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005a5a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005a5e:	9307      	str	r3, [sp, #28]
 8005a60:	f8cd 8018 	str.w	r8, [sp, #24]
 8005a64:	ee08 0a10 	vmov	s16, r0
 8005a68:	4b9f      	ldr	r3, [pc, #636]	; (8005ce8 <_printf_float+0x2dc>)
 8005a6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a72:	f7fb f85b 	bl	8000b2c <__aeabi_dcmpun>
 8005a76:	bb88      	cbnz	r0, 8005adc <_printf_float+0xd0>
 8005a78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a7c:	4b9a      	ldr	r3, [pc, #616]	; (8005ce8 <_printf_float+0x2dc>)
 8005a7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a82:	f7fb f835 	bl	8000af0 <__aeabi_dcmple>
 8005a86:	bb48      	cbnz	r0, 8005adc <_printf_float+0xd0>
 8005a88:	2200      	movs	r2, #0
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	4640      	mov	r0, r8
 8005a8e:	4649      	mov	r1, r9
 8005a90:	f7fb f824 	bl	8000adc <__aeabi_dcmplt>
 8005a94:	b110      	cbz	r0, 8005a9c <_printf_float+0x90>
 8005a96:	232d      	movs	r3, #45	; 0x2d
 8005a98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a9c:	4b93      	ldr	r3, [pc, #588]	; (8005cec <_printf_float+0x2e0>)
 8005a9e:	4894      	ldr	r0, [pc, #592]	; (8005cf0 <_printf_float+0x2e4>)
 8005aa0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005aa4:	bf94      	ite	ls
 8005aa6:	4698      	movls	r8, r3
 8005aa8:	4680      	movhi	r8, r0
 8005aaa:	2303      	movs	r3, #3
 8005aac:	6123      	str	r3, [r4, #16]
 8005aae:	9b05      	ldr	r3, [sp, #20]
 8005ab0:	f023 0204 	bic.w	r2, r3, #4
 8005ab4:	6022      	str	r2, [r4, #0]
 8005ab6:	f04f 0900 	mov.w	r9, #0
 8005aba:	9700      	str	r7, [sp, #0]
 8005abc:	4633      	mov	r3, r6
 8005abe:	aa0b      	add	r2, sp, #44	; 0x2c
 8005ac0:	4621      	mov	r1, r4
 8005ac2:	4628      	mov	r0, r5
 8005ac4:	f000 f9d8 	bl	8005e78 <_printf_common>
 8005ac8:	3001      	adds	r0, #1
 8005aca:	f040 8090 	bne.w	8005bee <_printf_float+0x1e2>
 8005ace:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ad2:	b00d      	add	sp, #52	; 0x34
 8005ad4:	ecbd 8b02 	vpop	{d8}
 8005ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005adc:	4642      	mov	r2, r8
 8005ade:	464b      	mov	r3, r9
 8005ae0:	4640      	mov	r0, r8
 8005ae2:	4649      	mov	r1, r9
 8005ae4:	f7fb f822 	bl	8000b2c <__aeabi_dcmpun>
 8005ae8:	b140      	cbz	r0, 8005afc <_printf_float+0xf0>
 8005aea:	464b      	mov	r3, r9
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	bfbc      	itt	lt
 8005af0:	232d      	movlt	r3, #45	; 0x2d
 8005af2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005af6:	487f      	ldr	r0, [pc, #508]	; (8005cf4 <_printf_float+0x2e8>)
 8005af8:	4b7f      	ldr	r3, [pc, #508]	; (8005cf8 <_printf_float+0x2ec>)
 8005afa:	e7d1      	b.n	8005aa0 <_printf_float+0x94>
 8005afc:	6863      	ldr	r3, [r4, #4]
 8005afe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005b02:	9206      	str	r2, [sp, #24]
 8005b04:	1c5a      	adds	r2, r3, #1
 8005b06:	d13f      	bne.n	8005b88 <_printf_float+0x17c>
 8005b08:	2306      	movs	r3, #6
 8005b0a:	6063      	str	r3, [r4, #4]
 8005b0c:	9b05      	ldr	r3, [sp, #20]
 8005b0e:	6861      	ldr	r1, [r4, #4]
 8005b10:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005b14:	2300      	movs	r3, #0
 8005b16:	9303      	str	r3, [sp, #12]
 8005b18:	ab0a      	add	r3, sp, #40	; 0x28
 8005b1a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005b1e:	ab09      	add	r3, sp, #36	; 0x24
 8005b20:	ec49 8b10 	vmov	d0, r8, r9
 8005b24:	9300      	str	r3, [sp, #0]
 8005b26:	6022      	str	r2, [r4, #0]
 8005b28:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005b2c:	4628      	mov	r0, r5
 8005b2e:	f7ff fecd 	bl	80058cc <__cvt>
 8005b32:	9b06      	ldr	r3, [sp, #24]
 8005b34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b36:	2b47      	cmp	r3, #71	; 0x47
 8005b38:	4680      	mov	r8, r0
 8005b3a:	d108      	bne.n	8005b4e <_printf_float+0x142>
 8005b3c:	1cc8      	adds	r0, r1, #3
 8005b3e:	db02      	blt.n	8005b46 <_printf_float+0x13a>
 8005b40:	6863      	ldr	r3, [r4, #4]
 8005b42:	4299      	cmp	r1, r3
 8005b44:	dd41      	ble.n	8005bca <_printf_float+0x1be>
 8005b46:	f1ab 0b02 	sub.w	fp, fp, #2
 8005b4a:	fa5f fb8b 	uxtb.w	fp, fp
 8005b4e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005b52:	d820      	bhi.n	8005b96 <_printf_float+0x18a>
 8005b54:	3901      	subs	r1, #1
 8005b56:	465a      	mov	r2, fp
 8005b58:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005b5c:	9109      	str	r1, [sp, #36]	; 0x24
 8005b5e:	f7ff ff17 	bl	8005990 <__exponent>
 8005b62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b64:	1813      	adds	r3, r2, r0
 8005b66:	2a01      	cmp	r2, #1
 8005b68:	4681      	mov	r9, r0
 8005b6a:	6123      	str	r3, [r4, #16]
 8005b6c:	dc02      	bgt.n	8005b74 <_printf_float+0x168>
 8005b6e:	6822      	ldr	r2, [r4, #0]
 8005b70:	07d2      	lsls	r2, r2, #31
 8005b72:	d501      	bpl.n	8005b78 <_printf_float+0x16c>
 8005b74:	3301      	adds	r3, #1
 8005b76:	6123      	str	r3, [r4, #16]
 8005b78:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d09c      	beq.n	8005aba <_printf_float+0xae>
 8005b80:	232d      	movs	r3, #45	; 0x2d
 8005b82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b86:	e798      	b.n	8005aba <_printf_float+0xae>
 8005b88:	9a06      	ldr	r2, [sp, #24]
 8005b8a:	2a47      	cmp	r2, #71	; 0x47
 8005b8c:	d1be      	bne.n	8005b0c <_printf_float+0x100>
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1bc      	bne.n	8005b0c <_printf_float+0x100>
 8005b92:	2301      	movs	r3, #1
 8005b94:	e7b9      	b.n	8005b0a <_printf_float+0xfe>
 8005b96:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005b9a:	d118      	bne.n	8005bce <_printf_float+0x1c2>
 8005b9c:	2900      	cmp	r1, #0
 8005b9e:	6863      	ldr	r3, [r4, #4]
 8005ba0:	dd0b      	ble.n	8005bba <_printf_float+0x1ae>
 8005ba2:	6121      	str	r1, [r4, #16]
 8005ba4:	b913      	cbnz	r3, 8005bac <_printf_float+0x1a0>
 8005ba6:	6822      	ldr	r2, [r4, #0]
 8005ba8:	07d0      	lsls	r0, r2, #31
 8005baa:	d502      	bpl.n	8005bb2 <_printf_float+0x1a6>
 8005bac:	3301      	adds	r3, #1
 8005bae:	440b      	add	r3, r1
 8005bb0:	6123      	str	r3, [r4, #16]
 8005bb2:	65a1      	str	r1, [r4, #88]	; 0x58
 8005bb4:	f04f 0900 	mov.w	r9, #0
 8005bb8:	e7de      	b.n	8005b78 <_printf_float+0x16c>
 8005bba:	b913      	cbnz	r3, 8005bc2 <_printf_float+0x1b6>
 8005bbc:	6822      	ldr	r2, [r4, #0]
 8005bbe:	07d2      	lsls	r2, r2, #31
 8005bc0:	d501      	bpl.n	8005bc6 <_printf_float+0x1ba>
 8005bc2:	3302      	adds	r3, #2
 8005bc4:	e7f4      	b.n	8005bb0 <_printf_float+0x1a4>
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e7f2      	b.n	8005bb0 <_printf_float+0x1a4>
 8005bca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005bce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bd0:	4299      	cmp	r1, r3
 8005bd2:	db05      	blt.n	8005be0 <_printf_float+0x1d4>
 8005bd4:	6823      	ldr	r3, [r4, #0]
 8005bd6:	6121      	str	r1, [r4, #16]
 8005bd8:	07d8      	lsls	r0, r3, #31
 8005bda:	d5ea      	bpl.n	8005bb2 <_printf_float+0x1a6>
 8005bdc:	1c4b      	adds	r3, r1, #1
 8005bde:	e7e7      	b.n	8005bb0 <_printf_float+0x1a4>
 8005be0:	2900      	cmp	r1, #0
 8005be2:	bfd4      	ite	le
 8005be4:	f1c1 0202 	rsble	r2, r1, #2
 8005be8:	2201      	movgt	r2, #1
 8005bea:	4413      	add	r3, r2
 8005bec:	e7e0      	b.n	8005bb0 <_printf_float+0x1a4>
 8005bee:	6823      	ldr	r3, [r4, #0]
 8005bf0:	055a      	lsls	r2, r3, #21
 8005bf2:	d407      	bmi.n	8005c04 <_printf_float+0x1f8>
 8005bf4:	6923      	ldr	r3, [r4, #16]
 8005bf6:	4642      	mov	r2, r8
 8005bf8:	4631      	mov	r1, r6
 8005bfa:	4628      	mov	r0, r5
 8005bfc:	47b8      	blx	r7
 8005bfe:	3001      	adds	r0, #1
 8005c00:	d12c      	bne.n	8005c5c <_printf_float+0x250>
 8005c02:	e764      	b.n	8005ace <_printf_float+0xc2>
 8005c04:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005c08:	f240 80e0 	bls.w	8005dcc <_printf_float+0x3c0>
 8005c0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c10:	2200      	movs	r2, #0
 8005c12:	2300      	movs	r3, #0
 8005c14:	f7fa ff58 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c18:	2800      	cmp	r0, #0
 8005c1a:	d034      	beq.n	8005c86 <_printf_float+0x27a>
 8005c1c:	4a37      	ldr	r2, [pc, #220]	; (8005cfc <_printf_float+0x2f0>)
 8005c1e:	2301      	movs	r3, #1
 8005c20:	4631      	mov	r1, r6
 8005c22:	4628      	mov	r0, r5
 8005c24:	47b8      	blx	r7
 8005c26:	3001      	adds	r0, #1
 8005c28:	f43f af51 	beq.w	8005ace <_printf_float+0xc2>
 8005c2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c30:	429a      	cmp	r2, r3
 8005c32:	db02      	blt.n	8005c3a <_printf_float+0x22e>
 8005c34:	6823      	ldr	r3, [r4, #0]
 8005c36:	07d8      	lsls	r0, r3, #31
 8005c38:	d510      	bpl.n	8005c5c <_printf_float+0x250>
 8005c3a:	ee18 3a10 	vmov	r3, s16
 8005c3e:	4652      	mov	r2, sl
 8005c40:	4631      	mov	r1, r6
 8005c42:	4628      	mov	r0, r5
 8005c44:	47b8      	blx	r7
 8005c46:	3001      	adds	r0, #1
 8005c48:	f43f af41 	beq.w	8005ace <_printf_float+0xc2>
 8005c4c:	f04f 0800 	mov.w	r8, #0
 8005c50:	f104 091a 	add.w	r9, r4, #26
 8005c54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c56:	3b01      	subs	r3, #1
 8005c58:	4543      	cmp	r3, r8
 8005c5a:	dc09      	bgt.n	8005c70 <_printf_float+0x264>
 8005c5c:	6823      	ldr	r3, [r4, #0]
 8005c5e:	079b      	lsls	r3, r3, #30
 8005c60:	f100 8105 	bmi.w	8005e6e <_printf_float+0x462>
 8005c64:	68e0      	ldr	r0, [r4, #12]
 8005c66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c68:	4298      	cmp	r0, r3
 8005c6a:	bfb8      	it	lt
 8005c6c:	4618      	movlt	r0, r3
 8005c6e:	e730      	b.n	8005ad2 <_printf_float+0xc6>
 8005c70:	2301      	movs	r3, #1
 8005c72:	464a      	mov	r2, r9
 8005c74:	4631      	mov	r1, r6
 8005c76:	4628      	mov	r0, r5
 8005c78:	47b8      	blx	r7
 8005c7a:	3001      	adds	r0, #1
 8005c7c:	f43f af27 	beq.w	8005ace <_printf_float+0xc2>
 8005c80:	f108 0801 	add.w	r8, r8, #1
 8005c84:	e7e6      	b.n	8005c54 <_printf_float+0x248>
 8005c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	dc39      	bgt.n	8005d00 <_printf_float+0x2f4>
 8005c8c:	4a1b      	ldr	r2, [pc, #108]	; (8005cfc <_printf_float+0x2f0>)
 8005c8e:	2301      	movs	r3, #1
 8005c90:	4631      	mov	r1, r6
 8005c92:	4628      	mov	r0, r5
 8005c94:	47b8      	blx	r7
 8005c96:	3001      	adds	r0, #1
 8005c98:	f43f af19 	beq.w	8005ace <_printf_float+0xc2>
 8005c9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	d102      	bne.n	8005caa <_printf_float+0x29e>
 8005ca4:	6823      	ldr	r3, [r4, #0]
 8005ca6:	07d9      	lsls	r1, r3, #31
 8005ca8:	d5d8      	bpl.n	8005c5c <_printf_float+0x250>
 8005caa:	ee18 3a10 	vmov	r3, s16
 8005cae:	4652      	mov	r2, sl
 8005cb0:	4631      	mov	r1, r6
 8005cb2:	4628      	mov	r0, r5
 8005cb4:	47b8      	blx	r7
 8005cb6:	3001      	adds	r0, #1
 8005cb8:	f43f af09 	beq.w	8005ace <_printf_float+0xc2>
 8005cbc:	f04f 0900 	mov.w	r9, #0
 8005cc0:	f104 0a1a 	add.w	sl, r4, #26
 8005cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cc6:	425b      	negs	r3, r3
 8005cc8:	454b      	cmp	r3, r9
 8005cca:	dc01      	bgt.n	8005cd0 <_printf_float+0x2c4>
 8005ccc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cce:	e792      	b.n	8005bf6 <_printf_float+0x1ea>
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	4652      	mov	r2, sl
 8005cd4:	4631      	mov	r1, r6
 8005cd6:	4628      	mov	r0, r5
 8005cd8:	47b8      	blx	r7
 8005cda:	3001      	adds	r0, #1
 8005cdc:	f43f aef7 	beq.w	8005ace <_printf_float+0xc2>
 8005ce0:	f109 0901 	add.w	r9, r9, #1
 8005ce4:	e7ee      	b.n	8005cc4 <_printf_float+0x2b8>
 8005ce6:	bf00      	nop
 8005ce8:	7fefffff 	.word	0x7fefffff
 8005cec:	0800863c 	.word	0x0800863c
 8005cf0:	08008640 	.word	0x08008640
 8005cf4:	08008648 	.word	0x08008648
 8005cf8:	08008644 	.word	0x08008644
 8005cfc:	0800864c 	.word	0x0800864c
 8005d00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d02:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d04:	429a      	cmp	r2, r3
 8005d06:	bfa8      	it	ge
 8005d08:	461a      	movge	r2, r3
 8005d0a:	2a00      	cmp	r2, #0
 8005d0c:	4691      	mov	r9, r2
 8005d0e:	dc37      	bgt.n	8005d80 <_printf_float+0x374>
 8005d10:	f04f 0b00 	mov.w	fp, #0
 8005d14:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d18:	f104 021a 	add.w	r2, r4, #26
 8005d1c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d1e:	9305      	str	r3, [sp, #20]
 8005d20:	eba3 0309 	sub.w	r3, r3, r9
 8005d24:	455b      	cmp	r3, fp
 8005d26:	dc33      	bgt.n	8005d90 <_printf_float+0x384>
 8005d28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	db3b      	blt.n	8005da8 <_printf_float+0x39c>
 8005d30:	6823      	ldr	r3, [r4, #0]
 8005d32:	07da      	lsls	r2, r3, #31
 8005d34:	d438      	bmi.n	8005da8 <_printf_float+0x39c>
 8005d36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d38:	9b05      	ldr	r3, [sp, #20]
 8005d3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	eba2 0901 	sub.w	r9, r2, r1
 8005d42:	4599      	cmp	r9, r3
 8005d44:	bfa8      	it	ge
 8005d46:	4699      	movge	r9, r3
 8005d48:	f1b9 0f00 	cmp.w	r9, #0
 8005d4c:	dc35      	bgt.n	8005dba <_printf_float+0x3ae>
 8005d4e:	f04f 0800 	mov.w	r8, #0
 8005d52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d56:	f104 0a1a 	add.w	sl, r4, #26
 8005d5a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d5e:	1a9b      	subs	r3, r3, r2
 8005d60:	eba3 0309 	sub.w	r3, r3, r9
 8005d64:	4543      	cmp	r3, r8
 8005d66:	f77f af79 	ble.w	8005c5c <_printf_float+0x250>
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	4652      	mov	r2, sl
 8005d6e:	4631      	mov	r1, r6
 8005d70:	4628      	mov	r0, r5
 8005d72:	47b8      	blx	r7
 8005d74:	3001      	adds	r0, #1
 8005d76:	f43f aeaa 	beq.w	8005ace <_printf_float+0xc2>
 8005d7a:	f108 0801 	add.w	r8, r8, #1
 8005d7e:	e7ec      	b.n	8005d5a <_printf_float+0x34e>
 8005d80:	4613      	mov	r3, r2
 8005d82:	4631      	mov	r1, r6
 8005d84:	4642      	mov	r2, r8
 8005d86:	4628      	mov	r0, r5
 8005d88:	47b8      	blx	r7
 8005d8a:	3001      	adds	r0, #1
 8005d8c:	d1c0      	bne.n	8005d10 <_printf_float+0x304>
 8005d8e:	e69e      	b.n	8005ace <_printf_float+0xc2>
 8005d90:	2301      	movs	r3, #1
 8005d92:	4631      	mov	r1, r6
 8005d94:	4628      	mov	r0, r5
 8005d96:	9205      	str	r2, [sp, #20]
 8005d98:	47b8      	blx	r7
 8005d9a:	3001      	adds	r0, #1
 8005d9c:	f43f ae97 	beq.w	8005ace <_printf_float+0xc2>
 8005da0:	9a05      	ldr	r2, [sp, #20]
 8005da2:	f10b 0b01 	add.w	fp, fp, #1
 8005da6:	e7b9      	b.n	8005d1c <_printf_float+0x310>
 8005da8:	ee18 3a10 	vmov	r3, s16
 8005dac:	4652      	mov	r2, sl
 8005dae:	4631      	mov	r1, r6
 8005db0:	4628      	mov	r0, r5
 8005db2:	47b8      	blx	r7
 8005db4:	3001      	adds	r0, #1
 8005db6:	d1be      	bne.n	8005d36 <_printf_float+0x32a>
 8005db8:	e689      	b.n	8005ace <_printf_float+0xc2>
 8005dba:	9a05      	ldr	r2, [sp, #20]
 8005dbc:	464b      	mov	r3, r9
 8005dbe:	4442      	add	r2, r8
 8005dc0:	4631      	mov	r1, r6
 8005dc2:	4628      	mov	r0, r5
 8005dc4:	47b8      	blx	r7
 8005dc6:	3001      	adds	r0, #1
 8005dc8:	d1c1      	bne.n	8005d4e <_printf_float+0x342>
 8005dca:	e680      	b.n	8005ace <_printf_float+0xc2>
 8005dcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005dce:	2a01      	cmp	r2, #1
 8005dd0:	dc01      	bgt.n	8005dd6 <_printf_float+0x3ca>
 8005dd2:	07db      	lsls	r3, r3, #31
 8005dd4:	d538      	bpl.n	8005e48 <_printf_float+0x43c>
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	4642      	mov	r2, r8
 8005dda:	4631      	mov	r1, r6
 8005ddc:	4628      	mov	r0, r5
 8005dde:	47b8      	blx	r7
 8005de0:	3001      	adds	r0, #1
 8005de2:	f43f ae74 	beq.w	8005ace <_printf_float+0xc2>
 8005de6:	ee18 3a10 	vmov	r3, s16
 8005dea:	4652      	mov	r2, sl
 8005dec:	4631      	mov	r1, r6
 8005dee:	4628      	mov	r0, r5
 8005df0:	47b8      	blx	r7
 8005df2:	3001      	adds	r0, #1
 8005df4:	f43f ae6b 	beq.w	8005ace <_printf_float+0xc2>
 8005df8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	2300      	movs	r3, #0
 8005e00:	f7fa fe62 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e04:	b9d8      	cbnz	r0, 8005e3e <_printf_float+0x432>
 8005e06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e08:	f108 0201 	add.w	r2, r8, #1
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	4631      	mov	r1, r6
 8005e10:	4628      	mov	r0, r5
 8005e12:	47b8      	blx	r7
 8005e14:	3001      	adds	r0, #1
 8005e16:	d10e      	bne.n	8005e36 <_printf_float+0x42a>
 8005e18:	e659      	b.n	8005ace <_printf_float+0xc2>
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	4652      	mov	r2, sl
 8005e1e:	4631      	mov	r1, r6
 8005e20:	4628      	mov	r0, r5
 8005e22:	47b8      	blx	r7
 8005e24:	3001      	adds	r0, #1
 8005e26:	f43f ae52 	beq.w	8005ace <_printf_float+0xc2>
 8005e2a:	f108 0801 	add.w	r8, r8, #1
 8005e2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e30:	3b01      	subs	r3, #1
 8005e32:	4543      	cmp	r3, r8
 8005e34:	dcf1      	bgt.n	8005e1a <_printf_float+0x40e>
 8005e36:	464b      	mov	r3, r9
 8005e38:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005e3c:	e6dc      	b.n	8005bf8 <_printf_float+0x1ec>
 8005e3e:	f04f 0800 	mov.w	r8, #0
 8005e42:	f104 0a1a 	add.w	sl, r4, #26
 8005e46:	e7f2      	b.n	8005e2e <_printf_float+0x422>
 8005e48:	2301      	movs	r3, #1
 8005e4a:	4642      	mov	r2, r8
 8005e4c:	e7df      	b.n	8005e0e <_printf_float+0x402>
 8005e4e:	2301      	movs	r3, #1
 8005e50:	464a      	mov	r2, r9
 8005e52:	4631      	mov	r1, r6
 8005e54:	4628      	mov	r0, r5
 8005e56:	47b8      	blx	r7
 8005e58:	3001      	adds	r0, #1
 8005e5a:	f43f ae38 	beq.w	8005ace <_printf_float+0xc2>
 8005e5e:	f108 0801 	add.w	r8, r8, #1
 8005e62:	68e3      	ldr	r3, [r4, #12]
 8005e64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e66:	1a5b      	subs	r3, r3, r1
 8005e68:	4543      	cmp	r3, r8
 8005e6a:	dcf0      	bgt.n	8005e4e <_printf_float+0x442>
 8005e6c:	e6fa      	b.n	8005c64 <_printf_float+0x258>
 8005e6e:	f04f 0800 	mov.w	r8, #0
 8005e72:	f104 0919 	add.w	r9, r4, #25
 8005e76:	e7f4      	b.n	8005e62 <_printf_float+0x456>

08005e78 <_printf_common>:
 8005e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e7c:	4616      	mov	r6, r2
 8005e7e:	4699      	mov	r9, r3
 8005e80:	688a      	ldr	r2, [r1, #8]
 8005e82:	690b      	ldr	r3, [r1, #16]
 8005e84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	bfb8      	it	lt
 8005e8c:	4613      	movlt	r3, r2
 8005e8e:	6033      	str	r3, [r6, #0]
 8005e90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e94:	4607      	mov	r7, r0
 8005e96:	460c      	mov	r4, r1
 8005e98:	b10a      	cbz	r2, 8005e9e <_printf_common+0x26>
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	6033      	str	r3, [r6, #0]
 8005e9e:	6823      	ldr	r3, [r4, #0]
 8005ea0:	0699      	lsls	r1, r3, #26
 8005ea2:	bf42      	ittt	mi
 8005ea4:	6833      	ldrmi	r3, [r6, #0]
 8005ea6:	3302      	addmi	r3, #2
 8005ea8:	6033      	strmi	r3, [r6, #0]
 8005eaa:	6825      	ldr	r5, [r4, #0]
 8005eac:	f015 0506 	ands.w	r5, r5, #6
 8005eb0:	d106      	bne.n	8005ec0 <_printf_common+0x48>
 8005eb2:	f104 0a19 	add.w	sl, r4, #25
 8005eb6:	68e3      	ldr	r3, [r4, #12]
 8005eb8:	6832      	ldr	r2, [r6, #0]
 8005eba:	1a9b      	subs	r3, r3, r2
 8005ebc:	42ab      	cmp	r3, r5
 8005ebe:	dc26      	bgt.n	8005f0e <_printf_common+0x96>
 8005ec0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ec4:	1e13      	subs	r3, r2, #0
 8005ec6:	6822      	ldr	r2, [r4, #0]
 8005ec8:	bf18      	it	ne
 8005eca:	2301      	movne	r3, #1
 8005ecc:	0692      	lsls	r2, r2, #26
 8005ece:	d42b      	bmi.n	8005f28 <_printf_common+0xb0>
 8005ed0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ed4:	4649      	mov	r1, r9
 8005ed6:	4638      	mov	r0, r7
 8005ed8:	47c0      	blx	r8
 8005eda:	3001      	adds	r0, #1
 8005edc:	d01e      	beq.n	8005f1c <_printf_common+0xa4>
 8005ede:	6823      	ldr	r3, [r4, #0]
 8005ee0:	68e5      	ldr	r5, [r4, #12]
 8005ee2:	6832      	ldr	r2, [r6, #0]
 8005ee4:	f003 0306 	and.w	r3, r3, #6
 8005ee8:	2b04      	cmp	r3, #4
 8005eea:	bf08      	it	eq
 8005eec:	1aad      	subeq	r5, r5, r2
 8005eee:	68a3      	ldr	r3, [r4, #8]
 8005ef0:	6922      	ldr	r2, [r4, #16]
 8005ef2:	bf0c      	ite	eq
 8005ef4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ef8:	2500      	movne	r5, #0
 8005efa:	4293      	cmp	r3, r2
 8005efc:	bfc4      	itt	gt
 8005efe:	1a9b      	subgt	r3, r3, r2
 8005f00:	18ed      	addgt	r5, r5, r3
 8005f02:	2600      	movs	r6, #0
 8005f04:	341a      	adds	r4, #26
 8005f06:	42b5      	cmp	r5, r6
 8005f08:	d11a      	bne.n	8005f40 <_printf_common+0xc8>
 8005f0a:	2000      	movs	r0, #0
 8005f0c:	e008      	b.n	8005f20 <_printf_common+0xa8>
 8005f0e:	2301      	movs	r3, #1
 8005f10:	4652      	mov	r2, sl
 8005f12:	4649      	mov	r1, r9
 8005f14:	4638      	mov	r0, r7
 8005f16:	47c0      	blx	r8
 8005f18:	3001      	adds	r0, #1
 8005f1a:	d103      	bne.n	8005f24 <_printf_common+0xac>
 8005f1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f24:	3501      	adds	r5, #1
 8005f26:	e7c6      	b.n	8005eb6 <_printf_common+0x3e>
 8005f28:	18e1      	adds	r1, r4, r3
 8005f2a:	1c5a      	adds	r2, r3, #1
 8005f2c:	2030      	movs	r0, #48	; 0x30
 8005f2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f32:	4422      	add	r2, r4
 8005f34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f3c:	3302      	adds	r3, #2
 8005f3e:	e7c7      	b.n	8005ed0 <_printf_common+0x58>
 8005f40:	2301      	movs	r3, #1
 8005f42:	4622      	mov	r2, r4
 8005f44:	4649      	mov	r1, r9
 8005f46:	4638      	mov	r0, r7
 8005f48:	47c0      	blx	r8
 8005f4a:	3001      	adds	r0, #1
 8005f4c:	d0e6      	beq.n	8005f1c <_printf_common+0xa4>
 8005f4e:	3601      	adds	r6, #1
 8005f50:	e7d9      	b.n	8005f06 <_printf_common+0x8e>
	...

08005f54 <_printf_i>:
 8005f54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f58:	460c      	mov	r4, r1
 8005f5a:	4691      	mov	r9, r2
 8005f5c:	7e27      	ldrb	r7, [r4, #24]
 8005f5e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005f60:	2f78      	cmp	r7, #120	; 0x78
 8005f62:	4680      	mov	r8, r0
 8005f64:	469a      	mov	sl, r3
 8005f66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f6a:	d807      	bhi.n	8005f7c <_printf_i+0x28>
 8005f6c:	2f62      	cmp	r7, #98	; 0x62
 8005f6e:	d80a      	bhi.n	8005f86 <_printf_i+0x32>
 8005f70:	2f00      	cmp	r7, #0
 8005f72:	f000 80d8 	beq.w	8006126 <_printf_i+0x1d2>
 8005f76:	2f58      	cmp	r7, #88	; 0x58
 8005f78:	f000 80a3 	beq.w	80060c2 <_printf_i+0x16e>
 8005f7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005f80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f84:	e03a      	b.n	8005ffc <_printf_i+0xa8>
 8005f86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f8a:	2b15      	cmp	r3, #21
 8005f8c:	d8f6      	bhi.n	8005f7c <_printf_i+0x28>
 8005f8e:	a001      	add	r0, pc, #4	; (adr r0, 8005f94 <_printf_i+0x40>)
 8005f90:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005f94:	08005fed 	.word	0x08005fed
 8005f98:	08006001 	.word	0x08006001
 8005f9c:	08005f7d 	.word	0x08005f7d
 8005fa0:	08005f7d 	.word	0x08005f7d
 8005fa4:	08005f7d 	.word	0x08005f7d
 8005fa8:	08005f7d 	.word	0x08005f7d
 8005fac:	08006001 	.word	0x08006001
 8005fb0:	08005f7d 	.word	0x08005f7d
 8005fb4:	08005f7d 	.word	0x08005f7d
 8005fb8:	08005f7d 	.word	0x08005f7d
 8005fbc:	08005f7d 	.word	0x08005f7d
 8005fc0:	0800610d 	.word	0x0800610d
 8005fc4:	08006031 	.word	0x08006031
 8005fc8:	080060ef 	.word	0x080060ef
 8005fcc:	08005f7d 	.word	0x08005f7d
 8005fd0:	08005f7d 	.word	0x08005f7d
 8005fd4:	0800612f 	.word	0x0800612f
 8005fd8:	08005f7d 	.word	0x08005f7d
 8005fdc:	08006031 	.word	0x08006031
 8005fe0:	08005f7d 	.word	0x08005f7d
 8005fe4:	08005f7d 	.word	0x08005f7d
 8005fe8:	080060f7 	.word	0x080060f7
 8005fec:	680b      	ldr	r3, [r1, #0]
 8005fee:	1d1a      	adds	r2, r3, #4
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	600a      	str	r2, [r1, #0]
 8005ff4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005ff8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e0a3      	b.n	8006148 <_printf_i+0x1f4>
 8006000:	6825      	ldr	r5, [r4, #0]
 8006002:	6808      	ldr	r0, [r1, #0]
 8006004:	062e      	lsls	r6, r5, #24
 8006006:	f100 0304 	add.w	r3, r0, #4
 800600a:	d50a      	bpl.n	8006022 <_printf_i+0xce>
 800600c:	6805      	ldr	r5, [r0, #0]
 800600e:	600b      	str	r3, [r1, #0]
 8006010:	2d00      	cmp	r5, #0
 8006012:	da03      	bge.n	800601c <_printf_i+0xc8>
 8006014:	232d      	movs	r3, #45	; 0x2d
 8006016:	426d      	negs	r5, r5
 8006018:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800601c:	485e      	ldr	r0, [pc, #376]	; (8006198 <_printf_i+0x244>)
 800601e:	230a      	movs	r3, #10
 8006020:	e019      	b.n	8006056 <_printf_i+0x102>
 8006022:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006026:	6805      	ldr	r5, [r0, #0]
 8006028:	600b      	str	r3, [r1, #0]
 800602a:	bf18      	it	ne
 800602c:	b22d      	sxthne	r5, r5
 800602e:	e7ef      	b.n	8006010 <_printf_i+0xbc>
 8006030:	680b      	ldr	r3, [r1, #0]
 8006032:	6825      	ldr	r5, [r4, #0]
 8006034:	1d18      	adds	r0, r3, #4
 8006036:	6008      	str	r0, [r1, #0]
 8006038:	0628      	lsls	r0, r5, #24
 800603a:	d501      	bpl.n	8006040 <_printf_i+0xec>
 800603c:	681d      	ldr	r5, [r3, #0]
 800603e:	e002      	b.n	8006046 <_printf_i+0xf2>
 8006040:	0669      	lsls	r1, r5, #25
 8006042:	d5fb      	bpl.n	800603c <_printf_i+0xe8>
 8006044:	881d      	ldrh	r5, [r3, #0]
 8006046:	4854      	ldr	r0, [pc, #336]	; (8006198 <_printf_i+0x244>)
 8006048:	2f6f      	cmp	r7, #111	; 0x6f
 800604a:	bf0c      	ite	eq
 800604c:	2308      	moveq	r3, #8
 800604e:	230a      	movne	r3, #10
 8006050:	2100      	movs	r1, #0
 8006052:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006056:	6866      	ldr	r6, [r4, #4]
 8006058:	60a6      	str	r6, [r4, #8]
 800605a:	2e00      	cmp	r6, #0
 800605c:	bfa2      	ittt	ge
 800605e:	6821      	ldrge	r1, [r4, #0]
 8006060:	f021 0104 	bicge.w	r1, r1, #4
 8006064:	6021      	strge	r1, [r4, #0]
 8006066:	b90d      	cbnz	r5, 800606c <_printf_i+0x118>
 8006068:	2e00      	cmp	r6, #0
 800606a:	d04d      	beq.n	8006108 <_printf_i+0x1b4>
 800606c:	4616      	mov	r6, r2
 800606e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006072:	fb03 5711 	mls	r7, r3, r1, r5
 8006076:	5dc7      	ldrb	r7, [r0, r7]
 8006078:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800607c:	462f      	mov	r7, r5
 800607e:	42bb      	cmp	r3, r7
 8006080:	460d      	mov	r5, r1
 8006082:	d9f4      	bls.n	800606e <_printf_i+0x11a>
 8006084:	2b08      	cmp	r3, #8
 8006086:	d10b      	bne.n	80060a0 <_printf_i+0x14c>
 8006088:	6823      	ldr	r3, [r4, #0]
 800608a:	07df      	lsls	r7, r3, #31
 800608c:	d508      	bpl.n	80060a0 <_printf_i+0x14c>
 800608e:	6923      	ldr	r3, [r4, #16]
 8006090:	6861      	ldr	r1, [r4, #4]
 8006092:	4299      	cmp	r1, r3
 8006094:	bfde      	ittt	le
 8006096:	2330      	movle	r3, #48	; 0x30
 8006098:	f806 3c01 	strble.w	r3, [r6, #-1]
 800609c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80060a0:	1b92      	subs	r2, r2, r6
 80060a2:	6122      	str	r2, [r4, #16]
 80060a4:	f8cd a000 	str.w	sl, [sp]
 80060a8:	464b      	mov	r3, r9
 80060aa:	aa03      	add	r2, sp, #12
 80060ac:	4621      	mov	r1, r4
 80060ae:	4640      	mov	r0, r8
 80060b0:	f7ff fee2 	bl	8005e78 <_printf_common>
 80060b4:	3001      	adds	r0, #1
 80060b6:	d14c      	bne.n	8006152 <_printf_i+0x1fe>
 80060b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060bc:	b004      	add	sp, #16
 80060be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060c2:	4835      	ldr	r0, [pc, #212]	; (8006198 <_printf_i+0x244>)
 80060c4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80060c8:	6823      	ldr	r3, [r4, #0]
 80060ca:	680e      	ldr	r6, [r1, #0]
 80060cc:	061f      	lsls	r7, r3, #24
 80060ce:	f856 5b04 	ldr.w	r5, [r6], #4
 80060d2:	600e      	str	r6, [r1, #0]
 80060d4:	d514      	bpl.n	8006100 <_printf_i+0x1ac>
 80060d6:	07d9      	lsls	r1, r3, #31
 80060d8:	bf44      	itt	mi
 80060da:	f043 0320 	orrmi.w	r3, r3, #32
 80060de:	6023      	strmi	r3, [r4, #0]
 80060e0:	b91d      	cbnz	r5, 80060ea <_printf_i+0x196>
 80060e2:	6823      	ldr	r3, [r4, #0]
 80060e4:	f023 0320 	bic.w	r3, r3, #32
 80060e8:	6023      	str	r3, [r4, #0]
 80060ea:	2310      	movs	r3, #16
 80060ec:	e7b0      	b.n	8006050 <_printf_i+0xfc>
 80060ee:	6823      	ldr	r3, [r4, #0]
 80060f0:	f043 0320 	orr.w	r3, r3, #32
 80060f4:	6023      	str	r3, [r4, #0]
 80060f6:	2378      	movs	r3, #120	; 0x78
 80060f8:	4828      	ldr	r0, [pc, #160]	; (800619c <_printf_i+0x248>)
 80060fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060fe:	e7e3      	b.n	80060c8 <_printf_i+0x174>
 8006100:	065e      	lsls	r6, r3, #25
 8006102:	bf48      	it	mi
 8006104:	b2ad      	uxthmi	r5, r5
 8006106:	e7e6      	b.n	80060d6 <_printf_i+0x182>
 8006108:	4616      	mov	r6, r2
 800610a:	e7bb      	b.n	8006084 <_printf_i+0x130>
 800610c:	680b      	ldr	r3, [r1, #0]
 800610e:	6826      	ldr	r6, [r4, #0]
 8006110:	6960      	ldr	r0, [r4, #20]
 8006112:	1d1d      	adds	r5, r3, #4
 8006114:	600d      	str	r5, [r1, #0]
 8006116:	0635      	lsls	r5, r6, #24
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	d501      	bpl.n	8006120 <_printf_i+0x1cc>
 800611c:	6018      	str	r0, [r3, #0]
 800611e:	e002      	b.n	8006126 <_printf_i+0x1d2>
 8006120:	0671      	lsls	r1, r6, #25
 8006122:	d5fb      	bpl.n	800611c <_printf_i+0x1c8>
 8006124:	8018      	strh	r0, [r3, #0]
 8006126:	2300      	movs	r3, #0
 8006128:	6123      	str	r3, [r4, #16]
 800612a:	4616      	mov	r6, r2
 800612c:	e7ba      	b.n	80060a4 <_printf_i+0x150>
 800612e:	680b      	ldr	r3, [r1, #0]
 8006130:	1d1a      	adds	r2, r3, #4
 8006132:	600a      	str	r2, [r1, #0]
 8006134:	681e      	ldr	r6, [r3, #0]
 8006136:	6862      	ldr	r2, [r4, #4]
 8006138:	2100      	movs	r1, #0
 800613a:	4630      	mov	r0, r6
 800613c:	f7fa f850 	bl	80001e0 <memchr>
 8006140:	b108      	cbz	r0, 8006146 <_printf_i+0x1f2>
 8006142:	1b80      	subs	r0, r0, r6
 8006144:	6060      	str	r0, [r4, #4]
 8006146:	6863      	ldr	r3, [r4, #4]
 8006148:	6123      	str	r3, [r4, #16]
 800614a:	2300      	movs	r3, #0
 800614c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006150:	e7a8      	b.n	80060a4 <_printf_i+0x150>
 8006152:	6923      	ldr	r3, [r4, #16]
 8006154:	4632      	mov	r2, r6
 8006156:	4649      	mov	r1, r9
 8006158:	4640      	mov	r0, r8
 800615a:	47d0      	blx	sl
 800615c:	3001      	adds	r0, #1
 800615e:	d0ab      	beq.n	80060b8 <_printf_i+0x164>
 8006160:	6823      	ldr	r3, [r4, #0]
 8006162:	079b      	lsls	r3, r3, #30
 8006164:	d413      	bmi.n	800618e <_printf_i+0x23a>
 8006166:	68e0      	ldr	r0, [r4, #12]
 8006168:	9b03      	ldr	r3, [sp, #12]
 800616a:	4298      	cmp	r0, r3
 800616c:	bfb8      	it	lt
 800616e:	4618      	movlt	r0, r3
 8006170:	e7a4      	b.n	80060bc <_printf_i+0x168>
 8006172:	2301      	movs	r3, #1
 8006174:	4632      	mov	r2, r6
 8006176:	4649      	mov	r1, r9
 8006178:	4640      	mov	r0, r8
 800617a:	47d0      	blx	sl
 800617c:	3001      	adds	r0, #1
 800617e:	d09b      	beq.n	80060b8 <_printf_i+0x164>
 8006180:	3501      	adds	r5, #1
 8006182:	68e3      	ldr	r3, [r4, #12]
 8006184:	9903      	ldr	r1, [sp, #12]
 8006186:	1a5b      	subs	r3, r3, r1
 8006188:	42ab      	cmp	r3, r5
 800618a:	dcf2      	bgt.n	8006172 <_printf_i+0x21e>
 800618c:	e7eb      	b.n	8006166 <_printf_i+0x212>
 800618e:	2500      	movs	r5, #0
 8006190:	f104 0619 	add.w	r6, r4, #25
 8006194:	e7f5      	b.n	8006182 <_printf_i+0x22e>
 8006196:	bf00      	nop
 8006198:	0800864e 	.word	0x0800864e
 800619c:	0800865f 	.word	0x0800865f

080061a0 <siprintf>:
 80061a0:	b40e      	push	{r1, r2, r3}
 80061a2:	b500      	push	{lr}
 80061a4:	b09c      	sub	sp, #112	; 0x70
 80061a6:	ab1d      	add	r3, sp, #116	; 0x74
 80061a8:	9002      	str	r0, [sp, #8]
 80061aa:	9006      	str	r0, [sp, #24]
 80061ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80061b0:	4809      	ldr	r0, [pc, #36]	; (80061d8 <siprintf+0x38>)
 80061b2:	9107      	str	r1, [sp, #28]
 80061b4:	9104      	str	r1, [sp, #16]
 80061b6:	4909      	ldr	r1, [pc, #36]	; (80061dc <siprintf+0x3c>)
 80061b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80061bc:	9105      	str	r1, [sp, #20]
 80061be:	6800      	ldr	r0, [r0, #0]
 80061c0:	9301      	str	r3, [sp, #4]
 80061c2:	a902      	add	r1, sp, #8
 80061c4:	f001 fb32 	bl	800782c <_svfiprintf_r>
 80061c8:	9b02      	ldr	r3, [sp, #8]
 80061ca:	2200      	movs	r2, #0
 80061cc:	701a      	strb	r2, [r3, #0]
 80061ce:	b01c      	add	sp, #112	; 0x70
 80061d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80061d4:	b003      	add	sp, #12
 80061d6:	4770      	bx	lr
 80061d8:	2000000c 	.word	0x2000000c
 80061dc:	ffff0208 	.word	0xffff0208

080061e0 <quorem>:
 80061e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061e4:	6903      	ldr	r3, [r0, #16]
 80061e6:	690c      	ldr	r4, [r1, #16]
 80061e8:	42a3      	cmp	r3, r4
 80061ea:	4607      	mov	r7, r0
 80061ec:	f2c0 8081 	blt.w	80062f2 <quorem+0x112>
 80061f0:	3c01      	subs	r4, #1
 80061f2:	f101 0814 	add.w	r8, r1, #20
 80061f6:	f100 0514 	add.w	r5, r0, #20
 80061fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061fe:	9301      	str	r3, [sp, #4]
 8006200:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006204:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006208:	3301      	adds	r3, #1
 800620a:	429a      	cmp	r2, r3
 800620c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006210:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006214:	fbb2 f6f3 	udiv	r6, r2, r3
 8006218:	d331      	bcc.n	800627e <quorem+0x9e>
 800621a:	f04f 0e00 	mov.w	lr, #0
 800621e:	4640      	mov	r0, r8
 8006220:	46ac      	mov	ip, r5
 8006222:	46f2      	mov	sl, lr
 8006224:	f850 2b04 	ldr.w	r2, [r0], #4
 8006228:	b293      	uxth	r3, r2
 800622a:	fb06 e303 	mla	r3, r6, r3, lr
 800622e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006232:	b29b      	uxth	r3, r3
 8006234:	ebaa 0303 	sub.w	r3, sl, r3
 8006238:	0c12      	lsrs	r2, r2, #16
 800623a:	f8dc a000 	ldr.w	sl, [ip]
 800623e:	fb06 e202 	mla	r2, r6, r2, lr
 8006242:	fa13 f38a 	uxtah	r3, r3, sl
 8006246:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800624a:	fa1f fa82 	uxth.w	sl, r2
 800624e:	f8dc 2000 	ldr.w	r2, [ip]
 8006252:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006256:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800625a:	b29b      	uxth	r3, r3
 800625c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006260:	4581      	cmp	r9, r0
 8006262:	f84c 3b04 	str.w	r3, [ip], #4
 8006266:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800626a:	d2db      	bcs.n	8006224 <quorem+0x44>
 800626c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006270:	b92b      	cbnz	r3, 800627e <quorem+0x9e>
 8006272:	9b01      	ldr	r3, [sp, #4]
 8006274:	3b04      	subs	r3, #4
 8006276:	429d      	cmp	r5, r3
 8006278:	461a      	mov	r2, r3
 800627a:	d32e      	bcc.n	80062da <quorem+0xfa>
 800627c:	613c      	str	r4, [r7, #16]
 800627e:	4638      	mov	r0, r7
 8006280:	f001 f8be 	bl	8007400 <__mcmp>
 8006284:	2800      	cmp	r0, #0
 8006286:	db24      	blt.n	80062d2 <quorem+0xf2>
 8006288:	3601      	adds	r6, #1
 800628a:	4628      	mov	r0, r5
 800628c:	f04f 0c00 	mov.w	ip, #0
 8006290:	f858 2b04 	ldr.w	r2, [r8], #4
 8006294:	f8d0 e000 	ldr.w	lr, [r0]
 8006298:	b293      	uxth	r3, r2
 800629a:	ebac 0303 	sub.w	r3, ip, r3
 800629e:	0c12      	lsrs	r2, r2, #16
 80062a0:	fa13 f38e 	uxtah	r3, r3, lr
 80062a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80062a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80062b2:	45c1      	cmp	r9, r8
 80062b4:	f840 3b04 	str.w	r3, [r0], #4
 80062b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80062bc:	d2e8      	bcs.n	8006290 <quorem+0xb0>
 80062be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80062c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80062c6:	b922      	cbnz	r2, 80062d2 <quorem+0xf2>
 80062c8:	3b04      	subs	r3, #4
 80062ca:	429d      	cmp	r5, r3
 80062cc:	461a      	mov	r2, r3
 80062ce:	d30a      	bcc.n	80062e6 <quorem+0x106>
 80062d0:	613c      	str	r4, [r7, #16]
 80062d2:	4630      	mov	r0, r6
 80062d4:	b003      	add	sp, #12
 80062d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062da:	6812      	ldr	r2, [r2, #0]
 80062dc:	3b04      	subs	r3, #4
 80062de:	2a00      	cmp	r2, #0
 80062e0:	d1cc      	bne.n	800627c <quorem+0x9c>
 80062e2:	3c01      	subs	r4, #1
 80062e4:	e7c7      	b.n	8006276 <quorem+0x96>
 80062e6:	6812      	ldr	r2, [r2, #0]
 80062e8:	3b04      	subs	r3, #4
 80062ea:	2a00      	cmp	r2, #0
 80062ec:	d1f0      	bne.n	80062d0 <quorem+0xf0>
 80062ee:	3c01      	subs	r4, #1
 80062f0:	e7eb      	b.n	80062ca <quorem+0xea>
 80062f2:	2000      	movs	r0, #0
 80062f4:	e7ee      	b.n	80062d4 <quorem+0xf4>
	...

080062f8 <_dtoa_r>:
 80062f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062fc:	ed2d 8b02 	vpush	{d8}
 8006300:	ec57 6b10 	vmov	r6, r7, d0
 8006304:	b095      	sub	sp, #84	; 0x54
 8006306:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006308:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800630c:	9105      	str	r1, [sp, #20]
 800630e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006312:	4604      	mov	r4, r0
 8006314:	9209      	str	r2, [sp, #36]	; 0x24
 8006316:	930f      	str	r3, [sp, #60]	; 0x3c
 8006318:	b975      	cbnz	r5, 8006338 <_dtoa_r+0x40>
 800631a:	2010      	movs	r0, #16
 800631c:	f000 fddc 	bl	8006ed8 <malloc>
 8006320:	4602      	mov	r2, r0
 8006322:	6260      	str	r0, [r4, #36]	; 0x24
 8006324:	b920      	cbnz	r0, 8006330 <_dtoa_r+0x38>
 8006326:	4bb2      	ldr	r3, [pc, #712]	; (80065f0 <_dtoa_r+0x2f8>)
 8006328:	21ea      	movs	r1, #234	; 0xea
 800632a:	48b2      	ldr	r0, [pc, #712]	; (80065f4 <_dtoa_r+0x2fc>)
 800632c:	f001 fb8e 	bl	8007a4c <__assert_func>
 8006330:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006334:	6005      	str	r5, [r0, #0]
 8006336:	60c5      	str	r5, [r0, #12]
 8006338:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800633a:	6819      	ldr	r1, [r3, #0]
 800633c:	b151      	cbz	r1, 8006354 <_dtoa_r+0x5c>
 800633e:	685a      	ldr	r2, [r3, #4]
 8006340:	604a      	str	r2, [r1, #4]
 8006342:	2301      	movs	r3, #1
 8006344:	4093      	lsls	r3, r2
 8006346:	608b      	str	r3, [r1, #8]
 8006348:	4620      	mov	r0, r4
 800634a:	f000 fe1b 	bl	8006f84 <_Bfree>
 800634e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006350:	2200      	movs	r2, #0
 8006352:	601a      	str	r2, [r3, #0]
 8006354:	1e3b      	subs	r3, r7, #0
 8006356:	bfb9      	ittee	lt
 8006358:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800635c:	9303      	strlt	r3, [sp, #12]
 800635e:	2300      	movge	r3, #0
 8006360:	f8c8 3000 	strge.w	r3, [r8]
 8006364:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006368:	4ba3      	ldr	r3, [pc, #652]	; (80065f8 <_dtoa_r+0x300>)
 800636a:	bfbc      	itt	lt
 800636c:	2201      	movlt	r2, #1
 800636e:	f8c8 2000 	strlt.w	r2, [r8]
 8006372:	ea33 0309 	bics.w	r3, r3, r9
 8006376:	d11b      	bne.n	80063b0 <_dtoa_r+0xb8>
 8006378:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800637a:	f242 730f 	movw	r3, #9999	; 0x270f
 800637e:	6013      	str	r3, [r2, #0]
 8006380:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006384:	4333      	orrs	r3, r6
 8006386:	f000 857a 	beq.w	8006e7e <_dtoa_r+0xb86>
 800638a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800638c:	b963      	cbnz	r3, 80063a8 <_dtoa_r+0xb0>
 800638e:	4b9b      	ldr	r3, [pc, #620]	; (80065fc <_dtoa_r+0x304>)
 8006390:	e024      	b.n	80063dc <_dtoa_r+0xe4>
 8006392:	4b9b      	ldr	r3, [pc, #620]	; (8006600 <_dtoa_r+0x308>)
 8006394:	9300      	str	r3, [sp, #0]
 8006396:	3308      	adds	r3, #8
 8006398:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800639a:	6013      	str	r3, [r2, #0]
 800639c:	9800      	ldr	r0, [sp, #0]
 800639e:	b015      	add	sp, #84	; 0x54
 80063a0:	ecbd 8b02 	vpop	{d8}
 80063a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063a8:	4b94      	ldr	r3, [pc, #592]	; (80065fc <_dtoa_r+0x304>)
 80063aa:	9300      	str	r3, [sp, #0]
 80063ac:	3303      	adds	r3, #3
 80063ae:	e7f3      	b.n	8006398 <_dtoa_r+0xa0>
 80063b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80063b4:	2200      	movs	r2, #0
 80063b6:	ec51 0b17 	vmov	r0, r1, d7
 80063ba:	2300      	movs	r3, #0
 80063bc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80063c0:	f7fa fb82 	bl	8000ac8 <__aeabi_dcmpeq>
 80063c4:	4680      	mov	r8, r0
 80063c6:	b158      	cbz	r0, 80063e0 <_dtoa_r+0xe8>
 80063c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80063ca:	2301      	movs	r3, #1
 80063cc:	6013      	str	r3, [r2, #0]
 80063ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f000 8551 	beq.w	8006e78 <_dtoa_r+0xb80>
 80063d6:	488b      	ldr	r0, [pc, #556]	; (8006604 <_dtoa_r+0x30c>)
 80063d8:	6018      	str	r0, [r3, #0]
 80063da:	1e43      	subs	r3, r0, #1
 80063dc:	9300      	str	r3, [sp, #0]
 80063de:	e7dd      	b.n	800639c <_dtoa_r+0xa4>
 80063e0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80063e4:	aa12      	add	r2, sp, #72	; 0x48
 80063e6:	a913      	add	r1, sp, #76	; 0x4c
 80063e8:	4620      	mov	r0, r4
 80063ea:	f001 f8ad 	bl	8007548 <__d2b>
 80063ee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80063f2:	4683      	mov	fp, r0
 80063f4:	2d00      	cmp	r5, #0
 80063f6:	d07c      	beq.n	80064f2 <_dtoa_r+0x1fa>
 80063f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063fa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80063fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006402:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006406:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800640a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800640e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006412:	4b7d      	ldr	r3, [pc, #500]	; (8006608 <_dtoa_r+0x310>)
 8006414:	2200      	movs	r2, #0
 8006416:	4630      	mov	r0, r6
 8006418:	4639      	mov	r1, r7
 800641a:	f7f9 ff35 	bl	8000288 <__aeabi_dsub>
 800641e:	a36e      	add	r3, pc, #440	; (adr r3, 80065d8 <_dtoa_r+0x2e0>)
 8006420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006424:	f7fa f8e8 	bl	80005f8 <__aeabi_dmul>
 8006428:	a36d      	add	r3, pc, #436	; (adr r3, 80065e0 <_dtoa_r+0x2e8>)
 800642a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642e:	f7f9 ff2d 	bl	800028c <__adddf3>
 8006432:	4606      	mov	r6, r0
 8006434:	4628      	mov	r0, r5
 8006436:	460f      	mov	r7, r1
 8006438:	f7fa f874 	bl	8000524 <__aeabi_i2d>
 800643c:	a36a      	add	r3, pc, #424	; (adr r3, 80065e8 <_dtoa_r+0x2f0>)
 800643e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006442:	f7fa f8d9 	bl	80005f8 <__aeabi_dmul>
 8006446:	4602      	mov	r2, r0
 8006448:	460b      	mov	r3, r1
 800644a:	4630      	mov	r0, r6
 800644c:	4639      	mov	r1, r7
 800644e:	f7f9 ff1d 	bl	800028c <__adddf3>
 8006452:	4606      	mov	r6, r0
 8006454:	460f      	mov	r7, r1
 8006456:	f7fa fb7f 	bl	8000b58 <__aeabi_d2iz>
 800645a:	2200      	movs	r2, #0
 800645c:	4682      	mov	sl, r0
 800645e:	2300      	movs	r3, #0
 8006460:	4630      	mov	r0, r6
 8006462:	4639      	mov	r1, r7
 8006464:	f7fa fb3a 	bl	8000adc <__aeabi_dcmplt>
 8006468:	b148      	cbz	r0, 800647e <_dtoa_r+0x186>
 800646a:	4650      	mov	r0, sl
 800646c:	f7fa f85a 	bl	8000524 <__aeabi_i2d>
 8006470:	4632      	mov	r2, r6
 8006472:	463b      	mov	r3, r7
 8006474:	f7fa fb28 	bl	8000ac8 <__aeabi_dcmpeq>
 8006478:	b908      	cbnz	r0, 800647e <_dtoa_r+0x186>
 800647a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800647e:	f1ba 0f16 	cmp.w	sl, #22
 8006482:	d854      	bhi.n	800652e <_dtoa_r+0x236>
 8006484:	4b61      	ldr	r3, [pc, #388]	; (800660c <_dtoa_r+0x314>)
 8006486:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800648a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006492:	f7fa fb23 	bl	8000adc <__aeabi_dcmplt>
 8006496:	2800      	cmp	r0, #0
 8006498:	d04b      	beq.n	8006532 <_dtoa_r+0x23a>
 800649a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800649e:	2300      	movs	r3, #0
 80064a0:	930e      	str	r3, [sp, #56]	; 0x38
 80064a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80064a4:	1b5d      	subs	r5, r3, r5
 80064a6:	1e6b      	subs	r3, r5, #1
 80064a8:	9304      	str	r3, [sp, #16]
 80064aa:	bf43      	ittte	mi
 80064ac:	2300      	movmi	r3, #0
 80064ae:	f1c5 0801 	rsbmi	r8, r5, #1
 80064b2:	9304      	strmi	r3, [sp, #16]
 80064b4:	f04f 0800 	movpl.w	r8, #0
 80064b8:	f1ba 0f00 	cmp.w	sl, #0
 80064bc:	db3b      	blt.n	8006536 <_dtoa_r+0x23e>
 80064be:	9b04      	ldr	r3, [sp, #16]
 80064c0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80064c4:	4453      	add	r3, sl
 80064c6:	9304      	str	r3, [sp, #16]
 80064c8:	2300      	movs	r3, #0
 80064ca:	9306      	str	r3, [sp, #24]
 80064cc:	9b05      	ldr	r3, [sp, #20]
 80064ce:	2b09      	cmp	r3, #9
 80064d0:	d869      	bhi.n	80065a6 <_dtoa_r+0x2ae>
 80064d2:	2b05      	cmp	r3, #5
 80064d4:	bfc4      	itt	gt
 80064d6:	3b04      	subgt	r3, #4
 80064d8:	9305      	strgt	r3, [sp, #20]
 80064da:	9b05      	ldr	r3, [sp, #20]
 80064dc:	f1a3 0302 	sub.w	r3, r3, #2
 80064e0:	bfcc      	ite	gt
 80064e2:	2500      	movgt	r5, #0
 80064e4:	2501      	movle	r5, #1
 80064e6:	2b03      	cmp	r3, #3
 80064e8:	d869      	bhi.n	80065be <_dtoa_r+0x2c6>
 80064ea:	e8df f003 	tbb	[pc, r3]
 80064ee:	4e2c      	.short	0x4e2c
 80064f0:	5a4c      	.short	0x5a4c
 80064f2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80064f6:	441d      	add	r5, r3
 80064f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80064fc:	2b20      	cmp	r3, #32
 80064fe:	bfc1      	itttt	gt
 8006500:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006504:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006508:	fa09 f303 	lslgt.w	r3, r9, r3
 800650c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006510:	bfda      	itte	le
 8006512:	f1c3 0320 	rsble	r3, r3, #32
 8006516:	fa06 f003 	lslle.w	r0, r6, r3
 800651a:	4318      	orrgt	r0, r3
 800651c:	f7f9 fff2 	bl	8000504 <__aeabi_ui2d>
 8006520:	2301      	movs	r3, #1
 8006522:	4606      	mov	r6, r0
 8006524:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006528:	3d01      	subs	r5, #1
 800652a:	9310      	str	r3, [sp, #64]	; 0x40
 800652c:	e771      	b.n	8006412 <_dtoa_r+0x11a>
 800652e:	2301      	movs	r3, #1
 8006530:	e7b6      	b.n	80064a0 <_dtoa_r+0x1a8>
 8006532:	900e      	str	r0, [sp, #56]	; 0x38
 8006534:	e7b5      	b.n	80064a2 <_dtoa_r+0x1aa>
 8006536:	f1ca 0300 	rsb	r3, sl, #0
 800653a:	9306      	str	r3, [sp, #24]
 800653c:	2300      	movs	r3, #0
 800653e:	eba8 080a 	sub.w	r8, r8, sl
 8006542:	930d      	str	r3, [sp, #52]	; 0x34
 8006544:	e7c2      	b.n	80064cc <_dtoa_r+0x1d4>
 8006546:	2300      	movs	r3, #0
 8006548:	9308      	str	r3, [sp, #32]
 800654a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800654c:	2b00      	cmp	r3, #0
 800654e:	dc39      	bgt.n	80065c4 <_dtoa_r+0x2cc>
 8006550:	f04f 0901 	mov.w	r9, #1
 8006554:	f8cd 9004 	str.w	r9, [sp, #4]
 8006558:	464b      	mov	r3, r9
 800655a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800655e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006560:	2200      	movs	r2, #0
 8006562:	6042      	str	r2, [r0, #4]
 8006564:	2204      	movs	r2, #4
 8006566:	f102 0614 	add.w	r6, r2, #20
 800656a:	429e      	cmp	r6, r3
 800656c:	6841      	ldr	r1, [r0, #4]
 800656e:	d92f      	bls.n	80065d0 <_dtoa_r+0x2d8>
 8006570:	4620      	mov	r0, r4
 8006572:	f000 fcc7 	bl	8006f04 <_Balloc>
 8006576:	9000      	str	r0, [sp, #0]
 8006578:	2800      	cmp	r0, #0
 800657a:	d14b      	bne.n	8006614 <_dtoa_r+0x31c>
 800657c:	4b24      	ldr	r3, [pc, #144]	; (8006610 <_dtoa_r+0x318>)
 800657e:	4602      	mov	r2, r0
 8006580:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006584:	e6d1      	b.n	800632a <_dtoa_r+0x32>
 8006586:	2301      	movs	r3, #1
 8006588:	e7de      	b.n	8006548 <_dtoa_r+0x250>
 800658a:	2300      	movs	r3, #0
 800658c:	9308      	str	r3, [sp, #32]
 800658e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006590:	eb0a 0903 	add.w	r9, sl, r3
 8006594:	f109 0301 	add.w	r3, r9, #1
 8006598:	2b01      	cmp	r3, #1
 800659a:	9301      	str	r3, [sp, #4]
 800659c:	bfb8      	it	lt
 800659e:	2301      	movlt	r3, #1
 80065a0:	e7dd      	b.n	800655e <_dtoa_r+0x266>
 80065a2:	2301      	movs	r3, #1
 80065a4:	e7f2      	b.n	800658c <_dtoa_r+0x294>
 80065a6:	2501      	movs	r5, #1
 80065a8:	2300      	movs	r3, #0
 80065aa:	9305      	str	r3, [sp, #20]
 80065ac:	9508      	str	r5, [sp, #32]
 80065ae:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80065b2:	2200      	movs	r2, #0
 80065b4:	f8cd 9004 	str.w	r9, [sp, #4]
 80065b8:	2312      	movs	r3, #18
 80065ba:	9209      	str	r2, [sp, #36]	; 0x24
 80065bc:	e7cf      	b.n	800655e <_dtoa_r+0x266>
 80065be:	2301      	movs	r3, #1
 80065c0:	9308      	str	r3, [sp, #32]
 80065c2:	e7f4      	b.n	80065ae <_dtoa_r+0x2b6>
 80065c4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80065c8:	f8cd 9004 	str.w	r9, [sp, #4]
 80065cc:	464b      	mov	r3, r9
 80065ce:	e7c6      	b.n	800655e <_dtoa_r+0x266>
 80065d0:	3101      	adds	r1, #1
 80065d2:	6041      	str	r1, [r0, #4]
 80065d4:	0052      	lsls	r2, r2, #1
 80065d6:	e7c6      	b.n	8006566 <_dtoa_r+0x26e>
 80065d8:	636f4361 	.word	0x636f4361
 80065dc:	3fd287a7 	.word	0x3fd287a7
 80065e0:	8b60c8b3 	.word	0x8b60c8b3
 80065e4:	3fc68a28 	.word	0x3fc68a28
 80065e8:	509f79fb 	.word	0x509f79fb
 80065ec:	3fd34413 	.word	0x3fd34413
 80065f0:	0800867d 	.word	0x0800867d
 80065f4:	08008694 	.word	0x08008694
 80065f8:	7ff00000 	.word	0x7ff00000
 80065fc:	08008679 	.word	0x08008679
 8006600:	08008670 	.word	0x08008670
 8006604:	0800864d 	.word	0x0800864d
 8006608:	3ff80000 	.word	0x3ff80000
 800660c:	08008790 	.word	0x08008790
 8006610:	080086f3 	.word	0x080086f3
 8006614:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006616:	9a00      	ldr	r2, [sp, #0]
 8006618:	601a      	str	r2, [r3, #0]
 800661a:	9b01      	ldr	r3, [sp, #4]
 800661c:	2b0e      	cmp	r3, #14
 800661e:	f200 80ad 	bhi.w	800677c <_dtoa_r+0x484>
 8006622:	2d00      	cmp	r5, #0
 8006624:	f000 80aa 	beq.w	800677c <_dtoa_r+0x484>
 8006628:	f1ba 0f00 	cmp.w	sl, #0
 800662c:	dd36      	ble.n	800669c <_dtoa_r+0x3a4>
 800662e:	4ac3      	ldr	r2, [pc, #780]	; (800693c <_dtoa_r+0x644>)
 8006630:	f00a 030f 	and.w	r3, sl, #15
 8006634:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006638:	ed93 7b00 	vldr	d7, [r3]
 800663c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006640:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006644:	eeb0 8a47 	vmov.f32	s16, s14
 8006648:	eef0 8a67 	vmov.f32	s17, s15
 800664c:	d016      	beq.n	800667c <_dtoa_r+0x384>
 800664e:	4bbc      	ldr	r3, [pc, #752]	; (8006940 <_dtoa_r+0x648>)
 8006650:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006654:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006658:	f7fa f8f8 	bl	800084c <__aeabi_ddiv>
 800665c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006660:	f007 070f 	and.w	r7, r7, #15
 8006664:	2503      	movs	r5, #3
 8006666:	4eb6      	ldr	r6, [pc, #728]	; (8006940 <_dtoa_r+0x648>)
 8006668:	b957      	cbnz	r7, 8006680 <_dtoa_r+0x388>
 800666a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800666e:	ec53 2b18 	vmov	r2, r3, d8
 8006672:	f7fa f8eb 	bl	800084c <__aeabi_ddiv>
 8006676:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800667a:	e029      	b.n	80066d0 <_dtoa_r+0x3d8>
 800667c:	2502      	movs	r5, #2
 800667e:	e7f2      	b.n	8006666 <_dtoa_r+0x36e>
 8006680:	07f9      	lsls	r1, r7, #31
 8006682:	d508      	bpl.n	8006696 <_dtoa_r+0x39e>
 8006684:	ec51 0b18 	vmov	r0, r1, d8
 8006688:	e9d6 2300 	ldrd	r2, r3, [r6]
 800668c:	f7f9 ffb4 	bl	80005f8 <__aeabi_dmul>
 8006690:	ec41 0b18 	vmov	d8, r0, r1
 8006694:	3501      	adds	r5, #1
 8006696:	107f      	asrs	r7, r7, #1
 8006698:	3608      	adds	r6, #8
 800669a:	e7e5      	b.n	8006668 <_dtoa_r+0x370>
 800669c:	f000 80a6 	beq.w	80067ec <_dtoa_r+0x4f4>
 80066a0:	f1ca 0600 	rsb	r6, sl, #0
 80066a4:	4ba5      	ldr	r3, [pc, #660]	; (800693c <_dtoa_r+0x644>)
 80066a6:	4fa6      	ldr	r7, [pc, #664]	; (8006940 <_dtoa_r+0x648>)
 80066a8:	f006 020f 	and.w	r2, r6, #15
 80066ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80066b8:	f7f9 ff9e 	bl	80005f8 <__aeabi_dmul>
 80066bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066c0:	1136      	asrs	r6, r6, #4
 80066c2:	2300      	movs	r3, #0
 80066c4:	2502      	movs	r5, #2
 80066c6:	2e00      	cmp	r6, #0
 80066c8:	f040 8085 	bne.w	80067d6 <_dtoa_r+0x4de>
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d1d2      	bne.n	8006676 <_dtoa_r+0x37e>
 80066d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	f000 808c 	beq.w	80067f0 <_dtoa_r+0x4f8>
 80066d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80066dc:	4b99      	ldr	r3, [pc, #612]	; (8006944 <_dtoa_r+0x64c>)
 80066de:	2200      	movs	r2, #0
 80066e0:	4630      	mov	r0, r6
 80066e2:	4639      	mov	r1, r7
 80066e4:	f7fa f9fa 	bl	8000adc <__aeabi_dcmplt>
 80066e8:	2800      	cmp	r0, #0
 80066ea:	f000 8081 	beq.w	80067f0 <_dtoa_r+0x4f8>
 80066ee:	9b01      	ldr	r3, [sp, #4]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d07d      	beq.n	80067f0 <_dtoa_r+0x4f8>
 80066f4:	f1b9 0f00 	cmp.w	r9, #0
 80066f8:	dd3c      	ble.n	8006774 <_dtoa_r+0x47c>
 80066fa:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80066fe:	9307      	str	r3, [sp, #28]
 8006700:	2200      	movs	r2, #0
 8006702:	4b91      	ldr	r3, [pc, #580]	; (8006948 <_dtoa_r+0x650>)
 8006704:	4630      	mov	r0, r6
 8006706:	4639      	mov	r1, r7
 8006708:	f7f9 ff76 	bl	80005f8 <__aeabi_dmul>
 800670c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006710:	3501      	adds	r5, #1
 8006712:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006716:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800671a:	4628      	mov	r0, r5
 800671c:	f7f9 ff02 	bl	8000524 <__aeabi_i2d>
 8006720:	4632      	mov	r2, r6
 8006722:	463b      	mov	r3, r7
 8006724:	f7f9 ff68 	bl	80005f8 <__aeabi_dmul>
 8006728:	4b88      	ldr	r3, [pc, #544]	; (800694c <_dtoa_r+0x654>)
 800672a:	2200      	movs	r2, #0
 800672c:	f7f9 fdae 	bl	800028c <__adddf3>
 8006730:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006734:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006738:	9303      	str	r3, [sp, #12]
 800673a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800673c:	2b00      	cmp	r3, #0
 800673e:	d15c      	bne.n	80067fa <_dtoa_r+0x502>
 8006740:	4b83      	ldr	r3, [pc, #524]	; (8006950 <_dtoa_r+0x658>)
 8006742:	2200      	movs	r2, #0
 8006744:	4630      	mov	r0, r6
 8006746:	4639      	mov	r1, r7
 8006748:	f7f9 fd9e 	bl	8000288 <__aeabi_dsub>
 800674c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006750:	4606      	mov	r6, r0
 8006752:	460f      	mov	r7, r1
 8006754:	f7fa f9e0 	bl	8000b18 <__aeabi_dcmpgt>
 8006758:	2800      	cmp	r0, #0
 800675a:	f040 8296 	bne.w	8006c8a <_dtoa_r+0x992>
 800675e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006762:	4630      	mov	r0, r6
 8006764:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006768:	4639      	mov	r1, r7
 800676a:	f7fa f9b7 	bl	8000adc <__aeabi_dcmplt>
 800676e:	2800      	cmp	r0, #0
 8006770:	f040 8288 	bne.w	8006c84 <_dtoa_r+0x98c>
 8006774:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006778:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800677c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800677e:	2b00      	cmp	r3, #0
 8006780:	f2c0 8158 	blt.w	8006a34 <_dtoa_r+0x73c>
 8006784:	f1ba 0f0e 	cmp.w	sl, #14
 8006788:	f300 8154 	bgt.w	8006a34 <_dtoa_r+0x73c>
 800678c:	4b6b      	ldr	r3, [pc, #428]	; (800693c <_dtoa_r+0x644>)
 800678e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006792:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006798:	2b00      	cmp	r3, #0
 800679a:	f280 80e3 	bge.w	8006964 <_dtoa_r+0x66c>
 800679e:	9b01      	ldr	r3, [sp, #4]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	f300 80df 	bgt.w	8006964 <_dtoa_r+0x66c>
 80067a6:	f040 826d 	bne.w	8006c84 <_dtoa_r+0x98c>
 80067aa:	4b69      	ldr	r3, [pc, #420]	; (8006950 <_dtoa_r+0x658>)
 80067ac:	2200      	movs	r2, #0
 80067ae:	4640      	mov	r0, r8
 80067b0:	4649      	mov	r1, r9
 80067b2:	f7f9 ff21 	bl	80005f8 <__aeabi_dmul>
 80067b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80067ba:	f7fa f9a3 	bl	8000b04 <__aeabi_dcmpge>
 80067be:	9e01      	ldr	r6, [sp, #4]
 80067c0:	4637      	mov	r7, r6
 80067c2:	2800      	cmp	r0, #0
 80067c4:	f040 8243 	bne.w	8006c4e <_dtoa_r+0x956>
 80067c8:	9d00      	ldr	r5, [sp, #0]
 80067ca:	2331      	movs	r3, #49	; 0x31
 80067cc:	f805 3b01 	strb.w	r3, [r5], #1
 80067d0:	f10a 0a01 	add.w	sl, sl, #1
 80067d4:	e23f      	b.n	8006c56 <_dtoa_r+0x95e>
 80067d6:	07f2      	lsls	r2, r6, #31
 80067d8:	d505      	bpl.n	80067e6 <_dtoa_r+0x4ee>
 80067da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067de:	f7f9 ff0b 	bl	80005f8 <__aeabi_dmul>
 80067e2:	3501      	adds	r5, #1
 80067e4:	2301      	movs	r3, #1
 80067e6:	1076      	asrs	r6, r6, #1
 80067e8:	3708      	adds	r7, #8
 80067ea:	e76c      	b.n	80066c6 <_dtoa_r+0x3ce>
 80067ec:	2502      	movs	r5, #2
 80067ee:	e76f      	b.n	80066d0 <_dtoa_r+0x3d8>
 80067f0:	9b01      	ldr	r3, [sp, #4]
 80067f2:	f8cd a01c 	str.w	sl, [sp, #28]
 80067f6:	930c      	str	r3, [sp, #48]	; 0x30
 80067f8:	e78d      	b.n	8006716 <_dtoa_r+0x41e>
 80067fa:	9900      	ldr	r1, [sp, #0]
 80067fc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80067fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006800:	4b4e      	ldr	r3, [pc, #312]	; (800693c <_dtoa_r+0x644>)
 8006802:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006806:	4401      	add	r1, r0
 8006808:	9102      	str	r1, [sp, #8]
 800680a:	9908      	ldr	r1, [sp, #32]
 800680c:	eeb0 8a47 	vmov.f32	s16, s14
 8006810:	eef0 8a67 	vmov.f32	s17, s15
 8006814:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006818:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800681c:	2900      	cmp	r1, #0
 800681e:	d045      	beq.n	80068ac <_dtoa_r+0x5b4>
 8006820:	494c      	ldr	r1, [pc, #304]	; (8006954 <_dtoa_r+0x65c>)
 8006822:	2000      	movs	r0, #0
 8006824:	f7fa f812 	bl	800084c <__aeabi_ddiv>
 8006828:	ec53 2b18 	vmov	r2, r3, d8
 800682c:	f7f9 fd2c 	bl	8000288 <__aeabi_dsub>
 8006830:	9d00      	ldr	r5, [sp, #0]
 8006832:	ec41 0b18 	vmov	d8, r0, r1
 8006836:	4639      	mov	r1, r7
 8006838:	4630      	mov	r0, r6
 800683a:	f7fa f98d 	bl	8000b58 <__aeabi_d2iz>
 800683e:	900c      	str	r0, [sp, #48]	; 0x30
 8006840:	f7f9 fe70 	bl	8000524 <__aeabi_i2d>
 8006844:	4602      	mov	r2, r0
 8006846:	460b      	mov	r3, r1
 8006848:	4630      	mov	r0, r6
 800684a:	4639      	mov	r1, r7
 800684c:	f7f9 fd1c 	bl	8000288 <__aeabi_dsub>
 8006850:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006852:	3330      	adds	r3, #48	; 0x30
 8006854:	f805 3b01 	strb.w	r3, [r5], #1
 8006858:	ec53 2b18 	vmov	r2, r3, d8
 800685c:	4606      	mov	r6, r0
 800685e:	460f      	mov	r7, r1
 8006860:	f7fa f93c 	bl	8000adc <__aeabi_dcmplt>
 8006864:	2800      	cmp	r0, #0
 8006866:	d165      	bne.n	8006934 <_dtoa_r+0x63c>
 8006868:	4632      	mov	r2, r6
 800686a:	463b      	mov	r3, r7
 800686c:	4935      	ldr	r1, [pc, #212]	; (8006944 <_dtoa_r+0x64c>)
 800686e:	2000      	movs	r0, #0
 8006870:	f7f9 fd0a 	bl	8000288 <__aeabi_dsub>
 8006874:	ec53 2b18 	vmov	r2, r3, d8
 8006878:	f7fa f930 	bl	8000adc <__aeabi_dcmplt>
 800687c:	2800      	cmp	r0, #0
 800687e:	f040 80b9 	bne.w	80069f4 <_dtoa_r+0x6fc>
 8006882:	9b02      	ldr	r3, [sp, #8]
 8006884:	429d      	cmp	r5, r3
 8006886:	f43f af75 	beq.w	8006774 <_dtoa_r+0x47c>
 800688a:	4b2f      	ldr	r3, [pc, #188]	; (8006948 <_dtoa_r+0x650>)
 800688c:	ec51 0b18 	vmov	r0, r1, d8
 8006890:	2200      	movs	r2, #0
 8006892:	f7f9 feb1 	bl	80005f8 <__aeabi_dmul>
 8006896:	4b2c      	ldr	r3, [pc, #176]	; (8006948 <_dtoa_r+0x650>)
 8006898:	ec41 0b18 	vmov	d8, r0, r1
 800689c:	2200      	movs	r2, #0
 800689e:	4630      	mov	r0, r6
 80068a0:	4639      	mov	r1, r7
 80068a2:	f7f9 fea9 	bl	80005f8 <__aeabi_dmul>
 80068a6:	4606      	mov	r6, r0
 80068a8:	460f      	mov	r7, r1
 80068aa:	e7c4      	b.n	8006836 <_dtoa_r+0x53e>
 80068ac:	ec51 0b17 	vmov	r0, r1, d7
 80068b0:	f7f9 fea2 	bl	80005f8 <__aeabi_dmul>
 80068b4:	9b02      	ldr	r3, [sp, #8]
 80068b6:	9d00      	ldr	r5, [sp, #0]
 80068b8:	930c      	str	r3, [sp, #48]	; 0x30
 80068ba:	ec41 0b18 	vmov	d8, r0, r1
 80068be:	4639      	mov	r1, r7
 80068c0:	4630      	mov	r0, r6
 80068c2:	f7fa f949 	bl	8000b58 <__aeabi_d2iz>
 80068c6:	9011      	str	r0, [sp, #68]	; 0x44
 80068c8:	f7f9 fe2c 	bl	8000524 <__aeabi_i2d>
 80068cc:	4602      	mov	r2, r0
 80068ce:	460b      	mov	r3, r1
 80068d0:	4630      	mov	r0, r6
 80068d2:	4639      	mov	r1, r7
 80068d4:	f7f9 fcd8 	bl	8000288 <__aeabi_dsub>
 80068d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068da:	3330      	adds	r3, #48	; 0x30
 80068dc:	f805 3b01 	strb.w	r3, [r5], #1
 80068e0:	9b02      	ldr	r3, [sp, #8]
 80068e2:	429d      	cmp	r5, r3
 80068e4:	4606      	mov	r6, r0
 80068e6:	460f      	mov	r7, r1
 80068e8:	f04f 0200 	mov.w	r2, #0
 80068ec:	d134      	bne.n	8006958 <_dtoa_r+0x660>
 80068ee:	4b19      	ldr	r3, [pc, #100]	; (8006954 <_dtoa_r+0x65c>)
 80068f0:	ec51 0b18 	vmov	r0, r1, d8
 80068f4:	f7f9 fcca 	bl	800028c <__adddf3>
 80068f8:	4602      	mov	r2, r0
 80068fa:	460b      	mov	r3, r1
 80068fc:	4630      	mov	r0, r6
 80068fe:	4639      	mov	r1, r7
 8006900:	f7fa f90a 	bl	8000b18 <__aeabi_dcmpgt>
 8006904:	2800      	cmp	r0, #0
 8006906:	d175      	bne.n	80069f4 <_dtoa_r+0x6fc>
 8006908:	ec53 2b18 	vmov	r2, r3, d8
 800690c:	4911      	ldr	r1, [pc, #68]	; (8006954 <_dtoa_r+0x65c>)
 800690e:	2000      	movs	r0, #0
 8006910:	f7f9 fcba 	bl	8000288 <__aeabi_dsub>
 8006914:	4602      	mov	r2, r0
 8006916:	460b      	mov	r3, r1
 8006918:	4630      	mov	r0, r6
 800691a:	4639      	mov	r1, r7
 800691c:	f7fa f8de 	bl	8000adc <__aeabi_dcmplt>
 8006920:	2800      	cmp	r0, #0
 8006922:	f43f af27 	beq.w	8006774 <_dtoa_r+0x47c>
 8006926:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006928:	1e6b      	subs	r3, r5, #1
 800692a:	930c      	str	r3, [sp, #48]	; 0x30
 800692c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006930:	2b30      	cmp	r3, #48	; 0x30
 8006932:	d0f8      	beq.n	8006926 <_dtoa_r+0x62e>
 8006934:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006938:	e04a      	b.n	80069d0 <_dtoa_r+0x6d8>
 800693a:	bf00      	nop
 800693c:	08008790 	.word	0x08008790
 8006940:	08008768 	.word	0x08008768
 8006944:	3ff00000 	.word	0x3ff00000
 8006948:	40240000 	.word	0x40240000
 800694c:	401c0000 	.word	0x401c0000
 8006950:	40140000 	.word	0x40140000
 8006954:	3fe00000 	.word	0x3fe00000
 8006958:	4baf      	ldr	r3, [pc, #700]	; (8006c18 <_dtoa_r+0x920>)
 800695a:	f7f9 fe4d 	bl	80005f8 <__aeabi_dmul>
 800695e:	4606      	mov	r6, r0
 8006960:	460f      	mov	r7, r1
 8006962:	e7ac      	b.n	80068be <_dtoa_r+0x5c6>
 8006964:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006968:	9d00      	ldr	r5, [sp, #0]
 800696a:	4642      	mov	r2, r8
 800696c:	464b      	mov	r3, r9
 800696e:	4630      	mov	r0, r6
 8006970:	4639      	mov	r1, r7
 8006972:	f7f9 ff6b 	bl	800084c <__aeabi_ddiv>
 8006976:	f7fa f8ef 	bl	8000b58 <__aeabi_d2iz>
 800697a:	9002      	str	r0, [sp, #8]
 800697c:	f7f9 fdd2 	bl	8000524 <__aeabi_i2d>
 8006980:	4642      	mov	r2, r8
 8006982:	464b      	mov	r3, r9
 8006984:	f7f9 fe38 	bl	80005f8 <__aeabi_dmul>
 8006988:	4602      	mov	r2, r0
 800698a:	460b      	mov	r3, r1
 800698c:	4630      	mov	r0, r6
 800698e:	4639      	mov	r1, r7
 8006990:	f7f9 fc7a 	bl	8000288 <__aeabi_dsub>
 8006994:	9e02      	ldr	r6, [sp, #8]
 8006996:	9f01      	ldr	r7, [sp, #4]
 8006998:	3630      	adds	r6, #48	; 0x30
 800699a:	f805 6b01 	strb.w	r6, [r5], #1
 800699e:	9e00      	ldr	r6, [sp, #0]
 80069a0:	1bae      	subs	r6, r5, r6
 80069a2:	42b7      	cmp	r7, r6
 80069a4:	4602      	mov	r2, r0
 80069a6:	460b      	mov	r3, r1
 80069a8:	d137      	bne.n	8006a1a <_dtoa_r+0x722>
 80069aa:	f7f9 fc6f 	bl	800028c <__adddf3>
 80069ae:	4642      	mov	r2, r8
 80069b0:	464b      	mov	r3, r9
 80069b2:	4606      	mov	r6, r0
 80069b4:	460f      	mov	r7, r1
 80069b6:	f7fa f8af 	bl	8000b18 <__aeabi_dcmpgt>
 80069ba:	b9c8      	cbnz	r0, 80069f0 <_dtoa_r+0x6f8>
 80069bc:	4642      	mov	r2, r8
 80069be:	464b      	mov	r3, r9
 80069c0:	4630      	mov	r0, r6
 80069c2:	4639      	mov	r1, r7
 80069c4:	f7fa f880 	bl	8000ac8 <__aeabi_dcmpeq>
 80069c8:	b110      	cbz	r0, 80069d0 <_dtoa_r+0x6d8>
 80069ca:	9b02      	ldr	r3, [sp, #8]
 80069cc:	07d9      	lsls	r1, r3, #31
 80069ce:	d40f      	bmi.n	80069f0 <_dtoa_r+0x6f8>
 80069d0:	4620      	mov	r0, r4
 80069d2:	4659      	mov	r1, fp
 80069d4:	f000 fad6 	bl	8006f84 <_Bfree>
 80069d8:	2300      	movs	r3, #0
 80069da:	702b      	strb	r3, [r5, #0]
 80069dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80069de:	f10a 0001 	add.w	r0, sl, #1
 80069e2:	6018      	str	r0, [r3, #0]
 80069e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	f43f acd8 	beq.w	800639c <_dtoa_r+0xa4>
 80069ec:	601d      	str	r5, [r3, #0]
 80069ee:	e4d5      	b.n	800639c <_dtoa_r+0xa4>
 80069f0:	f8cd a01c 	str.w	sl, [sp, #28]
 80069f4:	462b      	mov	r3, r5
 80069f6:	461d      	mov	r5, r3
 80069f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80069fc:	2a39      	cmp	r2, #57	; 0x39
 80069fe:	d108      	bne.n	8006a12 <_dtoa_r+0x71a>
 8006a00:	9a00      	ldr	r2, [sp, #0]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d1f7      	bne.n	80069f6 <_dtoa_r+0x6fe>
 8006a06:	9a07      	ldr	r2, [sp, #28]
 8006a08:	9900      	ldr	r1, [sp, #0]
 8006a0a:	3201      	adds	r2, #1
 8006a0c:	9207      	str	r2, [sp, #28]
 8006a0e:	2230      	movs	r2, #48	; 0x30
 8006a10:	700a      	strb	r2, [r1, #0]
 8006a12:	781a      	ldrb	r2, [r3, #0]
 8006a14:	3201      	adds	r2, #1
 8006a16:	701a      	strb	r2, [r3, #0]
 8006a18:	e78c      	b.n	8006934 <_dtoa_r+0x63c>
 8006a1a:	4b7f      	ldr	r3, [pc, #508]	; (8006c18 <_dtoa_r+0x920>)
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f7f9 fdeb 	bl	80005f8 <__aeabi_dmul>
 8006a22:	2200      	movs	r2, #0
 8006a24:	2300      	movs	r3, #0
 8006a26:	4606      	mov	r6, r0
 8006a28:	460f      	mov	r7, r1
 8006a2a:	f7fa f84d 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a2e:	2800      	cmp	r0, #0
 8006a30:	d09b      	beq.n	800696a <_dtoa_r+0x672>
 8006a32:	e7cd      	b.n	80069d0 <_dtoa_r+0x6d8>
 8006a34:	9a08      	ldr	r2, [sp, #32]
 8006a36:	2a00      	cmp	r2, #0
 8006a38:	f000 80c4 	beq.w	8006bc4 <_dtoa_r+0x8cc>
 8006a3c:	9a05      	ldr	r2, [sp, #20]
 8006a3e:	2a01      	cmp	r2, #1
 8006a40:	f300 80a8 	bgt.w	8006b94 <_dtoa_r+0x89c>
 8006a44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006a46:	2a00      	cmp	r2, #0
 8006a48:	f000 80a0 	beq.w	8006b8c <_dtoa_r+0x894>
 8006a4c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006a50:	9e06      	ldr	r6, [sp, #24]
 8006a52:	4645      	mov	r5, r8
 8006a54:	9a04      	ldr	r2, [sp, #16]
 8006a56:	2101      	movs	r1, #1
 8006a58:	441a      	add	r2, r3
 8006a5a:	4620      	mov	r0, r4
 8006a5c:	4498      	add	r8, r3
 8006a5e:	9204      	str	r2, [sp, #16]
 8006a60:	f000 fb4c 	bl	80070fc <__i2b>
 8006a64:	4607      	mov	r7, r0
 8006a66:	2d00      	cmp	r5, #0
 8006a68:	dd0b      	ble.n	8006a82 <_dtoa_r+0x78a>
 8006a6a:	9b04      	ldr	r3, [sp, #16]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	dd08      	ble.n	8006a82 <_dtoa_r+0x78a>
 8006a70:	42ab      	cmp	r3, r5
 8006a72:	9a04      	ldr	r2, [sp, #16]
 8006a74:	bfa8      	it	ge
 8006a76:	462b      	movge	r3, r5
 8006a78:	eba8 0803 	sub.w	r8, r8, r3
 8006a7c:	1aed      	subs	r5, r5, r3
 8006a7e:	1ad3      	subs	r3, r2, r3
 8006a80:	9304      	str	r3, [sp, #16]
 8006a82:	9b06      	ldr	r3, [sp, #24]
 8006a84:	b1fb      	cbz	r3, 8006ac6 <_dtoa_r+0x7ce>
 8006a86:	9b08      	ldr	r3, [sp, #32]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f000 809f 	beq.w	8006bcc <_dtoa_r+0x8d4>
 8006a8e:	2e00      	cmp	r6, #0
 8006a90:	dd11      	ble.n	8006ab6 <_dtoa_r+0x7be>
 8006a92:	4639      	mov	r1, r7
 8006a94:	4632      	mov	r2, r6
 8006a96:	4620      	mov	r0, r4
 8006a98:	f000 fbec 	bl	8007274 <__pow5mult>
 8006a9c:	465a      	mov	r2, fp
 8006a9e:	4601      	mov	r1, r0
 8006aa0:	4607      	mov	r7, r0
 8006aa2:	4620      	mov	r0, r4
 8006aa4:	f000 fb40 	bl	8007128 <__multiply>
 8006aa8:	4659      	mov	r1, fp
 8006aaa:	9007      	str	r0, [sp, #28]
 8006aac:	4620      	mov	r0, r4
 8006aae:	f000 fa69 	bl	8006f84 <_Bfree>
 8006ab2:	9b07      	ldr	r3, [sp, #28]
 8006ab4:	469b      	mov	fp, r3
 8006ab6:	9b06      	ldr	r3, [sp, #24]
 8006ab8:	1b9a      	subs	r2, r3, r6
 8006aba:	d004      	beq.n	8006ac6 <_dtoa_r+0x7ce>
 8006abc:	4659      	mov	r1, fp
 8006abe:	4620      	mov	r0, r4
 8006ac0:	f000 fbd8 	bl	8007274 <__pow5mult>
 8006ac4:	4683      	mov	fp, r0
 8006ac6:	2101      	movs	r1, #1
 8006ac8:	4620      	mov	r0, r4
 8006aca:	f000 fb17 	bl	80070fc <__i2b>
 8006ace:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	4606      	mov	r6, r0
 8006ad4:	dd7c      	ble.n	8006bd0 <_dtoa_r+0x8d8>
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	4601      	mov	r1, r0
 8006ada:	4620      	mov	r0, r4
 8006adc:	f000 fbca 	bl	8007274 <__pow5mult>
 8006ae0:	9b05      	ldr	r3, [sp, #20]
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	4606      	mov	r6, r0
 8006ae6:	dd76      	ble.n	8006bd6 <_dtoa_r+0x8de>
 8006ae8:	2300      	movs	r3, #0
 8006aea:	9306      	str	r3, [sp, #24]
 8006aec:	6933      	ldr	r3, [r6, #16]
 8006aee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006af2:	6918      	ldr	r0, [r3, #16]
 8006af4:	f000 fab2 	bl	800705c <__hi0bits>
 8006af8:	f1c0 0020 	rsb	r0, r0, #32
 8006afc:	9b04      	ldr	r3, [sp, #16]
 8006afe:	4418      	add	r0, r3
 8006b00:	f010 001f 	ands.w	r0, r0, #31
 8006b04:	f000 8086 	beq.w	8006c14 <_dtoa_r+0x91c>
 8006b08:	f1c0 0320 	rsb	r3, r0, #32
 8006b0c:	2b04      	cmp	r3, #4
 8006b0e:	dd7f      	ble.n	8006c10 <_dtoa_r+0x918>
 8006b10:	f1c0 001c 	rsb	r0, r0, #28
 8006b14:	9b04      	ldr	r3, [sp, #16]
 8006b16:	4403      	add	r3, r0
 8006b18:	4480      	add	r8, r0
 8006b1a:	4405      	add	r5, r0
 8006b1c:	9304      	str	r3, [sp, #16]
 8006b1e:	f1b8 0f00 	cmp.w	r8, #0
 8006b22:	dd05      	ble.n	8006b30 <_dtoa_r+0x838>
 8006b24:	4659      	mov	r1, fp
 8006b26:	4642      	mov	r2, r8
 8006b28:	4620      	mov	r0, r4
 8006b2a:	f000 fbfd 	bl	8007328 <__lshift>
 8006b2e:	4683      	mov	fp, r0
 8006b30:	9b04      	ldr	r3, [sp, #16]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	dd05      	ble.n	8006b42 <_dtoa_r+0x84a>
 8006b36:	4631      	mov	r1, r6
 8006b38:	461a      	mov	r2, r3
 8006b3a:	4620      	mov	r0, r4
 8006b3c:	f000 fbf4 	bl	8007328 <__lshift>
 8006b40:	4606      	mov	r6, r0
 8006b42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d069      	beq.n	8006c1c <_dtoa_r+0x924>
 8006b48:	4631      	mov	r1, r6
 8006b4a:	4658      	mov	r0, fp
 8006b4c:	f000 fc58 	bl	8007400 <__mcmp>
 8006b50:	2800      	cmp	r0, #0
 8006b52:	da63      	bge.n	8006c1c <_dtoa_r+0x924>
 8006b54:	2300      	movs	r3, #0
 8006b56:	4659      	mov	r1, fp
 8006b58:	220a      	movs	r2, #10
 8006b5a:	4620      	mov	r0, r4
 8006b5c:	f000 fa34 	bl	8006fc8 <__multadd>
 8006b60:	9b08      	ldr	r3, [sp, #32]
 8006b62:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006b66:	4683      	mov	fp, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	f000 818f 	beq.w	8006e8c <_dtoa_r+0xb94>
 8006b6e:	4639      	mov	r1, r7
 8006b70:	2300      	movs	r3, #0
 8006b72:	220a      	movs	r2, #10
 8006b74:	4620      	mov	r0, r4
 8006b76:	f000 fa27 	bl	8006fc8 <__multadd>
 8006b7a:	f1b9 0f00 	cmp.w	r9, #0
 8006b7e:	4607      	mov	r7, r0
 8006b80:	f300 808e 	bgt.w	8006ca0 <_dtoa_r+0x9a8>
 8006b84:	9b05      	ldr	r3, [sp, #20]
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	dc50      	bgt.n	8006c2c <_dtoa_r+0x934>
 8006b8a:	e089      	b.n	8006ca0 <_dtoa_r+0x9a8>
 8006b8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006b92:	e75d      	b.n	8006a50 <_dtoa_r+0x758>
 8006b94:	9b01      	ldr	r3, [sp, #4]
 8006b96:	1e5e      	subs	r6, r3, #1
 8006b98:	9b06      	ldr	r3, [sp, #24]
 8006b9a:	42b3      	cmp	r3, r6
 8006b9c:	bfbf      	itttt	lt
 8006b9e:	9b06      	ldrlt	r3, [sp, #24]
 8006ba0:	9606      	strlt	r6, [sp, #24]
 8006ba2:	1af2      	sublt	r2, r6, r3
 8006ba4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006ba6:	bfb6      	itet	lt
 8006ba8:	189b      	addlt	r3, r3, r2
 8006baa:	1b9e      	subge	r6, r3, r6
 8006bac:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006bae:	9b01      	ldr	r3, [sp, #4]
 8006bb0:	bfb8      	it	lt
 8006bb2:	2600      	movlt	r6, #0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	bfb5      	itete	lt
 8006bb8:	eba8 0503 	sublt.w	r5, r8, r3
 8006bbc:	9b01      	ldrge	r3, [sp, #4]
 8006bbe:	2300      	movlt	r3, #0
 8006bc0:	4645      	movge	r5, r8
 8006bc2:	e747      	b.n	8006a54 <_dtoa_r+0x75c>
 8006bc4:	9e06      	ldr	r6, [sp, #24]
 8006bc6:	9f08      	ldr	r7, [sp, #32]
 8006bc8:	4645      	mov	r5, r8
 8006bca:	e74c      	b.n	8006a66 <_dtoa_r+0x76e>
 8006bcc:	9a06      	ldr	r2, [sp, #24]
 8006bce:	e775      	b.n	8006abc <_dtoa_r+0x7c4>
 8006bd0:	9b05      	ldr	r3, [sp, #20]
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	dc18      	bgt.n	8006c08 <_dtoa_r+0x910>
 8006bd6:	9b02      	ldr	r3, [sp, #8]
 8006bd8:	b9b3      	cbnz	r3, 8006c08 <_dtoa_r+0x910>
 8006bda:	9b03      	ldr	r3, [sp, #12]
 8006bdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006be0:	b9a3      	cbnz	r3, 8006c0c <_dtoa_r+0x914>
 8006be2:	9b03      	ldr	r3, [sp, #12]
 8006be4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006be8:	0d1b      	lsrs	r3, r3, #20
 8006bea:	051b      	lsls	r3, r3, #20
 8006bec:	b12b      	cbz	r3, 8006bfa <_dtoa_r+0x902>
 8006bee:	9b04      	ldr	r3, [sp, #16]
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	9304      	str	r3, [sp, #16]
 8006bf4:	f108 0801 	add.w	r8, r8, #1
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	9306      	str	r3, [sp, #24]
 8006bfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	f47f af74 	bne.w	8006aec <_dtoa_r+0x7f4>
 8006c04:	2001      	movs	r0, #1
 8006c06:	e779      	b.n	8006afc <_dtoa_r+0x804>
 8006c08:	2300      	movs	r3, #0
 8006c0a:	e7f6      	b.n	8006bfa <_dtoa_r+0x902>
 8006c0c:	9b02      	ldr	r3, [sp, #8]
 8006c0e:	e7f4      	b.n	8006bfa <_dtoa_r+0x902>
 8006c10:	d085      	beq.n	8006b1e <_dtoa_r+0x826>
 8006c12:	4618      	mov	r0, r3
 8006c14:	301c      	adds	r0, #28
 8006c16:	e77d      	b.n	8006b14 <_dtoa_r+0x81c>
 8006c18:	40240000 	.word	0x40240000
 8006c1c:	9b01      	ldr	r3, [sp, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	dc38      	bgt.n	8006c94 <_dtoa_r+0x99c>
 8006c22:	9b05      	ldr	r3, [sp, #20]
 8006c24:	2b02      	cmp	r3, #2
 8006c26:	dd35      	ble.n	8006c94 <_dtoa_r+0x99c>
 8006c28:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006c2c:	f1b9 0f00 	cmp.w	r9, #0
 8006c30:	d10d      	bne.n	8006c4e <_dtoa_r+0x956>
 8006c32:	4631      	mov	r1, r6
 8006c34:	464b      	mov	r3, r9
 8006c36:	2205      	movs	r2, #5
 8006c38:	4620      	mov	r0, r4
 8006c3a:	f000 f9c5 	bl	8006fc8 <__multadd>
 8006c3e:	4601      	mov	r1, r0
 8006c40:	4606      	mov	r6, r0
 8006c42:	4658      	mov	r0, fp
 8006c44:	f000 fbdc 	bl	8007400 <__mcmp>
 8006c48:	2800      	cmp	r0, #0
 8006c4a:	f73f adbd 	bgt.w	80067c8 <_dtoa_r+0x4d0>
 8006c4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c50:	9d00      	ldr	r5, [sp, #0]
 8006c52:	ea6f 0a03 	mvn.w	sl, r3
 8006c56:	f04f 0800 	mov.w	r8, #0
 8006c5a:	4631      	mov	r1, r6
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	f000 f991 	bl	8006f84 <_Bfree>
 8006c62:	2f00      	cmp	r7, #0
 8006c64:	f43f aeb4 	beq.w	80069d0 <_dtoa_r+0x6d8>
 8006c68:	f1b8 0f00 	cmp.w	r8, #0
 8006c6c:	d005      	beq.n	8006c7a <_dtoa_r+0x982>
 8006c6e:	45b8      	cmp	r8, r7
 8006c70:	d003      	beq.n	8006c7a <_dtoa_r+0x982>
 8006c72:	4641      	mov	r1, r8
 8006c74:	4620      	mov	r0, r4
 8006c76:	f000 f985 	bl	8006f84 <_Bfree>
 8006c7a:	4639      	mov	r1, r7
 8006c7c:	4620      	mov	r0, r4
 8006c7e:	f000 f981 	bl	8006f84 <_Bfree>
 8006c82:	e6a5      	b.n	80069d0 <_dtoa_r+0x6d8>
 8006c84:	2600      	movs	r6, #0
 8006c86:	4637      	mov	r7, r6
 8006c88:	e7e1      	b.n	8006c4e <_dtoa_r+0x956>
 8006c8a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006c8c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006c90:	4637      	mov	r7, r6
 8006c92:	e599      	b.n	80067c8 <_dtoa_r+0x4d0>
 8006c94:	9b08      	ldr	r3, [sp, #32]
 8006c96:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	f000 80fd 	beq.w	8006e9a <_dtoa_r+0xba2>
 8006ca0:	2d00      	cmp	r5, #0
 8006ca2:	dd05      	ble.n	8006cb0 <_dtoa_r+0x9b8>
 8006ca4:	4639      	mov	r1, r7
 8006ca6:	462a      	mov	r2, r5
 8006ca8:	4620      	mov	r0, r4
 8006caa:	f000 fb3d 	bl	8007328 <__lshift>
 8006cae:	4607      	mov	r7, r0
 8006cb0:	9b06      	ldr	r3, [sp, #24]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d05c      	beq.n	8006d70 <_dtoa_r+0xa78>
 8006cb6:	6879      	ldr	r1, [r7, #4]
 8006cb8:	4620      	mov	r0, r4
 8006cba:	f000 f923 	bl	8006f04 <_Balloc>
 8006cbe:	4605      	mov	r5, r0
 8006cc0:	b928      	cbnz	r0, 8006cce <_dtoa_r+0x9d6>
 8006cc2:	4b80      	ldr	r3, [pc, #512]	; (8006ec4 <_dtoa_r+0xbcc>)
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006cca:	f7ff bb2e 	b.w	800632a <_dtoa_r+0x32>
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	3202      	adds	r2, #2
 8006cd2:	0092      	lsls	r2, r2, #2
 8006cd4:	f107 010c 	add.w	r1, r7, #12
 8006cd8:	300c      	adds	r0, #12
 8006cda:	f000 f905 	bl	8006ee8 <memcpy>
 8006cde:	2201      	movs	r2, #1
 8006ce0:	4629      	mov	r1, r5
 8006ce2:	4620      	mov	r0, r4
 8006ce4:	f000 fb20 	bl	8007328 <__lshift>
 8006ce8:	9b00      	ldr	r3, [sp, #0]
 8006cea:	3301      	adds	r3, #1
 8006cec:	9301      	str	r3, [sp, #4]
 8006cee:	9b00      	ldr	r3, [sp, #0]
 8006cf0:	444b      	add	r3, r9
 8006cf2:	9307      	str	r3, [sp, #28]
 8006cf4:	9b02      	ldr	r3, [sp, #8]
 8006cf6:	f003 0301 	and.w	r3, r3, #1
 8006cfa:	46b8      	mov	r8, r7
 8006cfc:	9306      	str	r3, [sp, #24]
 8006cfe:	4607      	mov	r7, r0
 8006d00:	9b01      	ldr	r3, [sp, #4]
 8006d02:	4631      	mov	r1, r6
 8006d04:	3b01      	subs	r3, #1
 8006d06:	4658      	mov	r0, fp
 8006d08:	9302      	str	r3, [sp, #8]
 8006d0a:	f7ff fa69 	bl	80061e0 <quorem>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	3330      	adds	r3, #48	; 0x30
 8006d12:	9004      	str	r0, [sp, #16]
 8006d14:	4641      	mov	r1, r8
 8006d16:	4658      	mov	r0, fp
 8006d18:	9308      	str	r3, [sp, #32]
 8006d1a:	f000 fb71 	bl	8007400 <__mcmp>
 8006d1e:	463a      	mov	r2, r7
 8006d20:	4681      	mov	r9, r0
 8006d22:	4631      	mov	r1, r6
 8006d24:	4620      	mov	r0, r4
 8006d26:	f000 fb87 	bl	8007438 <__mdiff>
 8006d2a:	68c2      	ldr	r2, [r0, #12]
 8006d2c:	9b08      	ldr	r3, [sp, #32]
 8006d2e:	4605      	mov	r5, r0
 8006d30:	bb02      	cbnz	r2, 8006d74 <_dtoa_r+0xa7c>
 8006d32:	4601      	mov	r1, r0
 8006d34:	4658      	mov	r0, fp
 8006d36:	f000 fb63 	bl	8007400 <__mcmp>
 8006d3a:	9b08      	ldr	r3, [sp, #32]
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	4629      	mov	r1, r5
 8006d40:	4620      	mov	r0, r4
 8006d42:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006d46:	f000 f91d 	bl	8006f84 <_Bfree>
 8006d4a:	9b05      	ldr	r3, [sp, #20]
 8006d4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d4e:	9d01      	ldr	r5, [sp, #4]
 8006d50:	ea43 0102 	orr.w	r1, r3, r2
 8006d54:	9b06      	ldr	r3, [sp, #24]
 8006d56:	430b      	orrs	r3, r1
 8006d58:	9b08      	ldr	r3, [sp, #32]
 8006d5a:	d10d      	bne.n	8006d78 <_dtoa_r+0xa80>
 8006d5c:	2b39      	cmp	r3, #57	; 0x39
 8006d5e:	d029      	beq.n	8006db4 <_dtoa_r+0xabc>
 8006d60:	f1b9 0f00 	cmp.w	r9, #0
 8006d64:	dd01      	ble.n	8006d6a <_dtoa_r+0xa72>
 8006d66:	9b04      	ldr	r3, [sp, #16]
 8006d68:	3331      	adds	r3, #49	; 0x31
 8006d6a:	9a02      	ldr	r2, [sp, #8]
 8006d6c:	7013      	strb	r3, [r2, #0]
 8006d6e:	e774      	b.n	8006c5a <_dtoa_r+0x962>
 8006d70:	4638      	mov	r0, r7
 8006d72:	e7b9      	b.n	8006ce8 <_dtoa_r+0x9f0>
 8006d74:	2201      	movs	r2, #1
 8006d76:	e7e2      	b.n	8006d3e <_dtoa_r+0xa46>
 8006d78:	f1b9 0f00 	cmp.w	r9, #0
 8006d7c:	db06      	blt.n	8006d8c <_dtoa_r+0xa94>
 8006d7e:	9905      	ldr	r1, [sp, #20]
 8006d80:	ea41 0909 	orr.w	r9, r1, r9
 8006d84:	9906      	ldr	r1, [sp, #24]
 8006d86:	ea59 0101 	orrs.w	r1, r9, r1
 8006d8a:	d120      	bne.n	8006dce <_dtoa_r+0xad6>
 8006d8c:	2a00      	cmp	r2, #0
 8006d8e:	ddec      	ble.n	8006d6a <_dtoa_r+0xa72>
 8006d90:	4659      	mov	r1, fp
 8006d92:	2201      	movs	r2, #1
 8006d94:	4620      	mov	r0, r4
 8006d96:	9301      	str	r3, [sp, #4]
 8006d98:	f000 fac6 	bl	8007328 <__lshift>
 8006d9c:	4631      	mov	r1, r6
 8006d9e:	4683      	mov	fp, r0
 8006da0:	f000 fb2e 	bl	8007400 <__mcmp>
 8006da4:	2800      	cmp	r0, #0
 8006da6:	9b01      	ldr	r3, [sp, #4]
 8006da8:	dc02      	bgt.n	8006db0 <_dtoa_r+0xab8>
 8006daa:	d1de      	bne.n	8006d6a <_dtoa_r+0xa72>
 8006dac:	07da      	lsls	r2, r3, #31
 8006dae:	d5dc      	bpl.n	8006d6a <_dtoa_r+0xa72>
 8006db0:	2b39      	cmp	r3, #57	; 0x39
 8006db2:	d1d8      	bne.n	8006d66 <_dtoa_r+0xa6e>
 8006db4:	9a02      	ldr	r2, [sp, #8]
 8006db6:	2339      	movs	r3, #57	; 0x39
 8006db8:	7013      	strb	r3, [r2, #0]
 8006dba:	462b      	mov	r3, r5
 8006dbc:	461d      	mov	r5, r3
 8006dbe:	3b01      	subs	r3, #1
 8006dc0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006dc4:	2a39      	cmp	r2, #57	; 0x39
 8006dc6:	d050      	beq.n	8006e6a <_dtoa_r+0xb72>
 8006dc8:	3201      	adds	r2, #1
 8006dca:	701a      	strb	r2, [r3, #0]
 8006dcc:	e745      	b.n	8006c5a <_dtoa_r+0x962>
 8006dce:	2a00      	cmp	r2, #0
 8006dd0:	dd03      	ble.n	8006dda <_dtoa_r+0xae2>
 8006dd2:	2b39      	cmp	r3, #57	; 0x39
 8006dd4:	d0ee      	beq.n	8006db4 <_dtoa_r+0xabc>
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	e7c7      	b.n	8006d6a <_dtoa_r+0xa72>
 8006dda:	9a01      	ldr	r2, [sp, #4]
 8006ddc:	9907      	ldr	r1, [sp, #28]
 8006dde:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006de2:	428a      	cmp	r2, r1
 8006de4:	d02a      	beq.n	8006e3c <_dtoa_r+0xb44>
 8006de6:	4659      	mov	r1, fp
 8006de8:	2300      	movs	r3, #0
 8006dea:	220a      	movs	r2, #10
 8006dec:	4620      	mov	r0, r4
 8006dee:	f000 f8eb 	bl	8006fc8 <__multadd>
 8006df2:	45b8      	cmp	r8, r7
 8006df4:	4683      	mov	fp, r0
 8006df6:	f04f 0300 	mov.w	r3, #0
 8006dfa:	f04f 020a 	mov.w	r2, #10
 8006dfe:	4641      	mov	r1, r8
 8006e00:	4620      	mov	r0, r4
 8006e02:	d107      	bne.n	8006e14 <_dtoa_r+0xb1c>
 8006e04:	f000 f8e0 	bl	8006fc8 <__multadd>
 8006e08:	4680      	mov	r8, r0
 8006e0a:	4607      	mov	r7, r0
 8006e0c:	9b01      	ldr	r3, [sp, #4]
 8006e0e:	3301      	adds	r3, #1
 8006e10:	9301      	str	r3, [sp, #4]
 8006e12:	e775      	b.n	8006d00 <_dtoa_r+0xa08>
 8006e14:	f000 f8d8 	bl	8006fc8 <__multadd>
 8006e18:	4639      	mov	r1, r7
 8006e1a:	4680      	mov	r8, r0
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	220a      	movs	r2, #10
 8006e20:	4620      	mov	r0, r4
 8006e22:	f000 f8d1 	bl	8006fc8 <__multadd>
 8006e26:	4607      	mov	r7, r0
 8006e28:	e7f0      	b.n	8006e0c <_dtoa_r+0xb14>
 8006e2a:	f1b9 0f00 	cmp.w	r9, #0
 8006e2e:	9a00      	ldr	r2, [sp, #0]
 8006e30:	bfcc      	ite	gt
 8006e32:	464d      	movgt	r5, r9
 8006e34:	2501      	movle	r5, #1
 8006e36:	4415      	add	r5, r2
 8006e38:	f04f 0800 	mov.w	r8, #0
 8006e3c:	4659      	mov	r1, fp
 8006e3e:	2201      	movs	r2, #1
 8006e40:	4620      	mov	r0, r4
 8006e42:	9301      	str	r3, [sp, #4]
 8006e44:	f000 fa70 	bl	8007328 <__lshift>
 8006e48:	4631      	mov	r1, r6
 8006e4a:	4683      	mov	fp, r0
 8006e4c:	f000 fad8 	bl	8007400 <__mcmp>
 8006e50:	2800      	cmp	r0, #0
 8006e52:	dcb2      	bgt.n	8006dba <_dtoa_r+0xac2>
 8006e54:	d102      	bne.n	8006e5c <_dtoa_r+0xb64>
 8006e56:	9b01      	ldr	r3, [sp, #4]
 8006e58:	07db      	lsls	r3, r3, #31
 8006e5a:	d4ae      	bmi.n	8006dba <_dtoa_r+0xac2>
 8006e5c:	462b      	mov	r3, r5
 8006e5e:	461d      	mov	r5, r3
 8006e60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e64:	2a30      	cmp	r2, #48	; 0x30
 8006e66:	d0fa      	beq.n	8006e5e <_dtoa_r+0xb66>
 8006e68:	e6f7      	b.n	8006c5a <_dtoa_r+0x962>
 8006e6a:	9a00      	ldr	r2, [sp, #0]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d1a5      	bne.n	8006dbc <_dtoa_r+0xac4>
 8006e70:	f10a 0a01 	add.w	sl, sl, #1
 8006e74:	2331      	movs	r3, #49	; 0x31
 8006e76:	e779      	b.n	8006d6c <_dtoa_r+0xa74>
 8006e78:	4b13      	ldr	r3, [pc, #76]	; (8006ec8 <_dtoa_r+0xbd0>)
 8006e7a:	f7ff baaf 	b.w	80063dc <_dtoa_r+0xe4>
 8006e7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	f47f aa86 	bne.w	8006392 <_dtoa_r+0x9a>
 8006e86:	4b11      	ldr	r3, [pc, #68]	; (8006ecc <_dtoa_r+0xbd4>)
 8006e88:	f7ff baa8 	b.w	80063dc <_dtoa_r+0xe4>
 8006e8c:	f1b9 0f00 	cmp.w	r9, #0
 8006e90:	dc03      	bgt.n	8006e9a <_dtoa_r+0xba2>
 8006e92:	9b05      	ldr	r3, [sp, #20]
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	f73f aec9 	bgt.w	8006c2c <_dtoa_r+0x934>
 8006e9a:	9d00      	ldr	r5, [sp, #0]
 8006e9c:	4631      	mov	r1, r6
 8006e9e:	4658      	mov	r0, fp
 8006ea0:	f7ff f99e 	bl	80061e0 <quorem>
 8006ea4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006ea8:	f805 3b01 	strb.w	r3, [r5], #1
 8006eac:	9a00      	ldr	r2, [sp, #0]
 8006eae:	1aaa      	subs	r2, r5, r2
 8006eb0:	4591      	cmp	r9, r2
 8006eb2:	ddba      	ble.n	8006e2a <_dtoa_r+0xb32>
 8006eb4:	4659      	mov	r1, fp
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	220a      	movs	r2, #10
 8006eba:	4620      	mov	r0, r4
 8006ebc:	f000 f884 	bl	8006fc8 <__multadd>
 8006ec0:	4683      	mov	fp, r0
 8006ec2:	e7eb      	b.n	8006e9c <_dtoa_r+0xba4>
 8006ec4:	080086f3 	.word	0x080086f3
 8006ec8:	0800864c 	.word	0x0800864c
 8006ecc:	08008670 	.word	0x08008670

08006ed0 <_localeconv_r>:
 8006ed0:	4800      	ldr	r0, [pc, #0]	; (8006ed4 <_localeconv_r+0x4>)
 8006ed2:	4770      	bx	lr
 8006ed4:	20000160 	.word	0x20000160

08006ed8 <malloc>:
 8006ed8:	4b02      	ldr	r3, [pc, #8]	; (8006ee4 <malloc+0xc>)
 8006eda:	4601      	mov	r1, r0
 8006edc:	6818      	ldr	r0, [r3, #0]
 8006ede:	f000 bbef 	b.w	80076c0 <_malloc_r>
 8006ee2:	bf00      	nop
 8006ee4:	2000000c 	.word	0x2000000c

08006ee8 <memcpy>:
 8006ee8:	440a      	add	r2, r1
 8006eea:	4291      	cmp	r1, r2
 8006eec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006ef0:	d100      	bne.n	8006ef4 <memcpy+0xc>
 8006ef2:	4770      	bx	lr
 8006ef4:	b510      	push	{r4, lr}
 8006ef6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006efa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006efe:	4291      	cmp	r1, r2
 8006f00:	d1f9      	bne.n	8006ef6 <memcpy+0xe>
 8006f02:	bd10      	pop	{r4, pc}

08006f04 <_Balloc>:
 8006f04:	b570      	push	{r4, r5, r6, lr}
 8006f06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006f08:	4604      	mov	r4, r0
 8006f0a:	460d      	mov	r5, r1
 8006f0c:	b976      	cbnz	r6, 8006f2c <_Balloc+0x28>
 8006f0e:	2010      	movs	r0, #16
 8006f10:	f7ff ffe2 	bl	8006ed8 <malloc>
 8006f14:	4602      	mov	r2, r0
 8006f16:	6260      	str	r0, [r4, #36]	; 0x24
 8006f18:	b920      	cbnz	r0, 8006f24 <_Balloc+0x20>
 8006f1a:	4b18      	ldr	r3, [pc, #96]	; (8006f7c <_Balloc+0x78>)
 8006f1c:	4818      	ldr	r0, [pc, #96]	; (8006f80 <_Balloc+0x7c>)
 8006f1e:	2166      	movs	r1, #102	; 0x66
 8006f20:	f000 fd94 	bl	8007a4c <__assert_func>
 8006f24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f28:	6006      	str	r6, [r0, #0]
 8006f2a:	60c6      	str	r6, [r0, #12]
 8006f2c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006f2e:	68f3      	ldr	r3, [r6, #12]
 8006f30:	b183      	cbz	r3, 8006f54 <_Balloc+0x50>
 8006f32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006f3a:	b9b8      	cbnz	r0, 8006f6c <_Balloc+0x68>
 8006f3c:	2101      	movs	r1, #1
 8006f3e:	fa01 f605 	lsl.w	r6, r1, r5
 8006f42:	1d72      	adds	r2, r6, #5
 8006f44:	0092      	lsls	r2, r2, #2
 8006f46:	4620      	mov	r0, r4
 8006f48:	f000 fb5a 	bl	8007600 <_calloc_r>
 8006f4c:	b160      	cbz	r0, 8006f68 <_Balloc+0x64>
 8006f4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006f52:	e00e      	b.n	8006f72 <_Balloc+0x6e>
 8006f54:	2221      	movs	r2, #33	; 0x21
 8006f56:	2104      	movs	r1, #4
 8006f58:	4620      	mov	r0, r4
 8006f5a:	f000 fb51 	bl	8007600 <_calloc_r>
 8006f5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f60:	60f0      	str	r0, [r6, #12]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d1e4      	bne.n	8006f32 <_Balloc+0x2e>
 8006f68:	2000      	movs	r0, #0
 8006f6a:	bd70      	pop	{r4, r5, r6, pc}
 8006f6c:	6802      	ldr	r2, [r0, #0]
 8006f6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006f72:	2300      	movs	r3, #0
 8006f74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006f78:	e7f7      	b.n	8006f6a <_Balloc+0x66>
 8006f7a:	bf00      	nop
 8006f7c:	0800867d 	.word	0x0800867d
 8006f80:	08008704 	.word	0x08008704

08006f84 <_Bfree>:
 8006f84:	b570      	push	{r4, r5, r6, lr}
 8006f86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006f88:	4605      	mov	r5, r0
 8006f8a:	460c      	mov	r4, r1
 8006f8c:	b976      	cbnz	r6, 8006fac <_Bfree+0x28>
 8006f8e:	2010      	movs	r0, #16
 8006f90:	f7ff ffa2 	bl	8006ed8 <malloc>
 8006f94:	4602      	mov	r2, r0
 8006f96:	6268      	str	r0, [r5, #36]	; 0x24
 8006f98:	b920      	cbnz	r0, 8006fa4 <_Bfree+0x20>
 8006f9a:	4b09      	ldr	r3, [pc, #36]	; (8006fc0 <_Bfree+0x3c>)
 8006f9c:	4809      	ldr	r0, [pc, #36]	; (8006fc4 <_Bfree+0x40>)
 8006f9e:	218a      	movs	r1, #138	; 0x8a
 8006fa0:	f000 fd54 	bl	8007a4c <__assert_func>
 8006fa4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006fa8:	6006      	str	r6, [r0, #0]
 8006faa:	60c6      	str	r6, [r0, #12]
 8006fac:	b13c      	cbz	r4, 8006fbe <_Bfree+0x3a>
 8006fae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006fb0:	6862      	ldr	r2, [r4, #4]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006fb8:	6021      	str	r1, [r4, #0]
 8006fba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006fbe:	bd70      	pop	{r4, r5, r6, pc}
 8006fc0:	0800867d 	.word	0x0800867d
 8006fc4:	08008704 	.word	0x08008704

08006fc8 <__multadd>:
 8006fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fcc:	690e      	ldr	r6, [r1, #16]
 8006fce:	4607      	mov	r7, r0
 8006fd0:	4698      	mov	r8, r3
 8006fd2:	460c      	mov	r4, r1
 8006fd4:	f101 0014 	add.w	r0, r1, #20
 8006fd8:	2300      	movs	r3, #0
 8006fda:	6805      	ldr	r5, [r0, #0]
 8006fdc:	b2a9      	uxth	r1, r5
 8006fde:	fb02 8101 	mla	r1, r2, r1, r8
 8006fe2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006fe6:	0c2d      	lsrs	r5, r5, #16
 8006fe8:	fb02 c505 	mla	r5, r2, r5, ip
 8006fec:	b289      	uxth	r1, r1
 8006fee:	3301      	adds	r3, #1
 8006ff0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006ff4:	429e      	cmp	r6, r3
 8006ff6:	f840 1b04 	str.w	r1, [r0], #4
 8006ffa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006ffe:	dcec      	bgt.n	8006fda <__multadd+0x12>
 8007000:	f1b8 0f00 	cmp.w	r8, #0
 8007004:	d022      	beq.n	800704c <__multadd+0x84>
 8007006:	68a3      	ldr	r3, [r4, #8]
 8007008:	42b3      	cmp	r3, r6
 800700a:	dc19      	bgt.n	8007040 <__multadd+0x78>
 800700c:	6861      	ldr	r1, [r4, #4]
 800700e:	4638      	mov	r0, r7
 8007010:	3101      	adds	r1, #1
 8007012:	f7ff ff77 	bl	8006f04 <_Balloc>
 8007016:	4605      	mov	r5, r0
 8007018:	b928      	cbnz	r0, 8007026 <__multadd+0x5e>
 800701a:	4602      	mov	r2, r0
 800701c:	4b0d      	ldr	r3, [pc, #52]	; (8007054 <__multadd+0x8c>)
 800701e:	480e      	ldr	r0, [pc, #56]	; (8007058 <__multadd+0x90>)
 8007020:	21b5      	movs	r1, #181	; 0xb5
 8007022:	f000 fd13 	bl	8007a4c <__assert_func>
 8007026:	6922      	ldr	r2, [r4, #16]
 8007028:	3202      	adds	r2, #2
 800702a:	f104 010c 	add.w	r1, r4, #12
 800702e:	0092      	lsls	r2, r2, #2
 8007030:	300c      	adds	r0, #12
 8007032:	f7ff ff59 	bl	8006ee8 <memcpy>
 8007036:	4621      	mov	r1, r4
 8007038:	4638      	mov	r0, r7
 800703a:	f7ff ffa3 	bl	8006f84 <_Bfree>
 800703e:	462c      	mov	r4, r5
 8007040:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007044:	3601      	adds	r6, #1
 8007046:	f8c3 8014 	str.w	r8, [r3, #20]
 800704a:	6126      	str	r6, [r4, #16]
 800704c:	4620      	mov	r0, r4
 800704e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007052:	bf00      	nop
 8007054:	080086f3 	.word	0x080086f3
 8007058:	08008704 	.word	0x08008704

0800705c <__hi0bits>:
 800705c:	0c03      	lsrs	r3, r0, #16
 800705e:	041b      	lsls	r3, r3, #16
 8007060:	b9d3      	cbnz	r3, 8007098 <__hi0bits+0x3c>
 8007062:	0400      	lsls	r0, r0, #16
 8007064:	2310      	movs	r3, #16
 8007066:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800706a:	bf04      	itt	eq
 800706c:	0200      	lsleq	r0, r0, #8
 800706e:	3308      	addeq	r3, #8
 8007070:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007074:	bf04      	itt	eq
 8007076:	0100      	lsleq	r0, r0, #4
 8007078:	3304      	addeq	r3, #4
 800707a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800707e:	bf04      	itt	eq
 8007080:	0080      	lsleq	r0, r0, #2
 8007082:	3302      	addeq	r3, #2
 8007084:	2800      	cmp	r0, #0
 8007086:	db05      	blt.n	8007094 <__hi0bits+0x38>
 8007088:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800708c:	f103 0301 	add.w	r3, r3, #1
 8007090:	bf08      	it	eq
 8007092:	2320      	moveq	r3, #32
 8007094:	4618      	mov	r0, r3
 8007096:	4770      	bx	lr
 8007098:	2300      	movs	r3, #0
 800709a:	e7e4      	b.n	8007066 <__hi0bits+0xa>

0800709c <__lo0bits>:
 800709c:	6803      	ldr	r3, [r0, #0]
 800709e:	f013 0207 	ands.w	r2, r3, #7
 80070a2:	4601      	mov	r1, r0
 80070a4:	d00b      	beq.n	80070be <__lo0bits+0x22>
 80070a6:	07da      	lsls	r2, r3, #31
 80070a8:	d424      	bmi.n	80070f4 <__lo0bits+0x58>
 80070aa:	0798      	lsls	r0, r3, #30
 80070ac:	bf49      	itett	mi
 80070ae:	085b      	lsrmi	r3, r3, #1
 80070b0:	089b      	lsrpl	r3, r3, #2
 80070b2:	2001      	movmi	r0, #1
 80070b4:	600b      	strmi	r3, [r1, #0]
 80070b6:	bf5c      	itt	pl
 80070b8:	600b      	strpl	r3, [r1, #0]
 80070ba:	2002      	movpl	r0, #2
 80070bc:	4770      	bx	lr
 80070be:	b298      	uxth	r0, r3
 80070c0:	b9b0      	cbnz	r0, 80070f0 <__lo0bits+0x54>
 80070c2:	0c1b      	lsrs	r3, r3, #16
 80070c4:	2010      	movs	r0, #16
 80070c6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80070ca:	bf04      	itt	eq
 80070cc:	0a1b      	lsreq	r3, r3, #8
 80070ce:	3008      	addeq	r0, #8
 80070d0:	071a      	lsls	r2, r3, #28
 80070d2:	bf04      	itt	eq
 80070d4:	091b      	lsreq	r3, r3, #4
 80070d6:	3004      	addeq	r0, #4
 80070d8:	079a      	lsls	r2, r3, #30
 80070da:	bf04      	itt	eq
 80070dc:	089b      	lsreq	r3, r3, #2
 80070de:	3002      	addeq	r0, #2
 80070e0:	07da      	lsls	r2, r3, #31
 80070e2:	d403      	bmi.n	80070ec <__lo0bits+0x50>
 80070e4:	085b      	lsrs	r3, r3, #1
 80070e6:	f100 0001 	add.w	r0, r0, #1
 80070ea:	d005      	beq.n	80070f8 <__lo0bits+0x5c>
 80070ec:	600b      	str	r3, [r1, #0]
 80070ee:	4770      	bx	lr
 80070f0:	4610      	mov	r0, r2
 80070f2:	e7e8      	b.n	80070c6 <__lo0bits+0x2a>
 80070f4:	2000      	movs	r0, #0
 80070f6:	4770      	bx	lr
 80070f8:	2020      	movs	r0, #32
 80070fa:	4770      	bx	lr

080070fc <__i2b>:
 80070fc:	b510      	push	{r4, lr}
 80070fe:	460c      	mov	r4, r1
 8007100:	2101      	movs	r1, #1
 8007102:	f7ff feff 	bl	8006f04 <_Balloc>
 8007106:	4602      	mov	r2, r0
 8007108:	b928      	cbnz	r0, 8007116 <__i2b+0x1a>
 800710a:	4b05      	ldr	r3, [pc, #20]	; (8007120 <__i2b+0x24>)
 800710c:	4805      	ldr	r0, [pc, #20]	; (8007124 <__i2b+0x28>)
 800710e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007112:	f000 fc9b 	bl	8007a4c <__assert_func>
 8007116:	2301      	movs	r3, #1
 8007118:	6144      	str	r4, [r0, #20]
 800711a:	6103      	str	r3, [r0, #16]
 800711c:	bd10      	pop	{r4, pc}
 800711e:	bf00      	nop
 8007120:	080086f3 	.word	0x080086f3
 8007124:	08008704 	.word	0x08008704

08007128 <__multiply>:
 8007128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800712c:	4614      	mov	r4, r2
 800712e:	690a      	ldr	r2, [r1, #16]
 8007130:	6923      	ldr	r3, [r4, #16]
 8007132:	429a      	cmp	r2, r3
 8007134:	bfb8      	it	lt
 8007136:	460b      	movlt	r3, r1
 8007138:	460d      	mov	r5, r1
 800713a:	bfbc      	itt	lt
 800713c:	4625      	movlt	r5, r4
 800713e:	461c      	movlt	r4, r3
 8007140:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007144:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007148:	68ab      	ldr	r3, [r5, #8]
 800714a:	6869      	ldr	r1, [r5, #4]
 800714c:	eb0a 0709 	add.w	r7, sl, r9
 8007150:	42bb      	cmp	r3, r7
 8007152:	b085      	sub	sp, #20
 8007154:	bfb8      	it	lt
 8007156:	3101      	addlt	r1, #1
 8007158:	f7ff fed4 	bl	8006f04 <_Balloc>
 800715c:	b930      	cbnz	r0, 800716c <__multiply+0x44>
 800715e:	4602      	mov	r2, r0
 8007160:	4b42      	ldr	r3, [pc, #264]	; (800726c <__multiply+0x144>)
 8007162:	4843      	ldr	r0, [pc, #268]	; (8007270 <__multiply+0x148>)
 8007164:	f240 115d 	movw	r1, #349	; 0x15d
 8007168:	f000 fc70 	bl	8007a4c <__assert_func>
 800716c:	f100 0614 	add.w	r6, r0, #20
 8007170:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007174:	4633      	mov	r3, r6
 8007176:	2200      	movs	r2, #0
 8007178:	4543      	cmp	r3, r8
 800717a:	d31e      	bcc.n	80071ba <__multiply+0x92>
 800717c:	f105 0c14 	add.w	ip, r5, #20
 8007180:	f104 0314 	add.w	r3, r4, #20
 8007184:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007188:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800718c:	9202      	str	r2, [sp, #8]
 800718e:	ebac 0205 	sub.w	r2, ip, r5
 8007192:	3a15      	subs	r2, #21
 8007194:	f022 0203 	bic.w	r2, r2, #3
 8007198:	3204      	adds	r2, #4
 800719a:	f105 0115 	add.w	r1, r5, #21
 800719e:	458c      	cmp	ip, r1
 80071a0:	bf38      	it	cc
 80071a2:	2204      	movcc	r2, #4
 80071a4:	9201      	str	r2, [sp, #4]
 80071a6:	9a02      	ldr	r2, [sp, #8]
 80071a8:	9303      	str	r3, [sp, #12]
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d808      	bhi.n	80071c0 <__multiply+0x98>
 80071ae:	2f00      	cmp	r7, #0
 80071b0:	dc55      	bgt.n	800725e <__multiply+0x136>
 80071b2:	6107      	str	r7, [r0, #16]
 80071b4:	b005      	add	sp, #20
 80071b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ba:	f843 2b04 	str.w	r2, [r3], #4
 80071be:	e7db      	b.n	8007178 <__multiply+0x50>
 80071c0:	f8b3 a000 	ldrh.w	sl, [r3]
 80071c4:	f1ba 0f00 	cmp.w	sl, #0
 80071c8:	d020      	beq.n	800720c <__multiply+0xe4>
 80071ca:	f105 0e14 	add.w	lr, r5, #20
 80071ce:	46b1      	mov	r9, r6
 80071d0:	2200      	movs	r2, #0
 80071d2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80071d6:	f8d9 b000 	ldr.w	fp, [r9]
 80071da:	b2a1      	uxth	r1, r4
 80071dc:	fa1f fb8b 	uxth.w	fp, fp
 80071e0:	fb0a b101 	mla	r1, sl, r1, fp
 80071e4:	4411      	add	r1, r2
 80071e6:	f8d9 2000 	ldr.w	r2, [r9]
 80071ea:	0c24      	lsrs	r4, r4, #16
 80071ec:	0c12      	lsrs	r2, r2, #16
 80071ee:	fb0a 2404 	mla	r4, sl, r4, r2
 80071f2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80071f6:	b289      	uxth	r1, r1
 80071f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80071fc:	45f4      	cmp	ip, lr
 80071fe:	f849 1b04 	str.w	r1, [r9], #4
 8007202:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007206:	d8e4      	bhi.n	80071d2 <__multiply+0xaa>
 8007208:	9901      	ldr	r1, [sp, #4]
 800720a:	5072      	str	r2, [r6, r1]
 800720c:	9a03      	ldr	r2, [sp, #12]
 800720e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007212:	3304      	adds	r3, #4
 8007214:	f1b9 0f00 	cmp.w	r9, #0
 8007218:	d01f      	beq.n	800725a <__multiply+0x132>
 800721a:	6834      	ldr	r4, [r6, #0]
 800721c:	f105 0114 	add.w	r1, r5, #20
 8007220:	46b6      	mov	lr, r6
 8007222:	f04f 0a00 	mov.w	sl, #0
 8007226:	880a      	ldrh	r2, [r1, #0]
 8007228:	f8be b002 	ldrh.w	fp, [lr, #2]
 800722c:	fb09 b202 	mla	r2, r9, r2, fp
 8007230:	4492      	add	sl, r2
 8007232:	b2a4      	uxth	r4, r4
 8007234:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007238:	f84e 4b04 	str.w	r4, [lr], #4
 800723c:	f851 4b04 	ldr.w	r4, [r1], #4
 8007240:	f8be 2000 	ldrh.w	r2, [lr]
 8007244:	0c24      	lsrs	r4, r4, #16
 8007246:	fb09 2404 	mla	r4, r9, r4, r2
 800724a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800724e:	458c      	cmp	ip, r1
 8007250:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007254:	d8e7      	bhi.n	8007226 <__multiply+0xfe>
 8007256:	9a01      	ldr	r2, [sp, #4]
 8007258:	50b4      	str	r4, [r6, r2]
 800725a:	3604      	adds	r6, #4
 800725c:	e7a3      	b.n	80071a6 <__multiply+0x7e>
 800725e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1a5      	bne.n	80071b2 <__multiply+0x8a>
 8007266:	3f01      	subs	r7, #1
 8007268:	e7a1      	b.n	80071ae <__multiply+0x86>
 800726a:	bf00      	nop
 800726c:	080086f3 	.word	0x080086f3
 8007270:	08008704 	.word	0x08008704

08007274 <__pow5mult>:
 8007274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007278:	4615      	mov	r5, r2
 800727a:	f012 0203 	ands.w	r2, r2, #3
 800727e:	4606      	mov	r6, r0
 8007280:	460f      	mov	r7, r1
 8007282:	d007      	beq.n	8007294 <__pow5mult+0x20>
 8007284:	4c25      	ldr	r4, [pc, #148]	; (800731c <__pow5mult+0xa8>)
 8007286:	3a01      	subs	r2, #1
 8007288:	2300      	movs	r3, #0
 800728a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800728e:	f7ff fe9b 	bl	8006fc8 <__multadd>
 8007292:	4607      	mov	r7, r0
 8007294:	10ad      	asrs	r5, r5, #2
 8007296:	d03d      	beq.n	8007314 <__pow5mult+0xa0>
 8007298:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800729a:	b97c      	cbnz	r4, 80072bc <__pow5mult+0x48>
 800729c:	2010      	movs	r0, #16
 800729e:	f7ff fe1b 	bl	8006ed8 <malloc>
 80072a2:	4602      	mov	r2, r0
 80072a4:	6270      	str	r0, [r6, #36]	; 0x24
 80072a6:	b928      	cbnz	r0, 80072b4 <__pow5mult+0x40>
 80072a8:	4b1d      	ldr	r3, [pc, #116]	; (8007320 <__pow5mult+0xac>)
 80072aa:	481e      	ldr	r0, [pc, #120]	; (8007324 <__pow5mult+0xb0>)
 80072ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80072b0:	f000 fbcc 	bl	8007a4c <__assert_func>
 80072b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80072b8:	6004      	str	r4, [r0, #0]
 80072ba:	60c4      	str	r4, [r0, #12]
 80072bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80072c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80072c4:	b94c      	cbnz	r4, 80072da <__pow5mult+0x66>
 80072c6:	f240 2171 	movw	r1, #625	; 0x271
 80072ca:	4630      	mov	r0, r6
 80072cc:	f7ff ff16 	bl	80070fc <__i2b>
 80072d0:	2300      	movs	r3, #0
 80072d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80072d6:	4604      	mov	r4, r0
 80072d8:	6003      	str	r3, [r0, #0]
 80072da:	f04f 0900 	mov.w	r9, #0
 80072de:	07eb      	lsls	r3, r5, #31
 80072e0:	d50a      	bpl.n	80072f8 <__pow5mult+0x84>
 80072e2:	4639      	mov	r1, r7
 80072e4:	4622      	mov	r2, r4
 80072e6:	4630      	mov	r0, r6
 80072e8:	f7ff ff1e 	bl	8007128 <__multiply>
 80072ec:	4639      	mov	r1, r7
 80072ee:	4680      	mov	r8, r0
 80072f0:	4630      	mov	r0, r6
 80072f2:	f7ff fe47 	bl	8006f84 <_Bfree>
 80072f6:	4647      	mov	r7, r8
 80072f8:	106d      	asrs	r5, r5, #1
 80072fa:	d00b      	beq.n	8007314 <__pow5mult+0xa0>
 80072fc:	6820      	ldr	r0, [r4, #0]
 80072fe:	b938      	cbnz	r0, 8007310 <__pow5mult+0x9c>
 8007300:	4622      	mov	r2, r4
 8007302:	4621      	mov	r1, r4
 8007304:	4630      	mov	r0, r6
 8007306:	f7ff ff0f 	bl	8007128 <__multiply>
 800730a:	6020      	str	r0, [r4, #0]
 800730c:	f8c0 9000 	str.w	r9, [r0]
 8007310:	4604      	mov	r4, r0
 8007312:	e7e4      	b.n	80072de <__pow5mult+0x6a>
 8007314:	4638      	mov	r0, r7
 8007316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800731a:	bf00      	nop
 800731c:	08008858 	.word	0x08008858
 8007320:	0800867d 	.word	0x0800867d
 8007324:	08008704 	.word	0x08008704

08007328 <__lshift>:
 8007328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800732c:	460c      	mov	r4, r1
 800732e:	6849      	ldr	r1, [r1, #4]
 8007330:	6923      	ldr	r3, [r4, #16]
 8007332:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007336:	68a3      	ldr	r3, [r4, #8]
 8007338:	4607      	mov	r7, r0
 800733a:	4691      	mov	r9, r2
 800733c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007340:	f108 0601 	add.w	r6, r8, #1
 8007344:	42b3      	cmp	r3, r6
 8007346:	db0b      	blt.n	8007360 <__lshift+0x38>
 8007348:	4638      	mov	r0, r7
 800734a:	f7ff fddb 	bl	8006f04 <_Balloc>
 800734e:	4605      	mov	r5, r0
 8007350:	b948      	cbnz	r0, 8007366 <__lshift+0x3e>
 8007352:	4602      	mov	r2, r0
 8007354:	4b28      	ldr	r3, [pc, #160]	; (80073f8 <__lshift+0xd0>)
 8007356:	4829      	ldr	r0, [pc, #164]	; (80073fc <__lshift+0xd4>)
 8007358:	f240 11d9 	movw	r1, #473	; 0x1d9
 800735c:	f000 fb76 	bl	8007a4c <__assert_func>
 8007360:	3101      	adds	r1, #1
 8007362:	005b      	lsls	r3, r3, #1
 8007364:	e7ee      	b.n	8007344 <__lshift+0x1c>
 8007366:	2300      	movs	r3, #0
 8007368:	f100 0114 	add.w	r1, r0, #20
 800736c:	f100 0210 	add.w	r2, r0, #16
 8007370:	4618      	mov	r0, r3
 8007372:	4553      	cmp	r3, sl
 8007374:	db33      	blt.n	80073de <__lshift+0xb6>
 8007376:	6920      	ldr	r0, [r4, #16]
 8007378:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800737c:	f104 0314 	add.w	r3, r4, #20
 8007380:	f019 091f 	ands.w	r9, r9, #31
 8007384:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007388:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800738c:	d02b      	beq.n	80073e6 <__lshift+0xbe>
 800738e:	f1c9 0e20 	rsb	lr, r9, #32
 8007392:	468a      	mov	sl, r1
 8007394:	2200      	movs	r2, #0
 8007396:	6818      	ldr	r0, [r3, #0]
 8007398:	fa00 f009 	lsl.w	r0, r0, r9
 800739c:	4302      	orrs	r2, r0
 800739e:	f84a 2b04 	str.w	r2, [sl], #4
 80073a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80073a6:	459c      	cmp	ip, r3
 80073a8:	fa22 f20e 	lsr.w	r2, r2, lr
 80073ac:	d8f3      	bhi.n	8007396 <__lshift+0x6e>
 80073ae:	ebac 0304 	sub.w	r3, ip, r4
 80073b2:	3b15      	subs	r3, #21
 80073b4:	f023 0303 	bic.w	r3, r3, #3
 80073b8:	3304      	adds	r3, #4
 80073ba:	f104 0015 	add.w	r0, r4, #21
 80073be:	4584      	cmp	ip, r0
 80073c0:	bf38      	it	cc
 80073c2:	2304      	movcc	r3, #4
 80073c4:	50ca      	str	r2, [r1, r3]
 80073c6:	b10a      	cbz	r2, 80073cc <__lshift+0xa4>
 80073c8:	f108 0602 	add.w	r6, r8, #2
 80073cc:	3e01      	subs	r6, #1
 80073ce:	4638      	mov	r0, r7
 80073d0:	612e      	str	r6, [r5, #16]
 80073d2:	4621      	mov	r1, r4
 80073d4:	f7ff fdd6 	bl	8006f84 <_Bfree>
 80073d8:	4628      	mov	r0, r5
 80073da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073de:	f842 0f04 	str.w	r0, [r2, #4]!
 80073e2:	3301      	adds	r3, #1
 80073e4:	e7c5      	b.n	8007372 <__lshift+0x4a>
 80073e6:	3904      	subs	r1, #4
 80073e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80073ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80073f0:	459c      	cmp	ip, r3
 80073f2:	d8f9      	bhi.n	80073e8 <__lshift+0xc0>
 80073f4:	e7ea      	b.n	80073cc <__lshift+0xa4>
 80073f6:	bf00      	nop
 80073f8:	080086f3 	.word	0x080086f3
 80073fc:	08008704 	.word	0x08008704

08007400 <__mcmp>:
 8007400:	b530      	push	{r4, r5, lr}
 8007402:	6902      	ldr	r2, [r0, #16]
 8007404:	690c      	ldr	r4, [r1, #16]
 8007406:	1b12      	subs	r2, r2, r4
 8007408:	d10e      	bne.n	8007428 <__mcmp+0x28>
 800740a:	f100 0314 	add.w	r3, r0, #20
 800740e:	3114      	adds	r1, #20
 8007410:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007414:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007418:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800741c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007420:	42a5      	cmp	r5, r4
 8007422:	d003      	beq.n	800742c <__mcmp+0x2c>
 8007424:	d305      	bcc.n	8007432 <__mcmp+0x32>
 8007426:	2201      	movs	r2, #1
 8007428:	4610      	mov	r0, r2
 800742a:	bd30      	pop	{r4, r5, pc}
 800742c:	4283      	cmp	r3, r0
 800742e:	d3f3      	bcc.n	8007418 <__mcmp+0x18>
 8007430:	e7fa      	b.n	8007428 <__mcmp+0x28>
 8007432:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007436:	e7f7      	b.n	8007428 <__mcmp+0x28>

08007438 <__mdiff>:
 8007438:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800743c:	460c      	mov	r4, r1
 800743e:	4606      	mov	r6, r0
 8007440:	4611      	mov	r1, r2
 8007442:	4620      	mov	r0, r4
 8007444:	4617      	mov	r7, r2
 8007446:	f7ff ffdb 	bl	8007400 <__mcmp>
 800744a:	1e05      	subs	r5, r0, #0
 800744c:	d110      	bne.n	8007470 <__mdiff+0x38>
 800744e:	4629      	mov	r1, r5
 8007450:	4630      	mov	r0, r6
 8007452:	f7ff fd57 	bl	8006f04 <_Balloc>
 8007456:	b930      	cbnz	r0, 8007466 <__mdiff+0x2e>
 8007458:	4b39      	ldr	r3, [pc, #228]	; (8007540 <__mdiff+0x108>)
 800745a:	4602      	mov	r2, r0
 800745c:	f240 2132 	movw	r1, #562	; 0x232
 8007460:	4838      	ldr	r0, [pc, #224]	; (8007544 <__mdiff+0x10c>)
 8007462:	f000 faf3 	bl	8007a4c <__assert_func>
 8007466:	2301      	movs	r3, #1
 8007468:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800746c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007470:	bfa4      	itt	ge
 8007472:	463b      	movge	r3, r7
 8007474:	4627      	movge	r7, r4
 8007476:	4630      	mov	r0, r6
 8007478:	6879      	ldr	r1, [r7, #4]
 800747a:	bfa6      	itte	ge
 800747c:	461c      	movge	r4, r3
 800747e:	2500      	movge	r5, #0
 8007480:	2501      	movlt	r5, #1
 8007482:	f7ff fd3f 	bl	8006f04 <_Balloc>
 8007486:	b920      	cbnz	r0, 8007492 <__mdiff+0x5a>
 8007488:	4b2d      	ldr	r3, [pc, #180]	; (8007540 <__mdiff+0x108>)
 800748a:	4602      	mov	r2, r0
 800748c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007490:	e7e6      	b.n	8007460 <__mdiff+0x28>
 8007492:	693e      	ldr	r6, [r7, #16]
 8007494:	60c5      	str	r5, [r0, #12]
 8007496:	6925      	ldr	r5, [r4, #16]
 8007498:	f107 0114 	add.w	r1, r7, #20
 800749c:	f104 0914 	add.w	r9, r4, #20
 80074a0:	f100 0e14 	add.w	lr, r0, #20
 80074a4:	f107 0210 	add.w	r2, r7, #16
 80074a8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80074ac:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80074b0:	46f2      	mov	sl, lr
 80074b2:	2700      	movs	r7, #0
 80074b4:	f859 3b04 	ldr.w	r3, [r9], #4
 80074b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80074bc:	fa1f f883 	uxth.w	r8, r3
 80074c0:	fa17 f78b 	uxtah	r7, r7, fp
 80074c4:	0c1b      	lsrs	r3, r3, #16
 80074c6:	eba7 0808 	sub.w	r8, r7, r8
 80074ca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80074ce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80074d2:	fa1f f888 	uxth.w	r8, r8
 80074d6:	141f      	asrs	r7, r3, #16
 80074d8:	454d      	cmp	r5, r9
 80074da:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80074de:	f84a 3b04 	str.w	r3, [sl], #4
 80074e2:	d8e7      	bhi.n	80074b4 <__mdiff+0x7c>
 80074e4:	1b2b      	subs	r3, r5, r4
 80074e6:	3b15      	subs	r3, #21
 80074e8:	f023 0303 	bic.w	r3, r3, #3
 80074ec:	3304      	adds	r3, #4
 80074ee:	3415      	adds	r4, #21
 80074f0:	42a5      	cmp	r5, r4
 80074f2:	bf38      	it	cc
 80074f4:	2304      	movcc	r3, #4
 80074f6:	4419      	add	r1, r3
 80074f8:	4473      	add	r3, lr
 80074fa:	469e      	mov	lr, r3
 80074fc:	460d      	mov	r5, r1
 80074fe:	4565      	cmp	r5, ip
 8007500:	d30e      	bcc.n	8007520 <__mdiff+0xe8>
 8007502:	f10c 0203 	add.w	r2, ip, #3
 8007506:	1a52      	subs	r2, r2, r1
 8007508:	f022 0203 	bic.w	r2, r2, #3
 800750c:	3903      	subs	r1, #3
 800750e:	458c      	cmp	ip, r1
 8007510:	bf38      	it	cc
 8007512:	2200      	movcc	r2, #0
 8007514:	441a      	add	r2, r3
 8007516:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800751a:	b17b      	cbz	r3, 800753c <__mdiff+0x104>
 800751c:	6106      	str	r6, [r0, #16]
 800751e:	e7a5      	b.n	800746c <__mdiff+0x34>
 8007520:	f855 8b04 	ldr.w	r8, [r5], #4
 8007524:	fa17 f488 	uxtah	r4, r7, r8
 8007528:	1422      	asrs	r2, r4, #16
 800752a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800752e:	b2a4      	uxth	r4, r4
 8007530:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007534:	f84e 4b04 	str.w	r4, [lr], #4
 8007538:	1417      	asrs	r7, r2, #16
 800753a:	e7e0      	b.n	80074fe <__mdiff+0xc6>
 800753c:	3e01      	subs	r6, #1
 800753e:	e7ea      	b.n	8007516 <__mdiff+0xde>
 8007540:	080086f3 	.word	0x080086f3
 8007544:	08008704 	.word	0x08008704

08007548 <__d2b>:
 8007548:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800754c:	4689      	mov	r9, r1
 800754e:	2101      	movs	r1, #1
 8007550:	ec57 6b10 	vmov	r6, r7, d0
 8007554:	4690      	mov	r8, r2
 8007556:	f7ff fcd5 	bl	8006f04 <_Balloc>
 800755a:	4604      	mov	r4, r0
 800755c:	b930      	cbnz	r0, 800756c <__d2b+0x24>
 800755e:	4602      	mov	r2, r0
 8007560:	4b25      	ldr	r3, [pc, #148]	; (80075f8 <__d2b+0xb0>)
 8007562:	4826      	ldr	r0, [pc, #152]	; (80075fc <__d2b+0xb4>)
 8007564:	f240 310a 	movw	r1, #778	; 0x30a
 8007568:	f000 fa70 	bl	8007a4c <__assert_func>
 800756c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007570:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007574:	bb35      	cbnz	r5, 80075c4 <__d2b+0x7c>
 8007576:	2e00      	cmp	r6, #0
 8007578:	9301      	str	r3, [sp, #4]
 800757a:	d028      	beq.n	80075ce <__d2b+0x86>
 800757c:	4668      	mov	r0, sp
 800757e:	9600      	str	r6, [sp, #0]
 8007580:	f7ff fd8c 	bl	800709c <__lo0bits>
 8007584:	9900      	ldr	r1, [sp, #0]
 8007586:	b300      	cbz	r0, 80075ca <__d2b+0x82>
 8007588:	9a01      	ldr	r2, [sp, #4]
 800758a:	f1c0 0320 	rsb	r3, r0, #32
 800758e:	fa02 f303 	lsl.w	r3, r2, r3
 8007592:	430b      	orrs	r3, r1
 8007594:	40c2      	lsrs	r2, r0
 8007596:	6163      	str	r3, [r4, #20]
 8007598:	9201      	str	r2, [sp, #4]
 800759a:	9b01      	ldr	r3, [sp, #4]
 800759c:	61a3      	str	r3, [r4, #24]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	bf14      	ite	ne
 80075a2:	2202      	movne	r2, #2
 80075a4:	2201      	moveq	r2, #1
 80075a6:	6122      	str	r2, [r4, #16]
 80075a8:	b1d5      	cbz	r5, 80075e0 <__d2b+0x98>
 80075aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80075ae:	4405      	add	r5, r0
 80075b0:	f8c9 5000 	str.w	r5, [r9]
 80075b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80075b8:	f8c8 0000 	str.w	r0, [r8]
 80075bc:	4620      	mov	r0, r4
 80075be:	b003      	add	sp, #12
 80075c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80075c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075c8:	e7d5      	b.n	8007576 <__d2b+0x2e>
 80075ca:	6161      	str	r1, [r4, #20]
 80075cc:	e7e5      	b.n	800759a <__d2b+0x52>
 80075ce:	a801      	add	r0, sp, #4
 80075d0:	f7ff fd64 	bl	800709c <__lo0bits>
 80075d4:	9b01      	ldr	r3, [sp, #4]
 80075d6:	6163      	str	r3, [r4, #20]
 80075d8:	2201      	movs	r2, #1
 80075da:	6122      	str	r2, [r4, #16]
 80075dc:	3020      	adds	r0, #32
 80075de:	e7e3      	b.n	80075a8 <__d2b+0x60>
 80075e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80075e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80075e8:	f8c9 0000 	str.w	r0, [r9]
 80075ec:	6918      	ldr	r0, [r3, #16]
 80075ee:	f7ff fd35 	bl	800705c <__hi0bits>
 80075f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80075f6:	e7df      	b.n	80075b8 <__d2b+0x70>
 80075f8:	080086f3 	.word	0x080086f3
 80075fc:	08008704 	.word	0x08008704

08007600 <_calloc_r>:
 8007600:	b513      	push	{r0, r1, r4, lr}
 8007602:	434a      	muls	r2, r1
 8007604:	4611      	mov	r1, r2
 8007606:	9201      	str	r2, [sp, #4]
 8007608:	f000 f85a 	bl	80076c0 <_malloc_r>
 800760c:	4604      	mov	r4, r0
 800760e:	b118      	cbz	r0, 8007618 <_calloc_r+0x18>
 8007610:	9a01      	ldr	r2, [sp, #4]
 8007612:	2100      	movs	r1, #0
 8007614:	f7fe f952 	bl	80058bc <memset>
 8007618:	4620      	mov	r0, r4
 800761a:	b002      	add	sp, #8
 800761c:	bd10      	pop	{r4, pc}
	...

08007620 <_free_r>:
 8007620:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007622:	2900      	cmp	r1, #0
 8007624:	d048      	beq.n	80076b8 <_free_r+0x98>
 8007626:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800762a:	9001      	str	r0, [sp, #4]
 800762c:	2b00      	cmp	r3, #0
 800762e:	f1a1 0404 	sub.w	r4, r1, #4
 8007632:	bfb8      	it	lt
 8007634:	18e4      	addlt	r4, r4, r3
 8007636:	f000 fa65 	bl	8007b04 <__malloc_lock>
 800763a:	4a20      	ldr	r2, [pc, #128]	; (80076bc <_free_r+0x9c>)
 800763c:	9801      	ldr	r0, [sp, #4]
 800763e:	6813      	ldr	r3, [r2, #0]
 8007640:	4615      	mov	r5, r2
 8007642:	b933      	cbnz	r3, 8007652 <_free_r+0x32>
 8007644:	6063      	str	r3, [r4, #4]
 8007646:	6014      	str	r4, [r2, #0]
 8007648:	b003      	add	sp, #12
 800764a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800764e:	f000 ba5f 	b.w	8007b10 <__malloc_unlock>
 8007652:	42a3      	cmp	r3, r4
 8007654:	d90b      	bls.n	800766e <_free_r+0x4e>
 8007656:	6821      	ldr	r1, [r4, #0]
 8007658:	1862      	adds	r2, r4, r1
 800765a:	4293      	cmp	r3, r2
 800765c:	bf04      	itt	eq
 800765e:	681a      	ldreq	r2, [r3, #0]
 8007660:	685b      	ldreq	r3, [r3, #4]
 8007662:	6063      	str	r3, [r4, #4]
 8007664:	bf04      	itt	eq
 8007666:	1852      	addeq	r2, r2, r1
 8007668:	6022      	streq	r2, [r4, #0]
 800766a:	602c      	str	r4, [r5, #0]
 800766c:	e7ec      	b.n	8007648 <_free_r+0x28>
 800766e:	461a      	mov	r2, r3
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	b10b      	cbz	r3, 8007678 <_free_r+0x58>
 8007674:	42a3      	cmp	r3, r4
 8007676:	d9fa      	bls.n	800766e <_free_r+0x4e>
 8007678:	6811      	ldr	r1, [r2, #0]
 800767a:	1855      	adds	r5, r2, r1
 800767c:	42a5      	cmp	r5, r4
 800767e:	d10b      	bne.n	8007698 <_free_r+0x78>
 8007680:	6824      	ldr	r4, [r4, #0]
 8007682:	4421      	add	r1, r4
 8007684:	1854      	adds	r4, r2, r1
 8007686:	42a3      	cmp	r3, r4
 8007688:	6011      	str	r1, [r2, #0]
 800768a:	d1dd      	bne.n	8007648 <_free_r+0x28>
 800768c:	681c      	ldr	r4, [r3, #0]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	6053      	str	r3, [r2, #4]
 8007692:	4421      	add	r1, r4
 8007694:	6011      	str	r1, [r2, #0]
 8007696:	e7d7      	b.n	8007648 <_free_r+0x28>
 8007698:	d902      	bls.n	80076a0 <_free_r+0x80>
 800769a:	230c      	movs	r3, #12
 800769c:	6003      	str	r3, [r0, #0]
 800769e:	e7d3      	b.n	8007648 <_free_r+0x28>
 80076a0:	6825      	ldr	r5, [r4, #0]
 80076a2:	1961      	adds	r1, r4, r5
 80076a4:	428b      	cmp	r3, r1
 80076a6:	bf04      	itt	eq
 80076a8:	6819      	ldreq	r1, [r3, #0]
 80076aa:	685b      	ldreq	r3, [r3, #4]
 80076ac:	6063      	str	r3, [r4, #4]
 80076ae:	bf04      	itt	eq
 80076b0:	1949      	addeq	r1, r1, r5
 80076b2:	6021      	streq	r1, [r4, #0]
 80076b4:	6054      	str	r4, [r2, #4]
 80076b6:	e7c7      	b.n	8007648 <_free_r+0x28>
 80076b8:	b003      	add	sp, #12
 80076ba:	bd30      	pop	{r4, r5, pc}
 80076bc:	2000040c 	.word	0x2000040c

080076c0 <_malloc_r>:
 80076c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076c2:	1ccd      	adds	r5, r1, #3
 80076c4:	f025 0503 	bic.w	r5, r5, #3
 80076c8:	3508      	adds	r5, #8
 80076ca:	2d0c      	cmp	r5, #12
 80076cc:	bf38      	it	cc
 80076ce:	250c      	movcc	r5, #12
 80076d0:	2d00      	cmp	r5, #0
 80076d2:	4606      	mov	r6, r0
 80076d4:	db01      	blt.n	80076da <_malloc_r+0x1a>
 80076d6:	42a9      	cmp	r1, r5
 80076d8:	d903      	bls.n	80076e2 <_malloc_r+0x22>
 80076da:	230c      	movs	r3, #12
 80076dc:	6033      	str	r3, [r6, #0]
 80076de:	2000      	movs	r0, #0
 80076e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076e2:	f000 fa0f 	bl	8007b04 <__malloc_lock>
 80076e6:	4921      	ldr	r1, [pc, #132]	; (800776c <_malloc_r+0xac>)
 80076e8:	680a      	ldr	r2, [r1, #0]
 80076ea:	4614      	mov	r4, r2
 80076ec:	b99c      	cbnz	r4, 8007716 <_malloc_r+0x56>
 80076ee:	4f20      	ldr	r7, [pc, #128]	; (8007770 <_malloc_r+0xb0>)
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	b923      	cbnz	r3, 80076fe <_malloc_r+0x3e>
 80076f4:	4621      	mov	r1, r4
 80076f6:	4630      	mov	r0, r6
 80076f8:	f000 f998 	bl	8007a2c <_sbrk_r>
 80076fc:	6038      	str	r0, [r7, #0]
 80076fe:	4629      	mov	r1, r5
 8007700:	4630      	mov	r0, r6
 8007702:	f000 f993 	bl	8007a2c <_sbrk_r>
 8007706:	1c43      	adds	r3, r0, #1
 8007708:	d123      	bne.n	8007752 <_malloc_r+0x92>
 800770a:	230c      	movs	r3, #12
 800770c:	6033      	str	r3, [r6, #0]
 800770e:	4630      	mov	r0, r6
 8007710:	f000 f9fe 	bl	8007b10 <__malloc_unlock>
 8007714:	e7e3      	b.n	80076de <_malloc_r+0x1e>
 8007716:	6823      	ldr	r3, [r4, #0]
 8007718:	1b5b      	subs	r3, r3, r5
 800771a:	d417      	bmi.n	800774c <_malloc_r+0x8c>
 800771c:	2b0b      	cmp	r3, #11
 800771e:	d903      	bls.n	8007728 <_malloc_r+0x68>
 8007720:	6023      	str	r3, [r4, #0]
 8007722:	441c      	add	r4, r3
 8007724:	6025      	str	r5, [r4, #0]
 8007726:	e004      	b.n	8007732 <_malloc_r+0x72>
 8007728:	6863      	ldr	r3, [r4, #4]
 800772a:	42a2      	cmp	r2, r4
 800772c:	bf0c      	ite	eq
 800772e:	600b      	streq	r3, [r1, #0]
 8007730:	6053      	strne	r3, [r2, #4]
 8007732:	4630      	mov	r0, r6
 8007734:	f000 f9ec 	bl	8007b10 <__malloc_unlock>
 8007738:	f104 000b 	add.w	r0, r4, #11
 800773c:	1d23      	adds	r3, r4, #4
 800773e:	f020 0007 	bic.w	r0, r0, #7
 8007742:	1ac2      	subs	r2, r0, r3
 8007744:	d0cc      	beq.n	80076e0 <_malloc_r+0x20>
 8007746:	1a1b      	subs	r3, r3, r0
 8007748:	50a3      	str	r3, [r4, r2]
 800774a:	e7c9      	b.n	80076e0 <_malloc_r+0x20>
 800774c:	4622      	mov	r2, r4
 800774e:	6864      	ldr	r4, [r4, #4]
 8007750:	e7cc      	b.n	80076ec <_malloc_r+0x2c>
 8007752:	1cc4      	adds	r4, r0, #3
 8007754:	f024 0403 	bic.w	r4, r4, #3
 8007758:	42a0      	cmp	r0, r4
 800775a:	d0e3      	beq.n	8007724 <_malloc_r+0x64>
 800775c:	1a21      	subs	r1, r4, r0
 800775e:	4630      	mov	r0, r6
 8007760:	f000 f964 	bl	8007a2c <_sbrk_r>
 8007764:	3001      	adds	r0, #1
 8007766:	d1dd      	bne.n	8007724 <_malloc_r+0x64>
 8007768:	e7cf      	b.n	800770a <_malloc_r+0x4a>
 800776a:	bf00      	nop
 800776c:	2000040c 	.word	0x2000040c
 8007770:	20000410 	.word	0x20000410

08007774 <__ssputs_r>:
 8007774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007778:	688e      	ldr	r6, [r1, #8]
 800777a:	429e      	cmp	r6, r3
 800777c:	4682      	mov	sl, r0
 800777e:	460c      	mov	r4, r1
 8007780:	4690      	mov	r8, r2
 8007782:	461f      	mov	r7, r3
 8007784:	d838      	bhi.n	80077f8 <__ssputs_r+0x84>
 8007786:	898a      	ldrh	r2, [r1, #12]
 8007788:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800778c:	d032      	beq.n	80077f4 <__ssputs_r+0x80>
 800778e:	6825      	ldr	r5, [r4, #0]
 8007790:	6909      	ldr	r1, [r1, #16]
 8007792:	eba5 0901 	sub.w	r9, r5, r1
 8007796:	6965      	ldr	r5, [r4, #20]
 8007798:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800779c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80077a0:	3301      	adds	r3, #1
 80077a2:	444b      	add	r3, r9
 80077a4:	106d      	asrs	r5, r5, #1
 80077a6:	429d      	cmp	r5, r3
 80077a8:	bf38      	it	cc
 80077aa:	461d      	movcc	r5, r3
 80077ac:	0553      	lsls	r3, r2, #21
 80077ae:	d531      	bpl.n	8007814 <__ssputs_r+0xa0>
 80077b0:	4629      	mov	r1, r5
 80077b2:	f7ff ff85 	bl	80076c0 <_malloc_r>
 80077b6:	4606      	mov	r6, r0
 80077b8:	b950      	cbnz	r0, 80077d0 <__ssputs_r+0x5c>
 80077ba:	230c      	movs	r3, #12
 80077bc:	f8ca 3000 	str.w	r3, [sl]
 80077c0:	89a3      	ldrh	r3, [r4, #12]
 80077c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077c6:	81a3      	strh	r3, [r4, #12]
 80077c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077d0:	6921      	ldr	r1, [r4, #16]
 80077d2:	464a      	mov	r2, r9
 80077d4:	f7ff fb88 	bl	8006ee8 <memcpy>
 80077d8:	89a3      	ldrh	r3, [r4, #12]
 80077da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80077de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077e2:	81a3      	strh	r3, [r4, #12]
 80077e4:	6126      	str	r6, [r4, #16]
 80077e6:	6165      	str	r5, [r4, #20]
 80077e8:	444e      	add	r6, r9
 80077ea:	eba5 0509 	sub.w	r5, r5, r9
 80077ee:	6026      	str	r6, [r4, #0]
 80077f0:	60a5      	str	r5, [r4, #8]
 80077f2:	463e      	mov	r6, r7
 80077f4:	42be      	cmp	r6, r7
 80077f6:	d900      	bls.n	80077fa <__ssputs_r+0x86>
 80077f8:	463e      	mov	r6, r7
 80077fa:	4632      	mov	r2, r6
 80077fc:	6820      	ldr	r0, [r4, #0]
 80077fe:	4641      	mov	r1, r8
 8007800:	f000 f966 	bl	8007ad0 <memmove>
 8007804:	68a3      	ldr	r3, [r4, #8]
 8007806:	6822      	ldr	r2, [r4, #0]
 8007808:	1b9b      	subs	r3, r3, r6
 800780a:	4432      	add	r2, r6
 800780c:	60a3      	str	r3, [r4, #8]
 800780e:	6022      	str	r2, [r4, #0]
 8007810:	2000      	movs	r0, #0
 8007812:	e7db      	b.n	80077cc <__ssputs_r+0x58>
 8007814:	462a      	mov	r2, r5
 8007816:	f000 f981 	bl	8007b1c <_realloc_r>
 800781a:	4606      	mov	r6, r0
 800781c:	2800      	cmp	r0, #0
 800781e:	d1e1      	bne.n	80077e4 <__ssputs_r+0x70>
 8007820:	6921      	ldr	r1, [r4, #16]
 8007822:	4650      	mov	r0, sl
 8007824:	f7ff fefc 	bl	8007620 <_free_r>
 8007828:	e7c7      	b.n	80077ba <__ssputs_r+0x46>
	...

0800782c <_svfiprintf_r>:
 800782c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007830:	4698      	mov	r8, r3
 8007832:	898b      	ldrh	r3, [r1, #12]
 8007834:	061b      	lsls	r3, r3, #24
 8007836:	b09d      	sub	sp, #116	; 0x74
 8007838:	4607      	mov	r7, r0
 800783a:	460d      	mov	r5, r1
 800783c:	4614      	mov	r4, r2
 800783e:	d50e      	bpl.n	800785e <_svfiprintf_r+0x32>
 8007840:	690b      	ldr	r3, [r1, #16]
 8007842:	b963      	cbnz	r3, 800785e <_svfiprintf_r+0x32>
 8007844:	2140      	movs	r1, #64	; 0x40
 8007846:	f7ff ff3b 	bl	80076c0 <_malloc_r>
 800784a:	6028      	str	r0, [r5, #0]
 800784c:	6128      	str	r0, [r5, #16]
 800784e:	b920      	cbnz	r0, 800785a <_svfiprintf_r+0x2e>
 8007850:	230c      	movs	r3, #12
 8007852:	603b      	str	r3, [r7, #0]
 8007854:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007858:	e0d1      	b.n	80079fe <_svfiprintf_r+0x1d2>
 800785a:	2340      	movs	r3, #64	; 0x40
 800785c:	616b      	str	r3, [r5, #20]
 800785e:	2300      	movs	r3, #0
 8007860:	9309      	str	r3, [sp, #36]	; 0x24
 8007862:	2320      	movs	r3, #32
 8007864:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007868:	f8cd 800c 	str.w	r8, [sp, #12]
 800786c:	2330      	movs	r3, #48	; 0x30
 800786e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007a18 <_svfiprintf_r+0x1ec>
 8007872:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007876:	f04f 0901 	mov.w	r9, #1
 800787a:	4623      	mov	r3, r4
 800787c:	469a      	mov	sl, r3
 800787e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007882:	b10a      	cbz	r2, 8007888 <_svfiprintf_r+0x5c>
 8007884:	2a25      	cmp	r2, #37	; 0x25
 8007886:	d1f9      	bne.n	800787c <_svfiprintf_r+0x50>
 8007888:	ebba 0b04 	subs.w	fp, sl, r4
 800788c:	d00b      	beq.n	80078a6 <_svfiprintf_r+0x7a>
 800788e:	465b      	mov	r3, fp
 8007890:	4622      	mov	r2, r4
 8007892:	4629      	mov	r1, r5
 8007894:	4638      	mov	r0, r7
 8007896:	f7ff ff6d 	bl	8007774 <__ssputs_r>
 800789a:	3001      	adds	r0, #1
 800789c:	f000 80aa 	beq.w	80079f4 <_svfiprintf_r+0x1c8>
 80078a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078a2:	445a      	add	r2, fp
 80078a4:	9209      	str	r2, [sp, #36]	; 0x24
 80078a6:	f89a 3000 	ldrb.w	r3, [sl]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	f000 80a2 	beq.w	80079f4 <_svfiprintf_r+0x1c8>
 80078b0:	2300      	movs	r3, #0
 80078b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80078b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078ba:	f10a 0a01 	add.w	sl, sl, #1
 80078be:	9304      	str	r3, [sp, #16]
 80078c0:	9307      	str	r3, [sp, #28]
 80078c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078c6:	931a      	str	r3, [sp, #104]	; 0x68
 80078c8:	4654      	mov	r4, sl
 80078ca:	2205      	movs	r2, #5
 80078cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078d0:	4851      	ldr	r0, [pc, #324]	; (8007a18 <_svfiprintf_r+0x1ec>)
 80078d2:	f7f8 fc85 	bl	80001e0 <memchr>
 80078d6:	9a04      	ldr	r2, [sp, #16]
 80078d8:	b9d8      	cbnz	r0, 8007912 <_svfiprintf_r+0xe6>
 80078da:	06d0      	lsls	r0, r2, #27
 80078dc:	bf44      	itt	mi
 80078de:	2320      	movmi	r3, #32
 80078e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078e4:	0711      	lsls	r1, r2, #28
 80078e6:	bf44      	itt	mi
 80078e8:	232b      	movmi	r3, #43	; 0x2b
 80078ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078ee:	f89a 3000 	ldrb.w	r3, [sl]
 80078f2:	2b2a      	cmp	r3, #42	; 0x2a
 80078f4:	d015      	beq.n	8007922 <_svfiprintf_r+0xf6>
 80078f6:	9a07      	ldr	r2, [sp, #28]
 80078f8:	4654      	mov	r4, sl
 80078fa:	2000      	movs	r0, #0
 80078fc:	f04f 0c0a 	mov.w	ip, #10
 8007900:	4621      	mov	r1, r4
 8007902:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007906:	3b30      	subs	r3, #48	; 0x30
 8007908:	2b09      	cmp	r3, #9
 800790a:	d94e      	bls.n	80079aa <_svfiprintf_r+0x17e>
 800790c:	b1b0      	cbz	r0, 800793c <_svfiprintf_r+0x110>
 800790e:	9207      	str	r2, [sp, #28]
 8007910:	e014      	b.n	800793c <_svfiprintf_r+0x110>
 8007912:	eba0 0308 	sub.w	r3, r0, r8
 8007916:	fa09 f303 	lsl.w	r3, r9, r3
 800791a:	4313      	orrs	r3, r2
 800791c:	9304      	str	r3, [sp, #16]
 800791e:	46a2      	mov	sl, r4
 8007920:	e7d2      	b.n	80078c8 <_svfiprintf_r+0x9c>
 8007922:	9b03      	ldr	r3, [sp, #12]
 8007924:	1d19      	adds	r1, r3, #4
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	9103      	str	r1, [sp, #12]
 800792a:	2b00      	cmp	r3, #0
 800792c:	bfbb      	ittet	lt
 800792e:	425b      	neglt	r3, r3
 8007930:	f042 0202 	orrlt.w	r2, r2, #2
 8007934:	9307      	strge	r3, [sp, #28]
 8007936:	9307      	strlt	r3, [sp, #28]
 8007938:	bfb8      	it	lt
 800793a:	9204      	strlt	r2, [sp, #16]
 800793c:	7823      	ldrb	r3, [r4, #0]
 800793e:	2b2e      	cmp	r3, #46	; 0x2e
 8007940:	d10c      	bne.n	800795c <_svfiprintf_r+0x130>
 8007942:	7863      	ldrb	r3, [r4, #1]
 8007944:	2b2a      	cmp	r3, #42	; 0x2a
 8007946:	d135      	bne.n	80079b4 <_svfiprintf_r+0x188>
 8007948:	9b03      	ldr	r3, [sp, #12]
 800794a:	1d1a      	adds	r2, r3, #4
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	9203      	str	r2, [sp, #12]
 8007950:	2b00      	cmp	r3, #0
 8007952:	bfb8      	it	lt
 8007954:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007958:	3402      	adds	r4, #2
 800795a:	9305      	str	r3, [sp, #20]
 800795c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007a28 <_svfiprintf_r+0x1fc>
 8007960:	7821      	ldrb	r1, [r4, #0]
 8007962:	2203      	movs	r2, #3
 8007964:	4650      	mov	r0, sl
 8007966:	f7f8 fc3b 	bl	80001e0 <memchr>
 800796a:	b140      	cbz	r0, 800797e <_svfiprintf_r+0x152>
 800796c:	2340      	movs	r3, #64	; 0x40
 800796e:	eba0 000a 	sub.w	r0, r0, sl
 8007972:	fa03 f000 	lsl.w	r0, r3, r0
 8007976:	9b04      	ldr	r3, [sp, #16]
 8007978:	4303      	orrs	r3, r0
 800797a:	3401      	adds	r4, #1
 800797c:	9304      	str	r3, [sp, #16]
 800797e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007982:	4826      	ldr	r0, [pc, #152]	; (8007a1c <_svfiprintf_r+0x1f0>)
 8007984:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007988:	2206      	movs	r2, #6
 800798a:	f7f8 fc29 	bl	80001e0 <memchr>
 800798e:	2800      	cmp	r0, #0
 8007990:	d038      	beq.n	8007a04 <_svfiprintf_r+0x1d8>
 8007992:	4b23      	ldr	r3, [pc, #140]	; (8007a20 <_svfiprintf_r+0x1f4>)
 8007994:	bb1b      	cbnz	r3, 80079de <_svfiprintf_r+0x1b2>
 8007996:	9b03      	ldr	r3, [sp, #12]
 8007998:	3307      	adds	r3, #7
 800799a:	f023 0307 	bic.w	r3, r3, #7
 800799e:	3308      	adds	r3, #8
 80079a0:	9303      	str	r3, [sp, #12]
 80079a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079a4:	4433      	add	r3, r6
 80079a6:	9309      	str	r3, [sp, #36]	; 0x24
 80079a8:	e767      	b.n	800787a <_svfiprintf_r+0x4e>
 80079aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80079ae:	460c      	mov	r4, r1
 80079b0:	2001      	movs	r0, #1
 80079b2:	e7a5      	b.n	8007900 <_svfiprintf_r+0xd4>
 80079b4:	2300      	movs	r3, #0
 80079b6:	3401      	adds	r4, #1
 80079b8:	9305      	str	r3, [sp, #20]
 80079ba:	4619      	mov	r1, r3
 80079bc:	f04f 0c0a 	mov.w	ip, #10
 80079c0:	4620      	mov	r0, r4
 80079c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079c6:	3a30      	subs	r2, #48	; 0x30
 80079c8:	2a09      	cmp	r2, #9
 80079ca:	d903      	bls.n	80079d4 <_svfiprintf_r+0x1a8>
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d0c5      	beq.n	800795c <_svfiprintf_r+0x130>
 80079d0:	9105      	str	r1, [sp, #20]
 80079d2:	e7c3      	b.n	800795c <_svfiprintf_r+0x130>
 80079d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80079d8:	4604      	mov	r4, r0
 80079da:	2301      	movs	r3, #1
 80079dc:	e7f0      	b.n	80079c0 <_svfiprintf_r+0x194>
 80079de:	ab03      	add	r3, sp, #12
 80079e0:	9300      	str	r3, [sp, #0]
 80079e2:	462a      	mov	r2, r5
 80079e4:	4b0f      	ldr	r3, [pc, #60]	; (8007a24 <_svfiprintf_r+0x1f8>)
 80079e6:	a904      	add	r1, sp, #16
 80079e8:	4638      	mov	r0, r7
 80079ea:	f7fe f80f 	bl	8005a0c <_printf_float>
 80079ee:	1c42      	adds	r2, r0, #1
 80079f0:	4606      	mov	r6, r0
 80079f2:	d1d6      	bne.n	80079a2 <_svfiprintf_r+0x176>
 80079f4:	89ab      	ldrh	r3, [r5, #12]
 80079f6:	065b      	lsls	r3, r3, #25
 80079f8:	f53f af2c 	bmi.w	8007854 <_svfiprintf_r+0x28>
 80079fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079fe:	b01d      	add	sp, #116	; 0x74
 8007a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a04:	ab03      	add	r3, sp, #12
 8007a06:	9300      	str	r3, [sp, #0]
 8007a08:	462a      	mov	r2, r5
 8007a0a:	4b06      	ldr	r3, [pc, #24]	; (8007a24 <_svfiprintf_r+0x1f8>)
 8007a0c:	a904      	add	r1, sp, #16
 8007a0e:	4638      	mov	r0, r7
 8007a10:	f7fe faa0 	bl	8005f54 <_printf_i>
 8007a14:	e7eb      	b.n	80079ee <_svfiprintf_r+0x1c2>
 8007a16:	bf00      	nop
 8007a18:	08008864 	.word	0x08008864
 8007a1c:	0800886e 	.word	0x0800886e
 8007a20:	08005a0d 	.word	0x08005a0d
 8007a24:	08007775 	.word	0x08007775
 8007a28:	0800886a 	.word	0x0800886a

08007a2c <_sbrk_r>:
 8007a2c:	b538      	push	{r3, r4, r5, lr}
 8007a2e:	4d06      	ldr	r5, [pc, #24]	; (8007a48 <_sbrk_r+0x1c>)
 8007a30:	2300      	movs	r3, #0
 8007a32:	4604      	mov	r4, r0
 8007a34:	4608      	mov	r0, r1
 8007a36:	602b      	str	r3, [r5, #0]
 8007a38:	f7f9 fe74 	bl	8001724 <_sbrk>
 8007a3c:	1c43      	adds	r3, r0, #1
 8007a3e:	d102      	bne.n	8007a46 <_sbrk_r+0x1a>
 8007a40:	682b      	ldr	r3, [r5, #0]
 8007a42:	b103      	cbz	r3, 8007a46 <_sbrk_r+0x1a>
 8007a44:	6023      	str	r3, [r4, #0]
 8007a46:	bd38      	pop	{r3, r4, r5, pc}
 8007a48:	200006cc 	.word	0x200006cc

08007a4c <__assert_func>:
 8007a4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a4e:	4614      	mov	r4, r2
 8007a50:	461a      	mov	r2, r3
 8007a52:	4b09      	ldr	r3, [pc, #36]	; (8007a78 <__assert_func+0x2c>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4605      	mov	r5, r0
 8007a58:	68d8      	ldr	r0, [r3, #12]
 8007a5a:	b14c      	cbz	r4, 8007a70 <__assert_func+0x24>
 8007a5c:	4b07      	ldr	r3, [pc, #28]	; (8007a7c <__assert_func+0x30>)
 8007a5e:	9100      	str	r1, [sp, #0]
 8007a60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007a64:	4906      	ldr	r1, [pc, #24]	; (8007a80 <__assert_func+0x34>)
 8007a66:	462b      	mov	r3, r5
 8007a68:	f000 f80e 	bl	8007a88 <fiprintf>
 8007a6c:	f000 faa4 	bl	8007fb8 <abort>
 8007a70:	4b04      	ldr	r3, [pc, #16]	; (8007a84 <__assert_func+0x38>)
 8007a72:	461c      	mov	r4, r3
 8007a74:	e7f3      	b.n	8007a5e <__assert_func+0x12>
 8007a76:	bf00      	nop
 8007a78:	2000000c 	.word	0x2000000c
 8007a7c:	08008875 	.word	0x08008875
 8007a80:	08008882 	.word	0x08008882
 8007a84:	080088b0 	.word	0x080088b0

08007a88 <fiprintf>:
 8007a88:	b40e      	push	{r1, r2, r3}
 8007a8a:	b503      	push	{r0, r1, lr}
 8007a8c:	4601      	mov	r1, r0
 8007a8e:	ab03      	add	r3, sp, #12
 8007a90:	4805      	ldr	r0, [pc, #20]	; (8007aa8 <fiprintf+0x20>)
 8007a92:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a96:	6800      	ldr	r0, [r0, #0]
 8007a98:	9301      	str	r3, [sp, #4]
 8007a9a:	f000 f88f 	bl	8007bbc <_vfiprintf_r>
 8007a9e:	b002      	add	sp, #8
 8007aa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007aa4:	b003      	add	sp, #12
 8007aa6:	4770      	bx	lr
 8007aa8:	2000000c 	.word	0x2000000c

08007aac <__ascii_mbtowc>:
 8007aac:	b082      	sub	sp, #8
 8007aae:	b901      	cbnz	r1, 8007ab2 <__ascii_mbtowc+0x6>
 8007ab0:	a901      	add	r1, sp, #4
 8007ab2:	b142      	cbz	r2, 8007ac6 <__ascii_mbtowc+0x1a>
 8007ab4:	b14b      	cbz	r3, 8007aca <__ascii_mbtowc+0x1e>
 8007ab6:	7813      	ldrb	r3, [r2, #0]
 8007ab8:	600b      	str	r3, [r1, #0]
 8007aba:	7812      	ldrb	r2, [r2, #0]
 8007abc:	1e10      	subs	r0, r2, #0
 8007abe:	bf18      	it	ne
 8007ac0:	2001      	movne	r0, #1
 8007ac2:	b002      	add	sp, #8
 8007ac4:	4770      	bx	lr
 8007ac6:	4610      	mov	r0, r2
 8007ac8:	e7fb      	b.n	8007ac2 <__ascii_mbtowc+0x16>
 8007aca:	f06f 0001 	mvn.w	r0, #1
 8007ace:	e7f8      	b.n	8007ac2 <__ascii_mbtowc+0x16>

08007ad0 <memmove>:
 8007ad0:	4288      	cmp	r0, r1
 8007ad2:	b510      	push	{r4, lr}
 8007ad4:	eb01 0402 	add.w	r4, r1, r2
 8007ad8:	d902      	bls.n	8007ae0 <memmove+0x10>
 8007ada:	4284      	cmp	r4, r0
 8007adc:	4623      	mov	r3, r4
 8007ade:	d807      	bhi.n	8007af0 <memmove+0x20>
 8007ae0:	1e43      	subs	r3, r0, #1
 8007ae2:	42a1      	cmp	r1, r4
 8007ae4:	d008      	beq.n	8007af8 <memmove+0x28>
 8007ae6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007aea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007aee:	e7f8      	b.n	8007ae2 <memmove+0x12>
 8007af0:	4402      	add	r2, r0
 8007af2:	4601      	mov	r1, r0
 8007af4:	428a      	cmp	r2, r1
 8007af6:	d100      	bne.n	8007afa <memmove+0x2a>
 8007af8:	bd10      	pop	{r4, pc}
 8007afa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007afe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007b02:	e7f7      	b.n	8007af4 <memmove+0x24>

08007b04 <__malloc_lock>:
 8007b04:	4801      	ldr	r0, [pc, #4]	; (8007b0c <__malloc_lock+0x8>)
 8007b06:	f000 bc17 	b.w	8008338 <__retarget_lock_acquire_recursive>
 8007b0a:	bf00      	nop
 8007b0c:	200006d4 	.word	0x200006d4

08007b10 <__malloc_unlock>:
 8007b10:	4801      	ldr	r0, [pc, #4]	; (8007b18 <__malloc_unlock+0x8>)
 8007b12:	f000 bc12 	b.w	800833a <__retarget_lock_release_recursive>
 8007b16:	bf00      	nop
 8007b18:	200006d4 	.word	0x200006d4

08007b1c <_realloc_r>:
 8007b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b1e:	4607      	mov	r7, r0
 8007b20:	4614      	mov	r4, r2
 8007b22:	460e      	mov	r6, r1
 8007b24:	b921      	cbnz	r1, 8007b30 <_realloc_r+0x14>
 8007b26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007b2a:	4611      	mov	r1, r2
 8007b2c:	f7ff bdc8 	b.w	80076c0 <_malloc_r>
 8007b30:	b922      	cbnz	r2, 8007b3c <_realloc_r+0x20>
 8007b32:	f7ff fd75 	bl	8007620 <_free_r>
 8007b36:	4625      	mov	r5, r4
 8007b38:	4628      	mov	r0, r5
 8007b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b3c:	f000 fc62 	bl	8008404 <_malloc_usable_size_r>
 8007b40:	42a0      	cmp	r0, r4
 8007b42:	d20f      	bcs.n	8007b64 <_realloc_r+0x48>
 8007b44:	4621      	mov	r1, r4
 8007b46:	4638      	mov	r0, r7
 8007b48:	f7ff fdba 	bl	80076c0 <_malloc_r>
 8007b4c:	4605      	mov	r5, r0
 8007b4e:	2800      	cmp	r0, #0
 8007b50:	d0f2      	beq.n	8007b38 <_realloc_r+0x1c>
 8007b52:	4631      	mov	r1, r6
 8007b54:	4622      	mov	r2, r4
 8007b56:	f7ff f9c7 	bl	8006ee8 <memcpy>
 8007b5a:	4631      	mov	r1, r6
 8007b5c:	4638      	mov	r0, r7
 8007b5e:	f7ff fd5f 	bl	8007620 <_free_r>
 8007b62:	e7e9      	b.n	8007b38 <_realloc_r+0x1c>
 8007b64:	4635      	mov	r5, r6
 8007b66:	e7e7      	b.n	8007b38 <_realloc_r+0x1c>

08007b68 <__sfputc_r>:
 8007b68:	6893      	ldr	r3, [r2, #8]
 8007b6a:	3b01      	subs	r3, #1
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	b410      	push	{r4}
 8007b70:	6093      	str	r3, [r2, #8]
 8007b72:	da08      	bge.n	8007b86 <__sfputc_r+0x1e>
 8007b74:	6994      	ldr	r4, [r2, #24]
 8007b76:	42a3      	cmp	r3, r4
 8007b78:	db01      	blt.n	8007b7e <__sfputc_r+0x16>
 8007b7a:	290a      	cmp	r1, #10
 8007b7c:	d103      	bne.n	8007b86 <__sfputc_r+0x1e>
 8007b7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b82:	f000 b94b 	b.w	8007e1c <__swbuf_r>
 8007b86:	6813      	ldr	r3, [r2, #0]
 8007b88:	1c58      	adds	r0, r3, #1
 8007b8a:	6010      	str	r0, [r2, #0]
 8007b8c:	7019      	strb	r1, [r3, #0]
 8007b8e:	4608      	mov	r0, r1
 8007b90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b94:	4770      	bx	lr

08007b96 <__sfputs_r>:
 8007b96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b98:	4606      	mov	r6, r0
 8007b9a:	460f      	mov	r7, r1
 8007b9c:	4614      	mov	r4, r2
 8007b9e:	18d5      	adds	r5, r2, r3
 8007ba0:	42ac      	cmp	r4, r5
 8007ba2:	d101      	bne.n	8007ba8 <__sfputs_r+0x12>
 8007ba4:	2000      	movs	r0, #0
 8007ba6:	e007      	b.n	8007bb8 <__sfputs_r+0x22>
 8007ba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bac:	463a      	mov	r2, r7
 8007bae:	4630      	mov	r0, r6
 8007bb0:	f7ff ffda 	bl	8007b68 <__sfputc_r>
 8007bb4:	1c43      	adds	r3, r0, #1
 8007bb6:	d1f3      	bne.n	8007ba0 <__sfputs_r+0xa>
 8007bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007bbc <_vfiprintf_r>:
 8007bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bc0:	460d      	mov	r5, r1
 8007bc2:	b09d      	sub	sp, #116	; 0x74
 8007bc4:	4614      	mov	r4, r2
 8007bc6:	4698      	mov	r8, r3
 8007bc8:	4606      	mov	r6, r0
 8007bca:	b118      	cbz	r0, 8007bd4 <_vfiprintf_r+0x18>
 8007bcc:	6983      	ldr	r3, [r0, #24]
 8007bce:	b90b      	cbnz	r3, 8007bd4 <_vfiprintf_r+0x18>
 8007bd0:	f000 fb14 	bl	80081fc <__sinit>
 8007bd4:	4b89      	ldr	r3, [pc, #548]	; (8007dfc <_vfiprintf_r+0x240>)
 8007bd6:	429d      	cmp	r5, r3
 8007bd8:	d11b      	bne.n	8007c12 <_vfiprintf_r+0x56>
 8007bda:	6875      	ldr	r5, [r6, #4]
 8007bdc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007bde:	07d9      	lsls	r1, r3, #31
 8007be0:	d405      	bmi.n	8007bee <_vfiprintf_r+0x32>
 8007be2:	89ab      	ldrh	r3, [r5, #12]
 8007be4:	059a      	lsls	r2, r3, #22
 8007be6:	d402      	bmi.n	8007bee <_vfiprintf_r+0x32>
 8007be8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007bea:	f000 fba5 	bl	8008338 <__retarget_lock_acquire_recursive>
 8007bee:	89ab      	ldrh	r3, [r5, #12]
 8007bf0:	071b      	lsls	r3, r3, #28
 8007bf2:	d501      	bpl.n	8007bf8 <_vfiprintf_r+0x3c>
 8007bf4:	692b      	ldr	r3, [r5, #16]
 8007bf6:	b9eb      	cbnz	r3, 8007c34 <_vfiprintf_r+0x78>
 8007bf8:	4629      	mov	r1, r5
 8007bfa:	4630      	mov	r0, r6
 8007bfc:	f000 f96e 	bl	8007edc <__swsetup_r>
 8007c00:	b1c0      	cbz	r0, 8007c34 <_vfiprintf_r+0x78>
 8007c02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c04:	07dc      	lsls	r4, r3, #31
 8007c06:	d50e      	bpl.n	8007c26 <_vfiprintf_r+0x6a>
 8007c08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c0c:	b01d      	add	sp, #116	; 0x74
 8007c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c12:	4b7b      	ldr	r3, [pc, #492]	; (8007e00 <_vfiprintf_r+0x244>)
 8007c14:	429d      	cmp	r5, r3
 8007c16:	d101      	bne.n	8007c1c <_vfiprintf_r+0x60>
 8007c18:	68b5      	ldr	r5, [r6, #8]
 8007c1a:	e7df      	b.n	8007bdc <_vfiprintf_r+0x20>
 8007c1c:	4b79      	ldr	r3, [pc, #484]	; (8007e04 <_vfiprintf_r+0x248>)
 8007c1e:	429d      	cmp	r5, r3
 8007c20:	bf08      	it	eq
 8007c22:	68f5      	ldreq	r5, [r6, #12]
 8007c24:	e7da      	b.n	8007bdc <_vfiprintf_r+0x20>
 8007c26:	89ab      	ldrh	r3, [r5, #12]
 8007c28:	0598      	lsls	r0, r3, #22
 8007c2a:	d4ed      	bmi.n	8007c08 <_vfiprintf_r+0x4c>
 8007c2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c2e:	f000 fb84 	bl	800833a <__retarget_lock_release_recursive>
 8007c32:	e7e9      	b.n	8007c08 <_vfiprintf_r+0x4c>
 8007c34:	2300      	movs	r3, #0
 8007c36:	9309      	str	r3, [sp, #36]	; 0x24
 8007c38:	2320      	movs	r3, #32
 8007c3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c42:	2330      	movs	r3, #48	; 0x30
 8007c44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007e08 <_vfiprintf_r+0x24c>
 8007c48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c4c:	f04f 0901 	mov.w	r9, #1
 8007c50:	4623      	mov	r3, r4
 8007c52:	469a      	mov	sl, r3
 8007c54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c58:	b10a      	cbz	r2, 8007c5e <_vfiprintf_r+0xa2>
 8007c5a:	2a25      	cmp	r2, #37	; 0x25
 8007c5c:	d1f9      	bne.n	8007c52 <_vfiprintf_r+0x96>
 8007c5e:	ebba 0b04 	subs.w	fp, sl, r4
 8007c62:	d00b      	beq.n	8007c7c <_vfiprintf_r+0xc0>
 8007c64:	465b      	mov	r3, fp
 8007c66:	4622      	mov	r2, r4
 8007c68:	4629      	mov	r1, r5
 8007c6a:	4630      	mov	r0, r6
 8007c6c:	f7ff ff93 	bl	8007b96 <__sfputs_r>
 8007c70:	3001      	adds	r0, #1
 8007c72:	f000 80aa 	beq.w	8007dca <_vfiprintf_r+0x20e>
 8007c76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c78:	445a      	add	r2, fp
 8007c7a:	9209      	str	r2, [sp, #36]	; 0x24
 8007c7c:	f89a 3000 	ldrb.w	r3, [sl]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f000 80a2 	beq.w	8007dca <_vfiprintf_r+0x20e>
 8007c86:	2300      	movs	r3, #0
 8007c88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c90:	f10a 0a01 	add.w	sl, sl, #1
 8007c94:	9304      	str	r3, [sp, #16]
 8007c96:	9307      	str	r3, [sp, #28]
 8007c98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c9c:	931a      	str	r3, [sp, #104]	; 0x68
 8007c9e:	4654      	mov	r4, sl
 8007ca0:	2205      	movs	r2, #5
 8007ca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ca6:	4858      	ldr	r0, [pc, #352]	; (8007e08 <_vfiprintf_r+0x24c>)
 8007ca8:	f7f8 fa9a 	bl	80001e0 <memchr>
 8007cac:	9a04      	ldr	r2, [sp, #16]
 8007cae:	b9d8      	cbnz	r0, 8007ce8 <_vfiprintf_r+0x12c>
 8007cb0:	06d1      	lsls	r1, r2, #27
 8007cb2:	bf44      	itt	mi
 8007cb4:	2320      	movmi	r3, #32
 8007cb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cba:	0713      	lsls	r3, r2, #28
 8007cbc:	bf44      	itt	mi
 8007cbe:	232b      	movmi	r3, #43	; 0x2b
 8007cc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cc4:	f89a 3000 	ldrb.w	r3, [sl]
 8007cc8:	2b2a      	cmp	r3, #42	; 0x2a
 8007cca:	d015      	beq.n	8007cf8 <_vfiprintf_r+0x13c>
 8007ccc:	9a07      	ldr	r2, [sp, #28]
 8007cce:	4654      	mov	r4, sl
 8007cd0:	2000      	movs	r0, #0
 8007cd2:	f04f 0c0a 	mov.w	ip, #10
 8007cd6:	4621      	mov	r1, r4
 8007cd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cdc:	3b30      	subs	r3, #48	; 0x30
 8007cde:	2b09      	cmp	r3, #9
 8007ce0:	d94e      	bls.n	8007d80 <_vfiprintf_r+0x1c4>
 8007ce2:	b1b0      	cbz	r0, 8007d12 <_vfiprintf_r+0x156>
 8007ce4:	9207      	str	r2, [sp, #28]
 8007ce6:	e014      	b.n	8007d12 <_vfiprintf_r+0x156>
 8007ce8:	eba0 0308 	sub.w	r3, r0, r8
 8007cec:	fa09 f303 	lsl.w	r3, r9, r3
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	9304      	str	r3, [sp, #16]
 8007cf4:	46a2      	mov	sl, r4
 8007cf6:	e7d2      	b.n	8007c9e <_vfiprintf_r+0xe2>
 8007cf8:	9b03      	ldr	r3, [sp, #12]
 8007cfa:	1d19      	adds	r1, r3, #4
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	9103      	str	r1, [sp, #12]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	bfbb      	ittet	lt
 8007d04:	425b      	neglt	r3, r3
 8007d06:	f042 0202 	orrlt.w	r2, r2, #2
 8007d0a:	9307      	strge	r3, [sp, #28]
 8007d0c:	9307      	strlt	r3, [sp, #28]
 8007d0e:	bfb8      	it	lt
 8007d10:	9204      	strlt	r2, [sp, #16]
 8007d12:	7823      	ldrb	r3, [r4, #0]
 8007d14:	2b2e      	cmp	r3, #46	; 0x2e
 8007d16:	d10c      	bne.n	8007d32 <_vfiprintf_r+0x176>
 8007d18:	7863      	ldrb	r3, [r4, #1]
 8007d1a:	2b2a      	cmp	r3, #42	; 0x2a
 8007d1c:	d135      	bne.n	8007d8a <_vfiprintf_r+0x1ce>
 8007d1e:	9b03      	ldr	r3, [sp, #12]
 8007d20:	1d1a      	adds	r2, r3, #4
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	9203      	str	r2, [sp, #12]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	bfb8      	it	lt
 8007d2a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007d2e:	3402      	adds	r4, #2
 8007d30:	9305      	str	r3, [sp, #20]
 8007d32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007e18 <_vfiprintf_r+0x25c>
 8007d36:	7821      	ldrb	r1, [r4, #0]
 8007d38:	2203      	movs	r2, #3
 8007d3a:	4650      	mov	r0, sl
 8007d3c:	f7f8 fa50 	bl	80001e0 <memchr>
 8007d40:	b140      	cbz	r0, 8007d54 <_vfiprintf_r+0x198>
 8007d42:	2340      	movs	r3, #64	; 0x40
 8007d44:	eba0 000a 	sub.w	r0, r0, sl
 8007d48:	fa03 f000 	lsl.w	r0, r3, r0
 8007d4c:	9b04      	ldr	r3, [sp, #16]
 8007d4e:	4303      	orrs	r3, r0
 8007d50:	3401      	adds	r4, #1
 8007d52:	9304      	str	r3, [sp, #16]
 8007d54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d58:	482c      	ldr	r0, [pc, #176]	; (8007e0c <_vfiprintf_r+0x250>)
 8007d5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d5e:	2206      	movs	r2, #6
 8007d60:	f7f8 fa3e 	bl	80001e0 <memchr>
 8007d64:	2800      	cmp	r0, #0
 8007d66:	d03f      	beq.n	8007de8 <_vfiprintf_r+0x22c>
 8007d68:	4b29      	ldr	r3, [pc, #164]	; (8007e10 <_vfiprintf_r+0x254>)
 8007d6a:	bb1b      	cbnz	r3, 8007db4 <_vfiprintf_r+0x1f8>
 8007d6c:	9b03      	ldr	r3, [sp, #12]
 8007d6e:	3307      	adds	r3, #7
 8007d70:	f023 0307 	bic.w	r3, r3, #7
 8007d74:	3308      	adds	r3, #8
 8007d76:	9303      	str	r3, [sp, #12]
 8007d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d7a:	443b      	add	r3, r7
 8007d7c:	9309      	str	r3, [sp, #36]	; 0x24
 8007d7e:	e767      	b.n	8007c50 <_vfiprintf_r+0x94>
 8007d80:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d84:	460c      	mov	r4, r1
 8007d86:	2001      	movs	r0, #1
 8007d88:	e7a5      	b.n	8007cd6 <_vfiprintf_r+0x11a>
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	3401      	adds	r4, #1
 8007d8e:	9305      	str	r3, [sp, #20]
 8007d90:	4619      	mov	r1, r3
 8007d92:	f04f 0c0a 	mov.w	ip, #10
 8007d96:	4620      	mov	r0, r4
 8007d98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d9c:	3a30      	subs	r2, #48	; 0x30
 8007d9e:	2a09      	cmp	r2, #9
 8007da0:	d903      	bls.n	8007daa <_vfiprintf_r+0x1ee>
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d0c5      	beq.n	8007d32 <_vfiprintf_r+0x176>
 8007da6:	9105      	str	r1, [sp, #20]
 8007da8:	e7c3      	b.n	8007d32 <_vfiprintf_r+0x176>
 8007daa:	fb0c 2101 	mla	r1, ip, r1, r2
 8007dae:	4604      	mov	r4, r0
 8007db0:	2301      	movs	r3, #1
 8007db2:	e7f0      	b.n	8007d96 <_vfiprintf_r+0x1da>
 8007db4:	ab03      	add	r3, sp, #12
 8007db6:	9300      	str	r3, [sp, #0]
 8007db8:	462a      	mov	r2, r5
 8007dba:	4b16      	ldr	r3, [pc, #88]	; (8007e14 <_vfiprintf_r+0x258>)
 8007dbc:	a904      	add	r1, sp, #16
 8007dbe:	4630      	mov	r0, r6
 8007dc0:	f7fd fe24 	bl	8005a0c <_printf_float>
 8007dc4:	4607      	mov	r7, r0
 8007dc6:	1c78      	adds	r0, r7, #1
 8007dc8:	d1d6      	bne.n	8007d78 <_vfiprintf_r+0x1bc>
 8007dca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007dcc:	07d9      	lsls	r1, r3, #31
 8007dce:	d405      	bmi.n	8007ddc <_vfiprintf_r+0x220>
 8007dd0:	89ab      	ldrh	r3, [r5, #12]
 8007dd2:	059a      	lsls	r2, r3, #22
 8007dd4:	d402      	bmi.n	8007ddc <_vfiprintf_r+0x220>
 8007dd6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007dd8:	f000 faaf 	bl	800833a <__retarget_lock_release_recursive>
 8007ddc:	89ab      	ldrh	r3, [r5, #12]
 8007dde:	065b      	lsls	r3, r3, #25
 8007de0:	f53f af12 	bmi.w	8007c08 <_vfiprintf_r+0x4c>
 8007de4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007de6:	e711      	b.n	8007c0c <_vfiprintf_r+0x50>
 8007de8:	ab03      	add	r3, sp, #12
 8007dea:	9300      	str	r3, [sp, #0]
 8007dec:	462a      	mov	r2, r5
 8007dee:	4b09      	ldr	r3, [pc, #36]	; (8007e14 <_vfiprintf_r+0x258>)
 8007df0:	a904      	add	r1, sp, #16
 8007df2:	4630      	mov	r0, r6
 8007df4:	f7fe f8ae 	bl	8005f54 <_printf_i>
 8007df8:	e7e4      	b.n	8007dc4 <_vfiprintf_r+0x208>
 8007dfa:	bf00      	nop
 8007dfc:	080089dc 	.word	0x080089dc
 8007e00:	080089fc 	.word	0x080089fc
 8007e04:	080089bc 	.word	0x080089bc
 8007e08:	08008864 	.word	0x08008864
 8007e0c:	0800886e 	.word	0x0800886e
 8007e10:	08005a0d 	.word	0x08005a0d
 8007e14:	08007b97 	.word	0x08007b97
 8007e18:	0800886a 	.word	0x0800886a

08007e1c <__swbuf_r>:
 8007e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e1e:	460e      	mov	r6, r1
 8007e20:	4614      	mov	r4, r2
 8007e22:	4605      	mov	r5, r0
 8007e24:	b118      	cbz	r0, 8007e2e <__swbuf_r+0x12>
 8007e26:	6983      	ldr	r3, [r0, #24]
 8007e28:	b90b      	cbnz	r3, 8007e2e <__swbuf_r+0x12>
 8007e2a:	f000 f9e7 	bl	80081fc <__sinit>
 8007e2e:	4b21      	ldr	r3, [pc, #132]	; (8007eb4 <__swbuf_r+0x98>)
 8007e30:	429c      	cmp	r4, r3
 8007e32:	d12b      	bne.n	8007e8c <__swbuf_r+0x70>
 8007e34:	686c      	ldr	r4, [r5, #4]
 8007e36:	69a3      	ldr	r3, [r4, #24]
 8007e38:	60a3      	str	r3, [r4, #8]
 8007e3a:	89a3      	ldrh	r3, [r4, #12]
 8007e3c:	071a      	lsls	r2, r3, #28
 8007e3e:	d52f      	bpl.n	8007ea0 <__swbuf_r+0x84>
 8007e40:	6923      	ldr	r3, [r4, #16]
 8007e42:	b36b      	cbz	r3, 8007ea0 <__swbuf_r+0x84>
 8007e44:	6923      	ldr	r3, [r4, #16]
 8007e46:	6820      	ldr	r0, [r4, #0]
 8007e48:	1ac0      	subs	r0, r0, r3
 8007e4a:	6963      	ldr	r3, [r4, #20]
 8007e4c:	b2f6      	uxtb	r6, r6
 8007e4e:	4283      	cmp	r3, r0
 8007e50:	4637      	mov	r7, r6
 8007e52:	dc04      	bgt.n	8007e5e <__swbuf_r+0x42>
 8007e54:	4621      	mov	r1, r4
 8007e56:	4628      	mov	r0, r5
 8007e58:	f000 f93c 	bl	80080d4 <_fflush_r>
 8007e5c:	bb30      	cbnz	r0, 8007eac <__swbuf_r+0x90>
 8007e5e:	68a3      	ldr	r3, [r4, #8]
 8007e60:	3b01      	subs	r3, #1
 8007e62:	60a3      	str	r3, [r4, #8]
 8007e64:	6823      	ldr	r3, [r4, #0]
 8007e66:	1c5a      	adds	r2, r3, #1
 8007e68:	6022      	str	r2, [r4, #0]
 8007e6a:	701e      	strb	r6, [r3, #0]
 8007e6c:	6963      	ldr	r3, [r4, #20]
 8007e6e:	3001      	adds	r0, #1
 8007e70:	4283      	cmp	r3, r0
 8007e72:	d004      	beq.n	8007e7e <__swbuf_r+0x62>
 8007e74:	89a3      	ldrh	r3, [r4, #12]
 8007e76:	07db      	lsls	r3, r3, #31
 8007e78:	d506      	bpl.n	8007e88 <__swbuf_r+0x6c>
 8007e7a:	2e0a      	cmp	r6, #10
 8007e7c:	d104      	bne.n	8007e88 <__swbuf_r+0x6c>
 8007e7e:	4621      	mov	r1, r4
 8007e80:	4628      	mov	r0, r5
 8007e82:	f000 f927 	bl	80080d4 <_fflush_r>
 8007e86:	b988      	cbnz	r0, 8007eac <__swbuf_r+0x90>
 8007e88:	4638      	mov	r0, r7
 8007e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e8c:	4b0a      	ldr	r3, [pc, #40]	; (8007eb8 <__swbuf_r+0x9c>)
 8007e8e:	429c      	cmp	r4, r3
 8007e90:	d101      	bne.n	8007e96 <__swbuf_r+0x7a>
 8007e92:	68ac      	ldr	r4, [r5, #8]
 8007e94:	e7cf      	b.n	8007e36 <__swbuf_r+0x1a>
 8007e96:	4b09      	ldr	r3, [pc, #36]	; (8007ebc <__swbuf_r+0xa0>)
 8007e98:	429c      	cmp	r4, r3
 8007e9a:	bf08      	it	eq
 8007e9c:	68ec      	ldreq	r4, [r5, #12]
 8007e9e:	e7ca      	b.n	8007e36 <__swbuf_r+0x1a>
 8007ea0:	4621      	mov	r1, r4
 8007ea2:	4628      	mov	r0, r5
 8007ea4:	f000 f81a 	bl	8007edc <__swsetup_r>
 8007ea8:	2800      	cmp	r0, #0
 8007eaa:	d0cb      	beq.n	8007e44 <__swbuf_r+0x28>
 8007eac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007eb0:	e7ea      	b.n	8007e88 <__swbuf_r+0x6c>
 8007eb2:	bf00      	nop
 8007eb4:	080089dc 	.word	0x080089dc
 8007eb8:	080089fc 	.word	0x080089fc
 8007ebc:	080089bc 	.word	0x080089bc

08007ec0 <__ascii_wctomb>:
 8007ec0:	b149      	cbz	r1, 8007ed6 <__ascii_wctomb+0x16>
 8007ec2:	2aff      	cmp	r2, #255	; 0xff
 8007ec4:	bf85      	ittet	hi
 8007ec6:	238a      	movhi	r3, #138	; 0x8a
 8007ec8:	6003      	strhi	r3, [r0, #0]
 8007eca:	700a      	strbls	r2, [r1, #0]
 8007ecc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007ed0:	bf98      	it	ls
 8007ed2:	2001      	movls	r0, #1
 8007ed4:	4770      	bx	lr
 8007ed6:	4608      	mov	r0, r1
 8007ed8:	4770      	bx	lr
	...

08007edc <__swsetup_r>:
 8007edc:	4b32      	ldr	r3, [pc, #200]	; (8007fa8 <__swsetup_r+0xcc>)
 8007ede:	b570      	push	{r4, r5, r6, lr}
 8007ee0:	681d      	ldr	r5, [r3, #0]
 8007ee2:	4606      	mov	r6, r0
 8007ee4:	460c      	mov	r4, r1
 8007ee6:	b125      	cbz	r5, 8007ef2 <__swsetup_r+0x16>
 8007ee8:	69ab      	ldr	r3, [r5, #24]
 8007eea:	b913      	cbnz	r3, 8007ef2 <__swsetup_r+0x16>
 8007eec:	4628      	mov	r0, r5
 8007eee:	f000 f985 	bl	80081fc <__sinit>
 8007ef2:	4b2e      	ldr	r3, [pc, #184]	; (8007fac <__swsetup_r+0xd0>)
 8007ef4:	429c      	cmp	r4, r3
 8007ef6:	d10f      	bne.n	8007f18 <__swsetup_r+0x3c>
 8007ef8:	686c      	ldr	r4, [r5, #4]
 8007efa:	89a3      	ldrh	r3, [r4, #12]
 8007efc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f00:	0719      	lsls	r1, r3, #28
 8007f02:	d42c      	bmi.n	8007f5e <__swsetup_r+0x82>
 8007f04:	06dd      	lsls	r5, r3, #27
 8007f06:	d411      	bmi.n	8007f2c <__swsetup_r+0x50>
 8007f08:	2309      	movs	r3, #9
 8007f0a:	6033      	str	r3, [r6, #0]
 8007f0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007f10:	81a3      	strh	r3, [r4, #12]
 8007f12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f16:	e03e      	b.n	8007f96 <__swsetup_r+0xba>
 8007f18:	4b25      	ldr	r3, [pc, #148]	; (8007fb0 <__swsetup_r+0xd4>)
 8007f1a:	429c      	cmp	r4, r3
 8007f1c:	d101      	bne.n	8007f22 <__swsetup_r+0x46>
 8007f1e:	68ac      	ldr	r4, [r5, #8]
 8007f20:	e7eb      	b.n	8007efa <__swsetup_r+0x1e>
 8007f22:	4b24      	ldr	r3, [pc, #144]	; (8007fb4 <__swsetup_r+0xd8>)
 8007f24:	429c      	cmp	r4, r3
 8007f26:	bf08      	it	eq
 8007f28:	68ec      	ldreq	r4, [r5, #12]
 8007f2a:	e7e6      	b.n	8007efa <__swsetup_r+0x1e>
 8007f2c:	0758      	lsls	r0, r3, #29
 8007f2e:	d512      	bpl.n	8007f56 <__swsetup_r+0x7a>
 8007f30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f32:	b141      	cbz	r1, 8007f46 <__swsetup_r+0x6a>
 8007f34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f38:	4299      	cmp	r1, r3
 8007f3a:	d002      	beq.n	8007f42 <__swsetup_r+0x66>
 8007f3c:	4630      	mov	r0, r6
 8007f3e:	f7ff fb6f 	bl	8007620 <_free_r>
 8007f42:	2300      	movs	r3, #0
 8007f44:	6363      	str	r3, [r4, #52]	; 0x34
 8007f46:	89a3      	ldrh	r3, [r4, #12]
 8007f48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007f4c:	81a3      	strh	r3, [r4, #12]
 8007f4e:	2300      	movs	r3, #0
 8007f50:	6063      	str	r3, [r4, #4]
 8007f52:	6923      	ldr	r3, [r4, #16]
 8007f54:	6023      	str	r3, [r4, #0]
 8007f56:	89a3      	ldrh	r3, [r4, #12]
 8007f58:	f043 0308 	orr.w	r3, r3, #8
 8007f5c:	81a3      	strh	r3, [r4, #12]
 8007f5e:	6923      	ldr	r3, [r4, #16]
 8007f60:	b94b      	cbnz	r3, 8007f76 <__swsetup_r+0x9a>
 8007f62:	89a3      	ldrh	r3, [r4, #12]
 8007f64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007f68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f6c:	d003      	beq.n	8007f76 <__swsetup_r+0x9a>
 8007f6e:	4621      	mov	r1, r4
 8007f70:	4630      	mov	r0, r6
 8007f72:	f000 fa07 	bl	8008384 <__smakebuf_r>
 8007f76:	89a0      	ldrh	r0, [r4, #12]
 8007f78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f7c:	f010 0301 	ands.w	r3, r0, #1
 8007f80:	d00a      	beq.n	8007f98 <__swsetup_r+0xbc>
 8007f82:	2300      	movs	r3, #0
 8007f84:	60a3      	str	r3, [r4, #8]
 8007f86:	6963      	ldr	r3, [r4, #20]
 8007f88:	425b      	negs	r3, r3
 8007f8a:	61a3      	str	r3, [r4, #24]
 8007f8c:	6923      	ldr	r3, [r4, #16]
 8007f8e:	b943      	cbnz	r3, 8007fa2 <__swsetup_r+0xc6>
 8007f90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007f94:	d1ba      	bne.n	8007f0c <__swsetup_r+0x30>
 8007f96:	bd70      	pop	{r4, r5, r6, pc}
 8007f98:	0781      	lsls	r1, r0, #30
 8007f9a:	bf58      	it	pl
 8007f9c:	6963      	ldrpl	r3, [r4, #20]
 8007f9e:	60a3      	str	r3, [r4, #8]
 8007fa0:	e7f4      	b.n	8007f8c <__swsetup_r+0xb0>
 8007fa2:	2000      	movs	r0, #0
 8007fa4:	e7f7      	b.n	8007f96 <__swsetup_r+0xba>
 8007fa6:	bf00      	nop
 8007fa8:	2000000c 	.word	0x2000000c
 8007fac:	080089dc 	.word	0x080089dc
 8007fb0:	080089fc 	.word	0x080089fc
 8007fb4:	080089bc 	.word	0x080089bc

08007fb8 <abort>:
 8007fb8:	b508      	push	{r3, lr}
 8007fba:	2006      	movs	r0, #6
 8007fbc:	f000 fa52 	bl	8008464 <raise>
 8007fc0:	2001      	movs	r0, #1
 8007fc2:	f7f9 fb37 	bl	8001634 <_exit>
	...

08007fc8 <__sflush_r>:
 8007fc8:	898a      	ldrh	r2, [r1, #12]
 8007fca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fce:	4605      	mov	r5, r0
 8007fd0:	0710      	lsls	r0, r2, #28
 8007fd2:	460c      	mov	r4, r1
 8007fd4:	d458      	bmi.n	8008088 <__sflush_r+0xc0>
 8007fd6:	684b      	ldr	r3, [r1, #4]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	dc05      	bgt.n	8007fe8 <__sflush_r+0x20>
 8007fdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	dc02      	bgt.n	8007fe8 <__sflush_r+0x20>
 8007fe2:	2000      	movs	r0, #0
 8007fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fe8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007fea:	2e00      	cmp	r6, #0
 8007fec:	d0f9      	beq.n	8007fe2 <__sflush_r+0x1a>
 8007fee:	2300      	movs	r3, #0
 8007ff0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ff4:	682f      	ldr	r7, [r5, #0]
 8007ff6:	602b      	str	r3, [r5, #0]
 8007ff8:	d032      	beq.n	8008060 <__sflush_r+0x98>
 8007ffa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ffc:	89a3      	ldrh	r3, [r4, #12]
 8007ffe:	075a      	lsls	r2, r3, #29
 8008000:	d505      	bpl.n	800800e <__sflush_r+0x46>
 8008002:	6863      	ldr	r3, [r4, #4]
 8008004:	1ac0      	subs	r0, r0, r3
 8008006:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008008:	b10b      	cbz	r3, 800800e <__sflush_r+0x46>
 800800a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800800c:	1ac0      	subs	r0, r0, r3
 800800e:	2300      	movs	r3, #0
 8008010:	4602      	mov	r2, r0
 8008012:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008014:	6a21      	ldr	r1, [r4, #32]
 8008016:	4628      	mov	r0, r5
 8008018:	47b0      	blx	r6
 800801a:	1c43      	adds	r3, r0, #1
 800801c:	89a3      	ldrh	r3, [r4, #12]
 800801e:	d106      	bne.n	800802e <__sflush_r+0x66>
 8008020:	6829      	ldr	r1, [r5, #0]
 8008022:	291d      	cmp	r1, #29
 8008024:	d82c      	bhi.n	8008080 <__sflush_r+0xb8>
 8008026:	4a2a      	ldr	r2, [pc, #168]	; (80080d0 <__sflush_r+0x108>)
 8008028:	40ca      	lsrs	r2, r1
 800802a:	07d6      	lsls	r6, r2, #31
 800802c:	d528      	bpl.n	8008080 <__sflush_r+0xb8>
 800802e:	2200      	movs	r2, #0
 8008030:	6062      	str	r2, [r4, #4]
 8008032:	04d9      	lsls	r1, r3, #19
 8008034:	6922      	ldr	r2, [r4, #16]
 8008036:	6022      	str	r2, [r4, #0]
 8008038:	d504      	bpl.n	8008044 <__sflush_r+0x7c>
 800803a:	1c42      	adds	r2, r0, #1
 800803c:	d101      	bne.n	8008042 <__sflush_r+0x7a>
 800803e:	682b      	ldr	r3, [r5, #0]
 8008040:	b903      	cbnz	r3, 8008044 <__sflush_r+0x7c>
 8008042:	6560      	str	r0, [r4, #84]	; 0x54
 8008044:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008046:	602f      	str	r7, [r5, #0]
 8008048:	2900      	cmp	r1, #0
 800804a:	d0ca      	beq.n	8007fe2 <__sflush_r+0x1a>
 800804c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008050:	4299      	cmp	r1, r3
 8008052:	d002      	beq.n	800805a <__sflush_r+0x92>
 8008054:	4628      	mov	r0, r5
 8008056:	f7ff fae3 	bl	8007620 <_free_r>
 800805a:	2000      	movs	r0, #0
 800805c:	6360      	str	r0, [r4, #52]	; 0x34
 800805e:	e7c1      	b.n	8007fe4 <__sflush_r+0x1c>
 8008060:	6a21      	ldr	r1, [r4, #32]
 8008062:	2301      	movs	r3, #1
 8008064:	4628      	mov	r0, r5
 8008066:	47b0      	blx	r6
 8008068:	1c41      	adds	r1, r0, #1
 800806a:	d1c7      	bne.n	8007ffc <__sflush_r+0x34>
 800806c:	682b      	ldr	r3, [r5, #0]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d0c4      	beq.n	8007ffc <__sflush_r+0x34>
 8008072:	2b1d      	cmp	r3, #29
 8008074:	d001      	beq.n	800807a <__sflush_r+0xb2>
 8008076:	2b16      	cmp	r3, #22
 8008078:	d101      	bne.n	800807e <__sflush_r+0xb6>
 800807a:	602f      	str	r7, [r5, #0]
 800807c:	e7b1      	b.n	8007fe2 <__sflush_r+0x1a>
 800807e:	89a3      	ldrh	r3, [r4, #12]
 8008080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008084:	81a3      	strh	r3, [r4, #12]
 8008086:	e7ad      	b.n	8007fe4 <__sflush_r+0x1c>
 8008088:	690f      	ldr	r7, [r1, #16]
 800808a:	2f00      	cmp	r7, #0
 800808c:	d0a9      	beq.n	8007fe2 <__sflush_r+0x1a>
 800808e:	0793      	lsls	r3, r2, #30
 8008090:	680e      	ldr	r6, [r1, #0]
 8008092:	bf08      	it	eq
 8008094:	694b      	ldreq	r3, [r1, #20]
 8008096:	600f      	str	r7, [r1, #0]
 8008098:	bf18      	it	ne
 800809a:	2300      	movne	r3, #0
 800809c:	eba6 0807 	sub.w	r8, r6, r7
 80080a0:	608b      	str	r3, [r1, #8]
 80080a2:	f1b8 0f00 	cmp.w	r8, #0
 80080a6:	dd9c      	ble.n	8007fe2 <__sflush_r+0x1a>
 80080a8:	6a21      	ldr	r1, [r4, #32]
 80080aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80080ac:	4643      	mov	r3, r8
 80080ae:	463a      	mov	r2, r7
 80080b0:	4628      	mov	r0, r5
 80080b2:	47b0      	blx	r6
 80080b4:	2800      	cmp	r0, #0
 80080b6:	dc06      	bgt.n	80080c6 <__sflush_r+0xfe>
 80080b8:	89a3      	ldrh	r3, [r4, #12]
 80080ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080be:	81a3      	strh	r3, [r4, #12]
 80080c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080c4:	e78e      	b.n	8007fe4 <__sflush_r+0x1c>
 80080c6:	4407      	add	r7, r0
 80080c8:	eba8 0800 	sub.w	r8, r8, r0
 80080cc:	e7e9      	b.n	80080a2 <__sflush_r+0xda>
 80080ce:	bf00      	nop
 80080d0:	20400001 	.word	0x20400001

080080d4 <_fflush_r>:
 80080d4:	b538      	push	{r3, r4, r5, lr}
 80080d6:	690b      	ldr	r3, [r1, #16]
 80080d8:	4605      	mov	r5, r0
 80080da:	460c      	mov	r4, r1
 80080dc:	b913      	cbnz	r3, 80080e4 <_fflush_r+0x10>
 80080de:	2500      	movs	r5, #0
 80080e0:	4628      	mov	r0, r5
 80080e2:	bd38      	pop	{r3, r4, r5, pc}
 80080e4:	b118      	cbz	r0, 80080ee <_fflush_r+0x1a>
 80080e6:	6983      	ldr	r3, [r0, #24]
 80080e8:	b90b      	cbnz	r3, 80080ee <_fflush_r+0x1a>
 80080ea:	f000 f887 	bl	80081fc <__sinit>
 80080ee:	4b14      	ldr	r3, [pc, #80]	; (8008140 <_fflush_r+0x6c>)
 80080f0:	429c      	cmp	r4, r3
 80080f2:	d11b      	bne.n	800812c <_fflush_r+0x58>
 80080f4:	686c      	ldr	r4, [r5, #4]
 80080f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d0ef      	beq.n	80080de <_fflush_r+0xa>
 80080fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008100:	07d0      	lsls	r0, r2, #31
 8008102:	d404      	bmi.n	800810e <_fflush_r+0x3a>
 8008104:	0599      	lsls	r1, r3, #22
 8008106:	d402      	bmi.n	800810e <_fflush_r+0x3a>
 8008108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800810a:	f000 f915 	bl	8008338 <__retarget_lock_acquire_recursive>
 800810e:	4628      	mov	r0, r5
 8008110:	4621      	mov	r1, r4
 8008112:	f7ff ff59 	bl	8007fc8 <__sflush_r>
 8008116:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008118:	07da      	lsls	r2, r3, #31
 800811a:	4605      	mov	r5, r0
 800811c:	d4e0      	bmi.n	80080e0 <_fflush_r+0xc>
 800811e:	89a3      	ldrh	r3, [r4, #12]
 8008120:	059b      	lsls	r3, r3, #22
 8008122:	d4dd      	bmi.n	80080e0 <_fflush_r+0xc>
 8008124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008126:	f000 f908 	bl	800833a <__retarget_lock_release_recursive>
 800812a:	e7d9      	b.n	80080e0 <_fflush_r+0xc>
 800812c:	4b05      	ldr	r3, [pc, #20]	; (8008144 <_fflush_r+0x70>)
 800812e:	429c      	cmp	r4, r3
 8008130:	d101      	bne.n	8008136 <_fflush_r+0x62>
 8008132:	68ac      	ldr	r4, [r5, #8]
 8008134:	e7df      	b.n	80080f6 <_fflush_r+0x22>
 8008136:	4b04      	ldr	r3, [pc, #16]	; (8008148 <_fflush_r+0x74>)
 8008138:	429c      	cmp	r4, r3
 800813a:	bf08      	it	eq
 800813c:	68ec      	ldreq	r4, [r5, #12]
 800813e:	e7da      	b.n	80080f6 <_fflush_r+0x22>
 8008140:	080089dc 	.word	0x080089dc
 8008144:	080089fc 	.word	0x080089fc
 8008148:	080089bc 	.word	0x080089bc

0800814c <std>:
 800814c:	2300      	movs	r3, #0
 800814e:	b510      	push	{r4, lr}
 8008150:	4604      	mov	r4, r0
 8008152:	e9c0 3300 	strd	r3, r3, [r0]
 8008156:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800815a:	6083      	str	r3, [r0, #8]
 800815c:	8181      	strh	r1, [r0, #12]
 800815e:	6643      	str	r3, [r0, #100]	; 0x64
 8008160:	81c2      	strh	r2, [r0, #14]
 8008162:	6183      	str	r3, [r0, #24]
 8008164:	4619      	mov	r1, r3
 8008166:	2208      	movs	r2, #8
 8008168:	305c      	adds	r0, #92	; 0x5c
 800816a:	f7fd fba7 	bl	80058bc <memset>
 800816e:	4b05      	ldr	r3, [pc, #20]	; (8008184 <std+0x38>)
 8008170:	6263      	str	r3, [r4, #36]	; 0x24
 8008172:	4b05      	ldr	r3, [pc, #20]	; (8008188 <std+0x3c>)
 8008174:	62a3      	str	r3, [r4, #40]	; 0x28
 8008176:	4b05      	ldr	r3, [pc, #20]	; (800818c <std+0x40>)
 8008178:	62e3      	str	r3, [r4, #44]	; 0x2c
 800817a:	4b05      	ldr	r3, [pc, #20]	; (8008190 <std+0x44>)
 800817c:	6224      	str	r4, [r4, #32]
 800817e:	6323      	str	r3, [r4, #48]	; 0x30
 8008180:	bd10      	pop	{r4, pc}
 8008182:	bf00      	nop
 8008184:	0800849d 	.word	0x0800849d
 8008188:	080084bf 	.word	0x080084bf
 800818c:	080084f7 	.word	0x080084f7
 8008190:	0800851b 	.word	0x0800851b

08008194 <_cleanup_r>:
 8008194:	4901      	ldr	r1, [pc, #4]	; (800819c <_cleanup_r+0x8>)
 8008196:	f000 b8af 	b.w	80082f8 <_fwalk_reent>
 800819a:	bf00      	nop
 800819c:	080080d5 	.word	0x080080d5

080081a0 <__sfmoreglue>:
 80081a0:	b570      	push	{r4, r5, r6, lr}
 80081a2:	1e4a      	subs	r2, r1, #1
 80081a4:	2568      	movs	r5, #104	; 0x68
 80081a6:	4355      	muls	r5, r2
 80081a8:	460e      	mov	r6, r1
 80081aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80081ae:	f7ff fa87 	bl	80076c0 <_malloc_r>
 80081b2:	4604      	mov	r4, r0
 80081b4:	b140      	cbz	r0, 80081c8 <__sfmoreglue+0x28>
 80081b6:	2100      	movs	r1, #0
 80081b8:	e9c0 1600 	strd	r1, r6, [r0]
 80081bc:	300c      	adds	r0, #12
 80081be:	60a0      	str	r0, [r4, #8]
 80081c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80081c4:	f7fd fb7a 	bl	80058bc <memset>
 80081c8:	4620      	mov	r0, r4
 80081ca:	bd70      	pop	{r4, r5, r6, pc}

080081cc <__sfp_lock_acquire>:
 80081cc:	4801      	ldr	r0, [pc, #4]	; (80081d4 <__sfp_lock_acquire+0x8>)
 80081ce:	f000 b8b3 	b.w	8008338 <__retarget_lock_acquire_recursive>
 80081d2:	bf00      	nop
 80081d4:	200006d8 	.word	0x200006d8

080081d8 <__sfp_lock_release>:
 80081d8:	4801      	ldr	r0, [pc, #4]	; (80081e0 <__sfp_lock_release+0x8>)
 80081da:	f000 b8ae 	b.w	800833a <__retarget_lock_release_recursive>
 80081de:	bf00      	nop
 80081e0:	200006d8 	.word	0x200006d8

080081e4 <__sinit_lock_acquire>:
 80081e4:	4801      	ldr	r0, [pc, #4]	; (80081ec <__sinit_lock_acquire+0x8>)
 80081e6:	f000 b8a7 	b.w	8008338 <__retarget_lock_acquire_recursive>
 80081ea:	bf00      	nop
 80081ec:	200006d3 	.word	0x200006d3

080081f0 <__sinit_lock_release>:
 80081f0:	4801      	ldr	r0, [pc, #4]	; (80081f8 <__sinit_lock_release+0x8>)
 80081f2:	f000 b8a2 	b.w	800833a <__retarget_lock_release_recursive>
 80081f6:	bf00      	nop
 80081f8:	200006d3 	.word	0x200006d3

080081fc <__sinit>:
 80081fc:	b510      	push	{r4, lr}
 80081fe:	4604      	mov	r4, r0
 8008200:	f7ff fff0 	bl	80081e4 <__sinit_lock_acquire>
 8008204:	69a3      	ldr	r3, [r4, #24]
 8008206:	b11b      	cbz	r3, 8008210 <__sinit+0x14>
 8008208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800820c:	f7ff bff0 	b.w	80081f0 <__sinit_lock_release>
 8008210:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008214:	6523      	str	r3, [r4, #80]	; 0x50
 8008216:	4b13      	ldr	r3, [pc, #76]	; (8008264 <__sinit+0x68>)
 8008218:	4a13      	ldr	r2, [pc, #76]	; (8008268 <__sinit+0x6c>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	62a2      	str	r2, [r4, #40]	; 0x28
 800821e:	42a3      	cmp	r3, r4
 8008220:	bf04      	itt	eq
 8008222:	2301      	moveq	r3, #1
 8008224:	61a3      	streq	r3, [r4, #24]
 8008226:	4620      	mov	r0, r4
 8008228:	f000 f820 	bl	800826c <__sfp>
 800822c:	6060      	str	r0, [r4, #4]
 800822e:	4620      	mov	r0, r4
 8008230:	f000 f81c 	bl	800826c <__sfp>
 8008234:	60a0      	str	r0, [r4, #8]
 8008236:	4620      	mov	r0, r4
 8008238:	f000 f818 	bl	800826c <__sfp>
 800823c:	2200      	movs	r2, #0
 800823e:	60e0      	str	r0, [r4, #12]
 8008240:	2104      	movs	r1, #4
 8008242:	6860      	ldr	r0, [r4, #4]
 8008244:	f7ff ff82 	bl	800814c <std>
 8008248:	68a0      	ldr	r0, [r4, #8]
 800824a:	2201      	movs	r2, #1
 800824c:	2109      	movs	r1, #9
 800824e:	f7ff ff7d 	bl	800814c <std>
 8008252:	68e0      	ldr	r0, [r4, #12]
 8008254:	2202      	movs	r2, #2
 8008256:	2112      	movs	r1, #18
 8008258:	f7ff ff78 	bl	800814c <std>
 800825c:	2301      	movs	r3, #1
 800825e:	61a3      	str	r3, [r4, #24]
 8008260:	e7d2      	b.n	8008208 <__sinit+0xc>
 8008262:	bf00      	nop
 8008264:	08008638 	.word	0x08008638
 8008268:	08008195 	.word	0x08008195

0800826c <__sfp>:
 800826c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800826e:	4607      	mov	r7, r0
 8008270:	f7ff ffac 	bl	80081cc <__sfp_lock_acquire>
 8008274:	4b1e      	ldr	r3, [pc, #120]	; (80082f0 <__sfp+0x84>)
 8008276:	681e      	ldr	r6, [r3, #0]
 8008278:	69b3      	ldr	r3, [r6, #24]
 800827a:	b913      	cbnz	r3, 8008282 <__sfp+0x16>
 800827c:	4630      	mov	r0, r6
 800827e:	f7ff ffbd 	bl	80081fc <__sinit>
 8008282:	3648      	adds	r6, #72	; 0x48
 8008284:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008288:	3b01      	subs	r3, #1
 800828a:	d503      	bpl.n	8008294 <__sfp+0x28>
 800828c:	6833      	ldr	r3, [r6, #0]
 800828e:	b30b      	cbz	r3, 80082d4 <__sfp+0x68>
 8008290:	6836      	ldr	r6, [r6, #0]
 8008292:	e7f7      	b.n	8008284 <__sfp+0x18>
 8008294:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008298:	b9d5      	cbnz	r5, 80082d0 <__sfp+0x64>
 800829a:	4b16      	ldr	r3, [pc, #88]	; (80082f4 <__sfp+0x88>)
 800829c:	60e3      	str	r3, [r4, #12]
 800829e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80082a2:	6665      	str	r5, [r4, #100]	; 0x64
 80082a4:	f000 f847 	bl	8008336 <__retarget_lock_init_recursive>
 80082a8:	f7ff ff96 	bl	80081d8 <__sfp_lock_release>
 80082ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80082b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80082b4:	6025      	str	r5, [r4, #0]
 80082b6:	61a5      	str	r5, [r4, #24]
 80082b8:	2208      	movs	r2, #8
 80082ba:	4629      	mov	r1, r5
 80082bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80082c0:	f7fd fafc 	bl	80058bc <memset>
 80082c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80082c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80082cc:	4620      	mov	r0, r4
 80082ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082d0:	3468      	adds	r4, #104	; 0x68
 80082d2:	e7d9      	b.n	8008288 <__sfp+0x1c>
 80082d4:	2104      	movs	r1, #4
 80082d6:	4638      	mov	r0, r7
 80082d8:	f7ff ff62 	bl	80081a0 <__sfmoreglue>
 80082dc:	4604      	mov	r4, r0
 80082de:	6030      	str	r0, [r6, #0]
 80082e0:	2800      	cmp	r0, #0
 80082e2:	d1d5      	bne.n	8008290 <__sfp+0x24>
 80082e4:	f7ff ff78 	bl	80081d8 <__sfp_lock_release>
 80082e8:	230c      	movs	r3, #12
 80082ea:	603b      	str	r3, [r7, #0]
 80082ec:	e7ee      	b.n	80082cc <__sfp+0x60>
 80082ee:	bf00      	nop
 80082f0:	08008638 	.word	0x08008638
 80082f4:	ffff0001 	.word	0xffff0001

080082f8 <_fwalk_reent>:
 80082f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082fc:	4606      	mov	r6, r0
 80082fe:	4688      	mov	r8, r1
 8008300:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008304:	2700      	movs	r7, #0
 8008306:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800830a:	f1b9 0901 	subs.w	r9, r9, #1
 800830e:	d505      	bpl.n	800831c <_fwalk_reent+0x24>
 8008310:	6824      	ldr	r4, [r4, #0]
 8008312:	2c00      	cmp	r4, #0
 8008314:	d1f7      	bne.n	8008306 <_fwalk_reent+0xe>
 8008316:	4638      	mov	r0, r7
 8008318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800831c:	89ab      	ldrh	r3, [r5, #12]
 800831e:	2b01      	cmp	r3, #1
 8008320:	d907      	bls.n	8008332 <_fwalk_reent+0x3a>
 8008322:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008326:	3301      	adds	r3, #1
 8008328:	d003      	beq.n	8008332 <_fwalk_reent+0x3a>
 800832a:	4629      	mov	r1, r5
 800832c:	4630      	mov	r0, r6
 800832e:	47c0      	blx	r8
 8008330:	4307      	orrs	r7, r0
 8008332:	3568      	adds	r5, #104	; 0x68
 8008334:	e7e9      	b.n	800830a <_fwalk_reent+0x12>

08008336 <__retarget_lock_init_recursive>:
 8008336:	4770      	bx	lr

08008338 <__retarget_lock_acquire_recursive>:
 8008338:	4770      	bx	lr

0800833a <__retarget_lock_release_recursive>:
 800833a:	4770      	bx	lr

0800833c <__swhatbuf_r>:
 800833c:	b570      	push	{r4, r5, r6, lr}
 800833e:	460e      	mov	r6, r1
 8008340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008344:	2900      	cmp	r1, #0
 8008346:	b096      	sub	sp, #88	; 0x58
 8008348:	4614      	mov	r4, r2
 800834a:	461d      	mov	r5, r3
 800834c:	da07      	bge.n	800835e <__swhatbuf_r+0x22>
 800834e:	2300      	movs	r3, #0
 8008350:	602b      	str	r3, [r5, #0]
 8008352:	89b3      	ldrh	r3, [r6, #12]
 8008354:	061a      	lsls	r2, r3, #24
 8008356:	d410      	bmi.n	800837a <__swhatbuf_r+0x3e>
 8008358:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800835c:	e00e      	b.n	800837c <__swhatbuf_r+0x40>
 800835e:	466a      	mov	r2, sp
 8008360:	f000 f902 	bl	8008568 <_fstat_r>
 8008364:	2800      	cmp	r0, #0
 8008366:	dbf2      	blt.n	800834e <__swhatbuf_r+0x12>
 8008368:	9a01      	ldr	r2, [sp, #4]
 800836a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800836e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008372:	425a      	negs	r2, r3
 8008374:	415a      	adcs	r2, r3
 8008376:	602a      	str	r2, [r5, #0]
 8008378:	e7ee      	b.n	8008358 <__swhatbuf_r+0x1c>
 800837a:	2340      	movs	r3, #64	; 0x40
 800837c:	2000      	movs	r0, #0
 800837e:	6023      	str	r3, [r4, #0]
 8008380:	b016      	add	sp, #88	; 0x58
 8008382:	bd70      	pop	{r4, r5, r6, pc}

08008384 <__smakebuf_r>:
 8008384:	898b      	ldrh	r3, [r1, #12]
 8008386:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008388:	079d      	lsls	r5, r3, #30
 800838a:	4606      	mov	r6, r0
 800838c:	460c      	mov	r4, r1
 800838e:	d507      	bpl.n	80083a0 <__smakebuf_r+0x1c>
 8008390:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008394:	6023      	str	r3, [r4, #0]
 8008396:	6123      	str	r3, [r4, #16]
 8008398:	2301      	movs	r3, #1
 800839a:	6163      	str	r3, [r4, #20]
 800839c:	b002      	add	sp, #8
 800839e:	bd70      	pop	{r4, r5, r6, pc}
 80083a0:	ab01      	add	r3, sp, #4
 80083a2:	466a      	mov	r2, sp
 80083a4:	f7ff ffca 	bl	800833c <__swhatbuf_r>
 80083a8:	9900      	ldr	r1, [sp, #0]
 80083aa:	4605      	mov	r5, r0
 80083ac:	4630      	mov	r0, r6
 80083ae:	f7ff f987 	bl	80076c0 <_malloc_r>
 80083b2:	b948      	cbnz	r0, 80083c8 <__smakebuf_r+0x44>
 80083b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083b8:	059a      	lsls	r2, r3, #22
 80083ba:	d4ef      	bmi.n	800839c <__smakebuf_r+0x18>
 80083bc:	f023 0303 	bic.w	r3, r3, #3
 80083c0:	f043 0302 	orr.w	r3, r3, #2
 80083c4:	81a3      	strh	r3, [r4, #12]
 80083c6:	e7e3      	b.n	8008390 <__smakebuf_r+0xc>
 80083c8:	4b0d      	ldr	r3, [pc, #52]	; (8008400 <__smakebuf_r+0x7c>)
 80083ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80083cc:	89a3      	ldrh	r3, [r4, #12]
 80083ce:	6020      	str	r0, [r4, #0]
 80083d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083d4:	81a3      	strh	r3, [r4, #12]
 80083d6:	9b00      	ldr	r3, [sp, #0]
 80083d8:	6163      	str	r3, [r4, #20]
 80083da:	9b01      	ldr	r3, [sp, #4]
 80083dc:	6120      	str	r0, [r4, #16]
 80083de:	b15b      	cbz	r3, 80083f8 <__smakebuf_r+0x74>
 80083e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083e4:	4630      	mov	r0, r6
 80083e6:	f000 f8d1 	bl	800858c <_isatty_r>
 80083ea:	b128      	cbz	r0, 80083f8 <__smakebuf_r+0x74>
 80083ec:	89a3      	ldrh	r3, [r4, #12]
 80083ee:	f023 0303 	bic.w	r3, r3, #3
 80083f2:	f043 0301 	orr.w	r3, r3, #1
 80083f6:	81a3      	strh	r3, [r4, #12]
 80083f8:	89a0      	ldrh	r0, [r4, #12]
 80083fa:	4305      	orrs	r5, r0
 80083fc:	81a5      	strh	r5, [r4, #12]
 80083fe:	e7cd      	b.n	800839c <__smakebuf_r+0x18>
 8008400:	08008195 	.word	0x08008195

08008404 <_malloc_usable_size_r>:
 8008404:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008408:	1f18      	subs	r0, r3, #4
 800840a:	2b00      	cmp	r3, #0
 800840c:	bfbc      	itt	lt
 800840e:	580b      	ldrlt	r3, [r1, r0]
 8008410:	18c0      	addlt	r0, r0, r3
 8008412:	4770      	bx	lr

08008414 <_raise_r>:
 8008414:	291f      	cmp	r1, #31
 8008416:	b538      	push	{r3, r4, r5, lr}
 8008418:	4604      	mov	r4, r0
 800841a:	460d      	mov	r5, r1
 800841c:	d904      	bls.n	8008428 <_raise_r+0x14>
 800841e:	2316      	movs	r3, #22
 8008420:	6003      	str	r3, [r0, #0]
 8008422:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008426:	bd38      	pop	{r3, r4, r5, pc}
 8008428:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800842a:	b112      	cbz	r2, 8008432 <_raise_r+0x1e>
 800842c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008430:	b94b      	cbnz	r3, 8008446 <_raise_r+0x32>
 8008432:	4620      	mov	r0, r4
 8008434:	f000 f830 	bl	8008498 <_getpid_r>
 8008438:	462a      	mov	r2, r5
 800843a:	4601      	mov	r1, r0
 800843c:	4620      	mov	r0, r4
 800843e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008442:	f000 b817 	b.w	8008474 <_kill_r>
 8008446:	2b01      	cmp	r3, #1
 8008448:	d00a      	beq.n	8008460 <_raise_r+0x4c>
 800844a:	1c59      	adds	r1, r3, #1
 800844c:	d103      	bne.n	8008456 <_raise_r+0x42>
 800844e:	2316      	movs	r3, #22
 8008450:	6003      	str	r3, [r0, #0]
 8008452:	2001      	movs	r0, #1
 8008454:	e7e7      	b.n	8008426 <_raise_r+0x12>
 8008456:	2400      	movs	r4, #0
 8008458:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800845c:	4628      	mov	r0, r5
 800845e:	4798      	blx	r3
 8008460:	2000      	movs	r0, #0
 8008462:	e7e0      	b.n	8008426 <_raise_r+0x12>

08008464 <raise>:
 8008464:	4b02      	ldr	r3, [pc, #8]	; (8008470 <raise+0xc>)
 8008466:	4601      	mov	r1, r0
 8008468:	6818      	ldr	r0, [r3, #0]
 800846a:	f7ff bfd3 	b.w	8008414 <_raise_r>
 800846e:	bf00      	nop
 8008470:	2000000c 	.word	0x2000000c

08008474 <_kill_r>:
 8008474:	b538      	push	{r3, r4, r5, lr}
 8008476:	4d07      	ldr	r5, [pc, #28]	; (8008494 <_kill_r+0x20>)
 8008478:	2300      	movs	r3, #0
 800847a:	4604      	mov	r4, r0
 800847c:	4608      	mov	r0, r1
 800847e:	4611      	mov	r1, r2
 8008480:	602b      	str	r3, [r5, #0]
 8008482:	f7f9 f8c7 	bl	8001614 <_kill>
 8008486:	1c43      	adds	r3, r0, #1
 8008488:	d102      	bne.n	8008490 <_kill_r+0x1c>
 800848a:	682b      	ldr	r3, [r5, #0]
 800848c:	b103      	cbz	r3, 8008490 <_kill_r+0x1c>
 800848e:	6023      	str	r3, [r4, #0]
 8008490:	bd38      	pop	{r3, r4, r5, pc}
 8008492:	bf00      	nop
 8008494:	200006cc 	.word	0x200006cc

08008498 <_getpid_r>:
 8008498:	f7f9 b8b4 	b.w	8001604 <_getpid>

0800849c <__sread>:
 800849c:	b510      	push	{r4, lr}
 800849e:	460c      	mov	r4, r1
 80084a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084a4:	f000 f894 	bl	80085d0 <_read_r>
 80084a8:	2800      	cmp	r0, #0
 80084aa:	bfab      	itete	ge
 80084ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80084ae:	89a3      	ldrhlt	r3, [r4, #12]
 80084b0:	181b      	addge	r3, r3, r0
 80084b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80084b6:	bfac      	ite	ge
 80084b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80084ba:	81a3      	strhlt	r3, [r4, #12]
 80084bc:	bd10      	pop	{r4, pc}

080084be <__swrite>:
 80084be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084c2:	461f      	mov	r7, r3
 80084c4:	898b      	ldrh	r3, [r1, #12]
 80084c6:	05db      	lsls	r3, r3, #23
 80084c8:	4605      	mov	r5, r0
 80084ca:	460c      	mov	r4, r1
 80084cc:	4616      	mov	r6, r2
 80084ce:	d505      	bpl.n	80084dc <__swrite+0x1e>
 80084d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084d4:	2302      	movs	r3, #2
 80084d6:	2200      	movs	r2, #0
 80084d8:	f000 f868 	bl	80085ac <_lseek_r>
 80084dc:	89a3      	ldrh	r3, [r4, #12]
 80084de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084e6:	81a3      	strh	r3, [r4, #12]
 80084e8:	4632      	mov	r2, r6
 80084ea:	463b      	mov	r3, r7
 80084ec:	4628      	mov	r0, r5
 80084ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084f2:	f000 b817 	b.w	8008524 <_write_r>

080084f6 <__sseek>:
 80084f6:	b510      	push	{r4, lr}
 80084f8:	460c      	mov	r4, r1
 80084fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084fe:	f000 f855 	bl	80085ac <_lseek_r>
 8008502:	1c43      	adds	r3, r0, #1
 8008504:	89a3      	ldrh	r3, [r4, #12]
 8008506:	bf15      	itete	ne
 8008508:	6560      	strne	r0, [r4, #84]	; 0x54
 800850a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800850e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008512:	81a3      	strheq	r3, [r4, #12]
 8008514:	bf18      	it	ne
 8008516:	81a3      	strhne	r3, [r4, #12]
 8008518:	bd10      	pop	{r4, pc}

0800851a <__sclose>:
 800851a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800851e:	f000 b813 	b.w	8008548 <_close_r>
	...

08008524 <_write_r>:
 8008524:	b538      	push	{r3, r4, r5, lr}
 8008526:	4d07      	ldr	r5, [pc, #28]	; (8008544 <_write_r+0x20>)
 8008528:	4604      	mov	r4, r0
 800852a:	4608      	mov	r0, r1
 800852c:	4611      	mov	r1, r2
 800852e:	2200      	movs	r2, #0
 8008530:	602a      	str	r2, [r5, #0]
 8008532:	461a      	mov	r2, r3
 8008534:	f7f9 f8a5 	bl	8001682 <_write>
 8008538:	1c43      	adds	r3, r0, #1
 800853a:	d102      	bne.n	8008542 <_write_r+0x1e>
 800853c:	682b      	ldr	r3, [r5, #0]
 800853e:	b103      	cbz	r3, 8008542 <_write_r+0x1e>
 8008540:	6023      	str	r3, [r4, #0]
 8008542:	bd38      	pop	{r3, r4, r5, pc}
 8008544:	200006cc 	.word	0x200006cc

08008548 <_close_r>:
 8008548:	b538      	push	{r3, r4, r5, lr}
 800854a:	4d06      	ldr	r5, [pc, #24]	; (8008564 <_close_r+0x1c>)
 800854c:	2300      	movs	r3, #0
 800854e:	4604      	mov	r4, r0
 8008550:	4608      	mov	r0, r1
 8008552:	602b      	str	r3, [r5, #0]
 8008554:	f7f9 f8b1 	bl	80016ba <_close>
 8008558:	1c43      	adds	r3, r0, #1
 800855a:	d102      	bne.n	8008562 <_close_r+0x1a>
 800855c:	682b      	ldr	r3, [r5, #0]
 800855e:	b103      	cbz	r3, 8008562 <_close_r+0x1a>
 8008560:	6023      	str	r3, [r4, #0]
 8008562:	bd38      	pop	{r3, r4, r5, pc}
 8008564:	200006cc 	.word	0x200006cc

08008568 <_fstat_r>:
 8008568:	b538      	push	{r3, r4, r5, lr}
 800856a:	4d07      	ldr	r5, [pc, #28]	; (8008588 <_fstat_r+0x20>)
 800856c:	2300      	movs	r3, #0
 800856e:	4604      	mov	r4, r0
 8008570:	4608      	mov	r0, r1
 8008572:	4611      	mov	r1, r2
 8008574:	602b      	str	r3, [r5, #0]
 8008576:	f7f9 f8ac 	bl	80016d2 <_fstat>
 800857a:	1c43      	adds	r3, r0, #1
 800857c:	d102      	bne.n	8008584 <_fstat_r+0x1c>
 800857e:	682b      	ldr	r3, [r5, #0]
 8008580:	b103      	cbz	r3, 8008584 <_fstat_r+0x1c>
 8008582:	6023      	str	r3, [r4, #0]
 8008584:	bd38      	pop	{r3, r4, r5, pc}
 8008586:	bf00      	nop
 8008588:	200006cc 	.word	0x200006cc

0800858c <_isatty_r>:
 800858c:	b538      	push	{r3, r4, r5, lr}
 800858e:	4d06      	ldr	r5, [pc, #24]	; (80085a8 <_isatty_r+0x1c>)
 8008590:	2300      	movs	r3, #0
 8008592:	4604      	mov	r4, r0
 8008594:	4608      	mov	r0, r1
 8008596:	602b      	str	r3, [r5, #0]
 8008598:	f7f9 f8ab 	bl	80016f2 <_isatty>
 800859c:	1c43      	adds	r3, r0, #1
 800859e:	d102      	bne.n	80085a6 <_isatty_r+0x1a>
 80085a0:	682b      	ldr	r3, [r5, #0]
 80085a2:	b103      	cbz	r3, 80085a6 <_isatty_r+0x1a>
 80085a4:	6023      	str	r3, [r4, #0]
 80085a6:	bd38      	pop	{r3, r4, r5, pc}
 80085a8:	200006cc 	.word	0x200006cc

080085ac <_lseek_r>:
 80085ac:	b538      	push	{r3, r4, r5, lr}
 80085ae:	4d07      	ldr	r5, [pc, #28]	; (80085cc <_lseek_r+0x20>)
 80085b0:	4604      	mov	r4, r0
 80085b2:	4608      	mov	r0, r1
 80085b4:	4611      	mov	r1, r2
 80085b6:	2200      	movs	r2, #0
 80085b8:	602a      	str	r2, [r5, #0]
 80085ba:	461a      	mov	r2, r3
 80085bc:	f7f9 f8a4 	bl	8001708 <_lseek>
 80085c0:	1c43      	adds	r3, r0, #1
 80085c2:	d102      	bne.n	80085ca <_lseek_r+0x1e>
 80085c4:	682b      	ldr	r3, [r5, #0]
 80085c6:	b103      	cbz	r3, 80085ca <_lseek_r+0x1e>
 80085c8:	6023      	str	r3, [r4, #0]
 80085ca:	bd38      	pop	{r3, r4, r5, pc}
 80085cc:	200006cc 	.word	0x200006cc

080085d0 <_read_r>:
 80085d0:	b538      	push	{r3, r4, r5, lr}
 80085d2:	4d07      	ldr	r5, [pc, #28]	; (80085f0 <_read_r+0x20>)
 80085d4:	4604      	mov	r4, r0
 80085d6:	4608      	mov	r0, r1
 80085d8:	4611      	mov	r1, r2
 80085da:	2200      	movs	r2, #0
 80085dc:	602a      	str	r2, [r5, #0]
 80085de:	461a      	mov	r2, r3
 80085e0:	f7f9 f832 	bl	8001648 <_read>
 80085e4:	1c43      	adds	r3, r0, #1
 80085e6:	d102      	bne.n	80085ee <_read_r+0x1e>
 80085e8:	682b      	ldr	r3, [r5, #0]
 80085ea:	b103      	cbz	r3, 80085ee <_read_r+0x1e>
 80085ec:	6023      	str	r3, [r4, #0]
 80085ee:	bd38      	pop	{r3, r4, r5, pc}
 80085f0:	200006cc 	.word	0x200006cc

080085f4 <_init>:
 80085f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085f6:	bf00      	nop
 80085f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085fa:	bc08      	pop	{r3}
 80085fc:	469e      	mov	lr, r3
 80085fe:	4770      	bx	lr

08008600 <_fini>:
 8008600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008602:	bf00      	nop
 8008604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008606:	bc08      	pop	{r3}
 8008608:	469e      	mov	lr, r3
 800860a:	4770      	bx	lr
